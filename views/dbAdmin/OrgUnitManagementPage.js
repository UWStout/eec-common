(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __reExport = (target, module, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    }
    return target;
  };
  var __toModule = (module) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
  };

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var _assign = require_object_assign();
          var ReactVersion = "17.0.2";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          exports.StrictMode = 60108;
          exports.Profiler = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          exports.Suspense = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            exports.StrictMode = symbolFor("react.strict_mode");
            exports.Profiler = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            exports.Suspense = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: 0
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            assign: _assign
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          }
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component5(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component5.prototype.isReactComponent = {};
          Component5.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component5.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component5.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component5.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          _assign(pureComponentPrototype, Component5.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          function getWrappedName2(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case exports.Profiler:
                return "Profiler";
              case exports.StrictMode:
                return "StrictMode";
              case exports.Suspense:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName2(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement74(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement14(element, config, children) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
              }
            }
            var propName;
            var props = _assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement8(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape2(key) {
            var escapeRegex2 = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex2, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              return escape2("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement8(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement8(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          function createContext3(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
              thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = defaultExport;
                }
              }, function(error2) {
                if (payload._status === Pending) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
            }
            if (payload._status === Resolved) {
              return payload._result;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: -1,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef57(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType2 = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType2, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (render.displayName == null) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType2;
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType2 = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType2, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (type.displayName == null) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType2;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext7(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          function useState23(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef23(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect29(create4, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create4, deps);
          }
          function useLayoutEffect9(create4, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create4, deps);
          }
          function useCallback17(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo5(create4, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create4, deps);
          }
          function useImperativeHandle7(ref, create4, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create4, deps);
          }
          function useDebugValue3(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match && match[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component6) {
            var prototype = Component6.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case exports.Suspense:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (Array.isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement8(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement8(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement8(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement74.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === exports.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement14.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              new Map([[frozenObject, null]]);
              new Set([frozenObject]);
            } catch (e) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children8 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children8;
          exports.Component = Component5;
          exports.PureComponent = PureComponent;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext3;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef57;
          exports.isValidElement = isValidElement8;
          exports.lazy = lazy;
          exports.memo = memo2;
          exports.useCallback = useCallback17;
          exports.useContext = useContext7;
          exports.useDebugValue = useDebugValue3;
          exports.useEffect = useEffect29;
          exports.useImperativeHandle = useImperativeHandle7;
          exports.useLayoutEffect = useLayoutEffect9;
          exports.useMemo = useMemo5;
          exports.useReducer = useReducer;
          exports.useRef = useRef23;
          exports.useState = useState23;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e) {
                  setTimeout(_flushCallback, 0);
                  throw e;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms2) {
              _timeoutID = setTimeout(cb, ms2);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame2 = window.requestAnimationFrame;
              var cancelAnimationFrame2 = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms2) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms2);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last = heap.pop();
              if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (true) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            while (index < length) {
              var leftIndex = (index + 1) * 2 - 1;
              var left2 = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right2 = heap[rightIndex];
              if (left2 !== void 0 && compare(left2, node) < 0) {
                if (right2 !== void 0 && compare(right2, left2) < 0) {
                  heap[index] = right2;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left2;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (right2 !== void 0 && compare(right2, node) < 0) {
                heap[index] = right2;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms2) {
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports.__interactionsRef = null;
          exports.__subscriberRef = null;
          {
            exports.__interactionsRef = {
              current: new Set()
            };
            exports.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = new Set();
            try {
              return callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = wrappedInteractions;
              subscriber = exports.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports.unstable_clear = unstable_clear;
          exports.unstable_getCurrent = unstable_getCurrent;
          exports.unstable_getThreadID = unstable_getThreadID;
          exports.unstable_subscribe = unstable_subscribe;
          exports.unstable_trace = unstable_trace;
          exports.unstable_unsubscribe = unstable_unsubscribe;
          exports.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_tracing_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React108 = require_react();
          var _assign = require_object_assign();
          var Scheduler = require_scheduler();
          var tracing = require_tracing();
          var ReactSharedInternals = React108.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          if (!React108) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment8 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef2 = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var OffscreenComponent = 23;
          var LegacyHiddenComponent = 24;
          var enableProfilerTimer = true;
          var enableFundamentalAPI = false;
          var enableNewReconciler = false;
          var warnAboutStringRefs = false;
          var allNativeEvents = new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties2.hasOwnProperty(name) ? properties2[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties2 = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref3) {
            var name = _ref3[0], attributeName = _ref3[1];
            properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize2 = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties2[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties2[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties2[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (isOpaqueHydratingObject(expected)) {
                return expected;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match && match[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component5) {
            var prototype = Component5.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef2:
                return describeFunctionComponentFrame(fiber.type.render);
              case Block:
                return describeFunctionComponentFrame(fiber.type._render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName2(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName2(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function getIsRendering() {
            {
              return isRendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get3 = descriptor.get, set3 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get3.call(this);
              },
              set: function(value) {
                currentValue = "" + value;
                set3.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children) {
            var content = "";
            React108.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
            });
            return content;
          }
          function validateProps(element, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React108.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (typeof child.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          function getHostProps$1(element, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var isArray2 = Array.isArray(props[propName]);
                if (props.multiple && !isArray2) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray2) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$3(element, props) {
            var node = element;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html2) {
            if (node.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html2.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html2;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty2 = value == null || typeof value === "boolean" || value === "";
            if (isEmpty2) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            return ("" + value).trim();
          }
          var uppercasePattern2 = /([A-Z])/g;
          var msPattern2 = /^ms-/;
          function hyphenateStyleName2(name) {
            return name.replace(uppercasePattern2, "-$1").toLowerCase().replace(msPattern2, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize2 = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported style property %s. Did you mean %s?", name, camelize2(name.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles82) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles82) {
                if (!styles82.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles82[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName2(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles82) {
            var style3 = node.style;
            for (var styleName in styles82) {
              if (!styles82.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles82[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles82[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style3.setProperty(styleName, styleValue);
              } else {
                style3[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles82) {
            var expanded = {};
            for (var key in styles82) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var IS_REPLAYED = 1 << 4;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var discreteUpdatesImpl = function(fn, a, b, c, d) {
            return fn(a, b, c, d);
          };
          var flushDiscreteUpdatesImpl = function() {
          };
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, bookkeeping) {
            if (isInsideEventHandler) {
              return fn(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function batchedEventUpdates(fn, a, b) {
            if (isBatchingEventUpdates) {
              return fn(a, b);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn, a, b);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn, a, b, c, d);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            {
              if (!isInsideEventHandler) {
                flushDiscreteUpdatesImpl();
              }
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener || typeof listener === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
              }
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner2) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          function get2(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set2(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var PlacementAndUpdate = 6;
          var Deletion = 8;
          var ContentReset = 16;
          var Callback = 32;
          var DidCapture = 64;
          var Ref = 128;
          var Snapshot2 = 256;
          var Passive = 512;
          var PassiveUnmountPendingDev = 8192;
          var Hydrating = 1024;
          var HydratingAndUpdate = 1028;
          var LifecycleEffectMask = 932;
          var HostEffectMask = 2047;
          var Incomplete = 2048;
          var ShouldCapture = 4096;
          var ForceUpdateForLegacySuspense = 16384;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get2(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a.alternate === b)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node;
              } else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                return node;
              } else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function doesFiberContain(parentFiber, childFiber) {
            var node = childFiber;
            var parentFiberAlternate = parentFiber.alternate;
            while (node !== null) {
              if (node === parentFiber || node === parentFiberAlternate) {
                return true;
              }
              node = node.return;
            }
            return false;
          }
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn) {
            attemptUserBlockingHydration = fn;
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = new Map();
          var queuedPointerCaptures = new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                      Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                        attemptHydrationAtCurrentPriority(nearestMounted);
                      });
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var targetContainers = nextDiscreteEvent.targetContainers;
              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                  nextDiscreteEvent.blockedOn = nextBlockedOn;
                  break;
                }
                targetContainers.shift();
              }
              if (nextDiscreteEvent.blockedOn === null) {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style2 = {};
          if (canUseDOM) {
            style2 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style2) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = new Map();
          var eventPriorities = new Map();
          var discreteEventPairsForSimpleEventPlugin = [
            "cancel",
            "cancel",
            "click",
            "click",
            "close",
            "close",
            "contextmenu",
            "contextMenu",
            "copy",
            "copy",
            "cut",
            "cut",
            "auxclick",
            "auxClick",
            "dblclick",
            "doubleClick",
            "dragend",
            "dragEnd",
            "dragstart",
            "dragStart",
            "drop",
            "drop",
            "focusin",
            "focus",
            "focusout",
            "blur",
            "input",
            "input",
            "invalid",
            "invalid",
            "keydown",
            "keyDown",
            "keypress",
            "keyPress",
            "keyup",
            "keyUp",
            "mousedown",
            "mouseDown",
            "mouseup",
            "mouseUp",
            "paste",
            "paste",
            "pause",
            "pause",
            "play",
            "play",
            "pointercancel",
            "pointerCancel",
            "pointerdown",
            "pointerDown",
            "pointerup",
            "pointerUp",
            "ratechange",
            "rateChange",
            "reset",
            "reset",
            "seeked",
            "seeked",
            "submit",
            "submit",
            "touchcancel",
            "touchCancel",
            "touchend",
            "touchEnd",
            "touchstart",
            "touchStart",
            "volumechange",
            "volumeChange"
          ];
          var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
          var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
          var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
          function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i += 2) {
              var topEvent = eventTypes[i];
              var event = eventTypes[i + 1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var reactName = "on" + capitalizedEvent;
              eventPriorities.set(topEvent, priority);
              topLevelEventsToReactNames.set(topEvent, reactName);
              registerTwoPhaseEvent(reactName, [topEvent]);
            }
          }
          function setEventPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i++) {
              eventPriorities.set(eventTypes[i], priority);
            }
          }
          function getEventPriorityForPluginSystem(domEventName) {
            var priority = eventPriorities.get(domEventName);
            return priority === void 0 ? ContinuousEvent : priority;
          }
          function registerSimpleEvents() {
            registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
            registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
            registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
            setEventPriorities(otherDiscreteEvents, DiscreteEvent);
          }
          var Scheduler_now = Scheduler.unstable_now;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var ImmediatePriority = 99;
          var UserBlockingPriority = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var initialTimeMs = Scheduler_now();
          var SyncLanePriority = 15;
          var SyncBatchedLanePriority = 14;
          var InputDiscreteHydrationLanePriority = 13;
          var InputDiscreteLanePriority = 12;
          var InputContinuousHydrationLanePriority = 11;
          var InputContinuousLanePriority = 10;
          var DefaultHydrationLanePriority = 9;
          var DefaultLanePriority = 8;
          var TransitionHydrationPriority = 7;
          var TransitionPriority = 6;
          var RetryLanePriority = 5;
          var SelectiveHydrationLanePriority = 4;
          var IdleHydrationLanePriority = 3;
          var IdleLanePriority = 2;
          var OffscreenLanePriority = 1;
          var NoLanePriority = 0;
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var SyncBatchedLane = 2;
          var InputDiscreteHydrationLane = 4;
          var InputDiscreteLanes = 24;
          var InputContinuousHydrationLane = 32;
          var InputContinuousLanes = 192;
          var DefaultHydrationLane = 256;
          var DefaultLanes = 3584;
          var TransitionHydrationLane = 4096;
          var TransitionLanes = 4186112;
          var RetryLanes = 62914560;
          var SomeRetryLane = 33554432;
          var SelectiveHydrationLane = 67108864;
          var NonIdleLanes = 134217727;
          var IdleHydrationLane = 134217728;
          var IdleLanes = 805306368;
          var OffscreenLane = 1073741824;
          var NoTimestamp = -1;
          function setCurrentUpdateLanePriority(newLanePriority) {
          }
          var return_highestLanePriority = DefaultLanePriority;
          function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncLanePriority;
              return SyncLane;
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncBatchedLanePriority;
              return SyncBatchedLane;
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
              return_highestLanePriority = InputDiscreteHydrationLanePriority;
              return InputDiscreteHydrationLane;
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes;
            if (inputDiscreteLanes !== NoLanes) {
              return_highestLanePriority = InputDiscreteLanePriority;
              return inputDiscreteLanes;
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
              return_highestLanePriority = InputContinuousHydrationLanePriority;
              return InputContinuousHydrationLane;
            }
            var inputContinuousLanes = InputContinuousLanes & lanes;
            if (inputContinuousLanes !== NoLanes) {
              return_highestLanePriority = InputContinuousLanePriority;
              return inputContinuousLanes;
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
              return_highestLanePriority = DefaultHydrationLanePriority;
              return DefaultHydrationLane;
            }
            var defaultLanes = DefaultLanes & lanes;
            if (defaultLanes !== NoLanes) {
              return_highestLanePriority = DefaultLanePriority;
              return defaultLanes;
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
              return_highestLanePriority = TransitionHydrationPriority;
              return TransitionHydrationLane;
            }
            var transitionLanes = TransitionLanes & lanes;
            if (transitionLanes !== NoLanes) {
              return_highestLanePriority = TransitionPriority;
              return transitionLanes;
            }
            var retryLanes = RetryLanes & lanes;
            if (retryLanes !== NoLanes) {
              return_highestLanePriority = RetryLanePriority;
              return retryLanes;
            }
            if (lanes & SelectiveHydrationLane) {
              return_highestLanePriority = SelectiveHydrationLanePriority;
              return SelectiveHydrationLane;
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
              return_highestLanePriority = IdleHydrationLanePriority;
              return IdleHydrationLane;
            }
            var idleLanes = IdleLanes & lanes;
            if (idleLanes !== NoLanes) {
              return_highestLanePriority = IdleLanePriority;
              return idleLanes;
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
              return_highestLanePriority = OffscreenLanePriority;
              return OffscreenLane;
            }
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return_highestLanePriority = DefaultLanePriority;
            return lanes;
          }
          function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
              case ImmediatePriority:
                return SyncLanePriority;
              case UserBlockingPriority:
                return InputContinuousLanePriority;
              case NormalPriority:
              case LowPriority:
                return DefaultLanePriority;
              case IdlePriority:
                return IdleLanePriority;
              default:
                return NoLanePriority;
            }
          }
          function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
              case SyncLanePriority:
              case SyncBatchedLanePriority:
                return ImmediatePriority;
              case InputDiscreteHydrationLanePriority:
              case InputDiscreteLanePriority:
              case InputContinuousHydrationLanePriority:
              case InputContinuousLanePriority:
                return UserBlockingPriority;
              case DefaultHydrationLanePriority:
              case DefaultLanePriority:
              case TransitionHydrationPriority:
              case TransitionPriority:
              case SelectiveHydrationLanePriority:
              case RetryLanePriority:
                return NormalPriority;
              case IdleHydrationLanePriority:
              case IdleLanePriority:
              case OffscreenLanePriority:
                return IdlePriority;
              case NoLanePriority:
                return NoPriority;
              default: {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return_highestLanePriority = NoLanePriority;
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var nextLanePriority = NoLanePriority;
            var expiredLanes = root2.expiredLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            if (expiredLanes !== NoLanes) {
              nextLanes = expiredLanes;
              nextLanePriority = return_highestLanePriority = SyncLanePriority;
            } else {
              var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
              if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                  if (nonIdlePingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              } else {
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(unblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              getHighestPriorityLanes(wipLanes);
              var wipLanePriority = return_highestLanePriority;
              if (nextLanePriority <= wipLanePriority) {
                return wipLanes;
              } else {
                return_highestLanePriority = nextLanePriority;
              }
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane);
            var priority = return_highestLanePriority;
            if (priority >= InputContinuousLanePriority) {
              return currentTime + 250;
            } else if (priority >= TransitionPriority) {
              return currentTime + 5e3;
            } else {
              return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function returnNextLanesPriority() {
            return return_highestLanePriority;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
              case NoLanePriority:
                break;
              case SyncLanePriority:
                return SyncLane;
              case SyncBatchedLanePriority:
                return SyncBatchedLane;
              case InputDiscreteLanePriority: {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }
                return _lane;
              }
              case InputContinuousLanePriority: {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }
                return _lane2;
              }
              case DefaultLanePriority: {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }
                return _lane3;
              }
              case TransitionPriority:
              case RetryLanePriority:
                break;
              case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) {
                  lane = pickArbitraryLane(IdleLanes);
                }
                return lane;
            }
            {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
          function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes);
              }
            }
            return lane;
          }
          function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(RetryLanes);
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function getLowestPriorityLane(lanes) {
            var index2 = 31 - clz32(lanes);
            return index2 < 0 ? NoLanes : 1 << index2;
          }
          function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set3, subset) {
            return (set3 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set3, subset) {
            return set3 & ~subset;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            var higherPriorityLanes = updateLane - 1;
            root2.suspendedLanes &= higherPriorityLanes;
            root2.pingedLanes &= higherPriorityLanes;
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markDiscreteUpdatesExpired(root2) {
            root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes;
          }
          function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes;
          }
          function markRootMutableRead(root2, updateLane) {
            root2.mutableReadLanes |= updateLane & root2.pendingLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = 0;
            root2.pingedLanes = 0;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] |= entangledLanes;
              lanes &= ~lane;
            }
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(lanes) {
            if (lanes === 0) {
              return 32;
            }
            return 31 - (log(lanes) / LN2 | 0) | 0;
          }
          var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriorityForPluginSystem(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
              case ContinuousEvent:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            }
            discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
          }
          function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            var allowReplay = true;
            {
              allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
            }
            if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              if (allowReplay) {
                clearIfContinuousEvent(domEventName, nativeEvent);
              }
              return;
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                return;
              }
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
            return null;
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            _assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = _assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = _assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = _assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = _assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = _assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = _assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = _assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = _assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = _assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = _assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = _assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = _assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset2) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset2 && nodeEnd >= offset2) {
                  return {
                    node,
                    offset: offset2 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument2 = outerNode.ownerDocument;
            var win = ownerDocument2 && ownerDocument2.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection2(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection2(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            {
              if (rootContainerElement[listeningMarker]) {
                return;
              }
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement, null);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement, null);
              });
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
            var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
            var target = rootContainerElement;
            if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
              target = rootContainerElement.ownerDocument;
            }
            if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
              if (domEventName !== "scroll") {
                return;
              }
              eventSystemFlags |= IS_NON_DELEGATED;
              target = targetElement;
            }
            var listenerSet = getEventListenerSet(target);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              if (isCapturePhaseListener) {
                eventSystemFlags |= IS_CAPTURE_PHASE;
              }
              addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedEventUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common2, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common2) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common2) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common2 = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common2, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common2, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            };
            warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html2) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html2;
              return testElement.innerHTML;
            };
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop2() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop2;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement74(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument2 = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument2.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument2.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument2.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument2.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                nextProp.toString();
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text);
            }
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement74(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type, props);
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type, newProps)) {
              domElement.focus();
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function hideInstance(instance) {
            instance = instance;
            var style3 = instance.style;
            if (typeof style3.setProperty === "function") {
              style3.setProperty("display", "none", "important");
            } else {
              style3.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              var body3 = container.body;
              if (body3 != null) {
                body3.textContent = "";
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type, props, parentNamespace);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          var clientId = 0;
          function makeClientIdInDEV(warnOnAccessInDEV) {
            var id = "r:" + (clientId++).toString(36);
            return {
              toString: function() {
                warnOnAccessInDEV();
                return id;
              },
              valueOf: function() {
                warnOnAccessInDEV();
                return id;
              }
            };
          }
          function isOpaqueHydratingObject(value) {
            return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
          }
          function makeOpaqueHydratingObject(attemptToReadValue) {
            return {
              $$typeof: REACT_OPAQUE_ID_TYPE,
              toString: attemptToReadValue,
              valueOf: attemptToReadValue
            };
          }
          function preparePortalMount(portalInstance) {
            {
              listenToAllSupportedEvents(portalInstance);
            }
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component5, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component5)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return _assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component5 = node.type;
                    if (isContextProvider(Component5)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var rendererID = null;
          var injectedHook = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            return true;
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority$1 = 99;
          var UserBlockingPriority$2 = 98;
          var NormalPriority$1 = 97;
          var LowPriority$1 = 96;
          var IdlePriority$1 = 95;
          var NoPriority$1 = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
          };
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs$1 = Scheduler_now$1();
          var now2 = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
            return Scheduler_now$1() - initialTimeMs$1;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
              case Scheduler_NormalPriority:
                return NormalPriority$1;
              case Scheduler_LowPriority:
                return LowPriority$1;
              case Scheduler_IdlePriority:
                return IdlePriority$1;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
              case NormalPriority$1:
                return Scheduler_NormalPriority;
              case LowPriority$1:
                return Scheduler_LowPriority;
              case IdlePriority$1:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn);
          }
          function scheduleCallback(reactPriorityLevel, callback, options2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options2);
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node);
            }
            flushSyncCallbackQueueImpl();
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              {
                try {
                  var _isSync2 = true;
                  var _queue = syncQueue;
                  runWithPriority$1(ImmediatePriority$1, function() {
                    for (; i < _queue.length; i++) {
                      var callback = _queue[i];
                      do {
                        callback = callback(_isSync2);
                      } while (callback !== null);
                    }
                  });
                  syncQueue = null;
                } catch (error2) {
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i + 1);
                  }
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                  throw error2;
                } finally {
                  isFlushingSyncQueue = false;
                }
              }
            }
          }
          var ReactVersion = "17.0.2";
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var DebugTracingMode = 16;
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = 0;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set3) {
              var array = [];
              set3.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = new Map();
            var didWarnAboutLegacyContext = new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = new Map();
            };
          }
          function resolveDefaultProps(Component5, baseProps) {
            if (Component5 && Component5.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps2 = Component5.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var MAX_SIGNED_31_BIT_INT = 1073741823;
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context;
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context = providerFiber.type._context;
            {
              context._currentValue = currentValue;
            }
          }
          function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          function scheduleWorkOnParentPath(parent, renderLanes2) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              } else {
                break;
              }
              node = node.return;
            }
          }
          function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update3 = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                      update3.tag = ForceUpdate;
                      enqueueUpdate(fiber, update3);
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleWorkOnParentPath(fiber.return, renderLanes2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context)
              ;
            else if (observedBits === false || observedBits === 0)
              ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context._currentValue;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update3 = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update3;
          }
          function enqueueUpdate(fiber, update3) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update3.next = update3;
            } else {
              update3.next = pending.next;
              pending.next = update3;
            }
            sharedQueue.pending = update3;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update3 = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update3.eventTime,
                      lane: update3.lane,
                      tag: update3.tag,
                      payload: update3.payload,
                      callback: update3.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update3 = update3.next;
                  } while (update3 !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update3, prevState, nextProps, instance) {
            switch (update3.tag) {
              case ReplaceState: {
                var payload = update3.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update3.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update3 = firstBaseUpdate;
              do {
                var updateLane = update3.lane;
                var updateEventTime = update3.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update3.tag,
                    payload: update3.payload,
                    callback: update3.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update3.tag,
                      payload: update3.payload,
                      callback: update3.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update3, newState, props, instance);
                  var callback = update3.callback;
                  if (callback !== null) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update3];
                    } else {
                      effects.push(update3);
                    }
                  }
                }
                update3 = update3.next;
                if (update3 === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update3 = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var isArray = Array.isArray;
          var emptyRefsObject = new React108.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = new Set();
            didWarnAboutUninitializedState = new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
            didWarnAboutDirectlyAssigningPropsToState = new Set();
            didWarnAboutUndefinedDerivedState = new Set();
            didWarnAboutContextTypeAndContextTypes = new Set();
            didWarnAboutInvalidateContextType = new Set();
            var didWarnOnInvalidCallback = new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  reenableLogs();
                }
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update3 = createUpdate(eventTime, lane);
              update3.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update3.callback = callback;
              }
              enqueueUpdate(fiber, update3);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update3 = createUpdate(eventTime, lane);
              update3.tag = ReplaceState;
              update3.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update3.callback = callback;
              }
              enqueueUpdate(fiber, update3);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update3 = createUpdate(eventTime, lane);
              update3.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update3.callback = callback;
              }
              enqueueUpdate(fiber, update3);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set2(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  new ctor(props, context);
                } finally {
                  reenableLogs();
                }
              }
            }
            var instance = new ctor(props, context);
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot2;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot2;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot2;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (!(typeof child._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child._store.validated = true;
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.flags = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags = Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              if (current2 !== null) {
                if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment8) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment8: {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    default: {
                      if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element.props);
                        _existing3.ref = coerceRef(returnFiber, child, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject = typeof newChild === "object" && newChild !== null;
              if (isObject) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (isObject) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  case Block:
                  case FunctionComponent:
                  case ForwardRef2:
                  case SimpleMemoComponent: {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (!(c !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Layout = 2;
          var Passive$1 = 4;
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.flags = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          function getIsHydrating() {
            return isHydrating;
          }
          var workInProgressSources = [];
          var rendererSigil$1;
          {
            rendererSigil$1 = {};
          }
          function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource);
          }
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function getWorkInProgressVersion(mutableSource) {
            {
              return mutableSource._workInProgressVersionPrimary;
            }
          }
          function setWorkInProgressVersion(mutableSource, version) {
            {
              mutableSource._workInProgressVersionPrimary = version;
            }
            workInProgressSources.push(mutableSource);
          }
          function warnAboutMultipleRenderersDEV(mutableSource) {
            {
              {
                if (mutableSource._currentPrimaryRenderer == null) {
                  mutableSource._currentPrimaryRenderer = rendererSigil$1;
                } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                  error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
                }
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnAboutUseOpaqueIdentifier;
          {
            didWarnAboutUseOpaqueIdentifier = {};
            didWarnAboutMismatchedHooksForComponent = new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component5, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component5(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component5(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.flags &= ~(Passive | Update);
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update3 = first;
              do {
                var updateLane = update3.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update3.action,
                    eagerReducer: update3.eagerReducer,
                    eagerState: update3.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update3.action,
                      eagerReducer: update3.eagerReducer,
                      eagerState: update3.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update3.eagerReducer === reducer) {
                    newState = update3.eagerState;
                  } else {
                    var action = update3.action;
                    newState = reducer(newState, action);
                  }
                }
                update3 = update3.next;
              } while (update3 !== null && update3 !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update3 = firstRenderPhaseUpdate;
              do {
                var action = update3.action;
                newState = reducer(newState, action);
                update3 = update3.next;
              } while (update3 !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
            {
              warnAboutMultipleRenderersDEV(source);
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var isSafeToReadFromSource = false;
            var currentRenderVersion = getWorkInProgressVersion(source);
            if (currentRenderVersion !== null) {
              isSafeToReadFromSource = currentRenderVersion === version;
            } else {
              isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes);
              if (isSafeToReadFromSource) {
                setWorkInProgressVersion(source, version);
              }
            }
            if (isSafeToReadFromSource) {
              var snapshot = getSnapshot(source._source);
              {
                if (typeof snapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              return snapshot;
            } else {
              markSourceAsDirty(source);
              {
                {
                  throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                }
              }
            }
          }
          function useMutableSource2(hook, source, getSnapshot, subscribe) {
            var root2 = getWorkInProgressRoot();
            if (!(root2 !== null)) {
              {
                throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var dispatcher = ReactCurrentDispatcher$1.current;
            var _dispatcher$useState = dispatcher.useState(function() {
              return readFromUnsubcribedMutableSource(root2, source, getSnapshot);
            }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
            var snapshot = currentSnapshot;
            var stateHook = workInProgressHook;
            var memoizedState = hook.memoizedState;
            var refs = memoizedState.refs;
            var prevGetSnapshot = refs.getSnapshot;
            var prevSource = memoizedState.source;
            var prevSubscribe = memoizedState.subscribe;
            var fiber = currentlyRenderingFiber$1;
            hook.memoizedState = {
              refs,
              source,
              subscribe
            };
            dispatcher.useEffect(function() {
              refs.getSnapshot = getSnapshot;
              refs.setSnapshot = setSnapshot;
              var maybeNewVersion = getVersion(source._source);
              if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                {
                  if (typeof maybeNewSnapshot === "function") {
                    error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                  }
                }
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                  setSnapshot(maybeNewSnapshot);
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                }
                markRootEntangled(root2, root2.mutableReadLanes);
              }
            }, [getSnapshot, source, subscribe]);
            dispatcher.useEffect(function() {
              var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                  latestSetSnapshot(latestGetSnapshot(source._source));
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                } catch (error2) {
                  latestSetSnapshot(function() {
                    throw error2;
                  });
                }
              };
              var unsubscribe = subscribe(source._source, handleChange);
              {
                if (typeof unsubscribe !== "function") {
                  error("Mutable source subscribe function must return an unsubscribe function.");
                }
              }
              return unsubscribe;
            }, [source, subscribe]);
            if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
              var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
              };
              newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
              stateHook.queue = newQueue;
              stateHook.baseQueue = null;
              snapshot = readFromUnsubcribedMutableSource(root2, source, getSnapshot);
              stateHook.memoizedState = stateHook.baseState = snapshot;
            }
            return snapshot;
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = {
              refs: {
                getSnapshot,
                setSnapshot: null
              },
              source,
              subscribe
            };
            return useMutableSource2(hook, source, getSnapshot, subscribe);
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            var hook = updateWorkInProgressHook();
            return useMutableSource2(hook, source, getSnapshot, subscribe);
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create4, destroy2, deps) {
            var effect = {
              tag,
              create: create4,
              destroy: destroy2,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create4, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create4, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create4, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy2 = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy2 = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookFlags, create4, destroy2, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create4, destroy2, nextDeps);
          }
          function mountEffect(create4, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create4, deps);
          }
          function updateEffect(create4, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create4, deps);
          }
          function mountLayoutEffect(create4, deps) {
            return mountEffectImpl(Update, Layout, create4, deps);
          }
          function updateLayoutEffect(create4, deps) {
            return updateEffectImpl(Update, Layout, create4, deps);
          }
          function imperativeHandleEffect(create4, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create4();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create4();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create4, deps) {
            {
              if (typeof create4 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create4 !== null ? typeof create4 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create4, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create4, deps) {
            {
              if (typeof create4 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create4 !== null ? typeof create4 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create4, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function updateDeferredValue(value) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            {
              runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
                setPending(true);
              });
              runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                  setPending(false);
                  callback();
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              });
            }
          }
          function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = startTransition.bind(null, setPending);
            mountRef(start);
            return [start, isPending];
          }
          function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
              var name = getComponentName(fiber.type) || "Unknown";
              if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                didWarnAboutUseOpaqueIdentifier[name] = true;
              }
            }
          }
          function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
            if (getIsHydrating()) {
              var didUpgrade = false;
              var fiber = currentlyRenderingFiber$1;
              var readValue = function() {
                if (!didUpgrade) {
                  didUpgrade = true;
                  {
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                  }
                }
                {
                  {
                    throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                  }
                }
              };
              var id = makeOpaqueHydratingObject(readValue);
              var setId = mountState(id)[1];
              if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                  setId(makeId());
                }, void 0, null);
              }
              return id;
            } else {
              var _id = makeId();
              mountState(_id);
              return _id;
            }
          }
          function updateOpaqueIdentifier() {
            var id = updateState()[0];
            return id;
          }
          function rerenderOpaqueIdentifier() {
            var id = rerenderState()[0];
            return id;
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update3 = {
              lane,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            var pending = queue.pending;
            if (pending === null) {
              update3.next = update3;
            } else {
              update3.next = pending.next;
              pending.next = update3;
            }
            queue.pending = update3;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            } else {
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update3.eagerReducer = lastRenderedReducer;
                    update3.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if (typeof jest !== "undefined") {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component5, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component5.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component5));
                }
              }
            }
            var render2 = Component5.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component5, nextProps, updateLanes, renderLanes2) {
            if (current2 === null) {
              var type = Component5.type;
              if (isSimpleFunctionComponent(type) && Component5.compare === null && Component5.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
                }
              }
              var child = createFiberFromTypeAndProps(Component5.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component5.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
              }
            }
            var currentChild = current2.child;
            if (!includesSomeLane(updateLanes, renderLanes2)) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component5.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component5, nextProps, updateLanes, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes2, updateLanes)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component5, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                {
                  markSpawnedWork(OffscreenLane);
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes
                };
                workInProgress2.memoizedState = _nextState;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          var updateLegacyHiddenComponent = updateOffscreenComponent;
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component5, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component5.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component5));
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component5, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component5, nextProps, context, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component5, nextProps, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component5, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component5.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component5));
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component5)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component5, nextProps);
              mountClassInstance(workInProgress2, Component5, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component5, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component5, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component5, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component5, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component5, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component5.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.render();
                  } finally {
                    reenableLogs();
                  }
                }
                setIsRendering(false);
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component5, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            var updateQueue = workInProgress2.updateQueue;
            if (!(current2 !== null && updateQueue !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var root2 = workInProgress2.stateNode;
            if (root2.hydrate && enterHydrationState(workInProgress2)) {
              {
                var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData;
                if (mutableSourceEagerHydrationData != null) {
                  for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                    var mutableSource = mutableSourceEagerHydrationData[i];
                    var version = mutableSourceEagerHydrationData[i + 1];
                    setWorkInProgressVersion(mutableSource, version);
                  }
                }
              }
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType2, updateLanes, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType2;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component5 = init(payload);
            workInProgress2.type = Component5;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component5);
            var resolvedProps = resolveDefaultProps(Component5, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component5);
                  workInProgress2.type = Component5 = resolveFunctionForHotReloading(Component5);
                }
                child = updateFunctionComponent(null, workInProgress2, Component5, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component5 = resolveClassForHotReloading(Component5);
                }
                child = updateClassComponent(null, workInProgress2, Component5, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef2: {
                {
                  workInProgress2.type = Component5 = resolveForwardRefForHotReloading(Component5);
                }
                child = updateForwardRef(null, workInProgress2, Component5, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component5.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component5));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component5, resolveDefaultProps(Component5.type, resolvedProps), updateLanes, renderLanes2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component5 !== null && typeof Component5 === "object" && Component5.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component5 + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component5, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component5)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component5, nextProps);
            mountClassInstance(workInProgress2, Component5, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component5, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component5, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component5, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            {
              if (Component5.prototype && typeof Component5.prototype.render === "function") {
                var componentName = getComponentName(Component5) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component5, props, context, renderLanes2);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentName(Component5) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentName(Component5) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component5)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component5.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component5, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component5, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component5, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    value = renderWithHooks(null, workInProgress2, Component5, props, context, renderLanes2);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component5);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component5) {
            {
              if (Component5) {
                if (Component5.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component5.displayName || Component5.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component5.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentName(Component5) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component5.contextType === "object" && Component5.contextType !== null) {
                var _componentName4 = getComponentName(Component5) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.lanes = SomeRetryLane;
                {
                  markSpawnedWork(SomeRetryLane);
                }
                return _fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              currentFallbackChildFragment.nextEffect = null;
              currentFallbackChildFragment.flags = Deletion;
              workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              var progressedLastEffect = primaryChildFragment.lastEffect;
              if (progressedLastEffect !== null) {
                workInProgress2.firstEffect = primaryChildFragment.firstEffect;
                workInProgress2.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
              } else {
                workInProgress2.firstEffect = workInProgress2.lastEffect = null;
              }
            } else {
              primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function scheduleWorkOnFiber(fiber, renderLanes2) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes2);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleWorkOnFiber(node, renderLanes2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node, renderLanes2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isArray2 = Array.isArray(childSlot);
              var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
              if (isArray2 || isIterable) {
                var type = isArray2 ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (Array.isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              return null;
            } else {
              cloneChildFibers(current2, workInProgress2);
              return workInProgress2.child;
            }
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = current2;
                returnFiber.lastEffect = current2;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2;
              }
              current2.nextEffect = null;
              current2.flags = Deletion;
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            var updateLanes = workInProgress2.lanes;
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else if (!includesSomeLane(renderLanes2, updateLanes)) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    break;
                  case ClassComponent: {
                    var Component5 = workInProgress2.type;
                    if (isContextProvider(Component5)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                      if (hasChildWork) {
                        workInProgress2.flags |= Update;
                      }
                      var stateNode = workInProgress2.stateNode;
                      stateNode.effectDuration = 0;
                      stateNode.passiveEffectDuration = 0;
                    }
                    break;
                  case SuspenseComponent: {
                    var state = workInProgress2.memoizedState;
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                      }
                      workInProgress2.flags |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                  case OffscreenComponent:
                  case LegacyHiddenComponent: {
                    workInProgress2.lanes = NoLanes;
                    return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else {
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType2 = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType2, updateLanes, renderLanes2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef2: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment8:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
              case LegacyHiddenComponent: {
                return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef2:
              case Fragment8:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component5 = workInProgress2.type;
                if (isContextProvider(Component5)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot2;
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.flags |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now2() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (now2() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now2();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                return null;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block:
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                if (current2 !== null) {
                  var _nextState = workInProgress2.memoizedState;
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function unwindWork(workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component5 = workInProgress2.type;
                if (isContextProvider(Component5)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentName(source.type) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                var errorBoundaryName = getComponentName(boundary.type);
                if (errorBoundaryName) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update3 = createUpdate(NoTimestamp, lane);
            update3.tag = CaptureUpdate;
            update3.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update3.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update3;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update3 = createUpdate(NoTimestamp, lane);
            update3.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update3.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update3.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logCapturedError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              };
            } else {
              update3.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update3;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              wakeable.then(ping, ping);
            }
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.lanes = currentSource.lanes;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var wakeables = _workInProgress.updateQueue;
                  if (wakeables === null) {
                    var updateQueue = new Set();
                    updateQueue.add(wakeable);
                    _workInProgress.updateQueue = updateQueue;
                  } else {
                    wakeables.add(wakeable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.flags |= DidCapture;
                    sourceFiber.flags |= ForceUpdateForLegacySuspense;
                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update3 = createUpdate(NoTimestamp, SyncLane);
                        update3.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update3);
                      }
                    }
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                    return;
                  }
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  _workInProgress.flags |= ShouldCapture;
                  _workInProgress.lanes = rootRenderLanes;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            {
              instance.componentWillUnmount();
            }
          };
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current2, unmountError);
              }
            }
          }
          function safelyDetachRef(current2) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current2, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, destroy2) {
            {
              invokeGuardedCallback(null, destroy2, null);
              if (hasCaughtError()) {
                var error2 = clearCaughtError();
                captureCommitPhaseError(current2, error2);
              }
            }
          }
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.flags & Snapshot2) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                }
                return;
              }
              case HostRoot: {
                {
                  if (finishedWork.flags & Snapshot2) {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                }
                return;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var destroy2 = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy2 !== void 0) {
                    destroy2();
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var create4 = effect.create;
                  effect.destroy = create4();
                  {
                    var destroy2 = effect.destroy;
                    if (destroy2 !== void 0 && typeof destroy2 !== "function") {
                      var addendum = void 0;
                      if (destroy2 === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy2.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy2;
                      }
                      error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function schedulePassiveEffects(finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                  enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
              } while (effect !== firstEffect);
            }
          }
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect2 = effect, destroy2 = _effect2.destroy, tag = _effect2.tag;
                      if (destroy2 !== void 0) {
                        if ((tag & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current2, effect);
                        } else {
                          {
                            safelyCallDestroy(current2, destroy2);
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
            var node = root2;
            while (true) {
              commitUnmount(finishedRoot, node);
              if (node.child !== null && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === root2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function detachFiberMutation(fiber) {
            fiber.alternate = null;
            fiber.child = null;
            fiber.dependencies = null;
            fiber.firstEffect = null;
            fiber.lastEffect = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.return = null;
            fiber.updateQueue = null;
            {
              fiber._debugOwner = null;
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent);
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node.return;
                findParent:
                  while (true) {
                    if (!(parent !== null)) {
                      {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent.return;
                  }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node);
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current2) {
                  return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2);
            }
            var alternate = current2.alternate;
            detachFiberMutation(current2);
            if (alternate !== null) {
              detachFiberMutation(alternate);
            }
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState !== null) {
              markCommitTimeOfFallback();
              {
                var primaryChildParent = finishedWork.child;
                hideOrUnhideAllChildren(primaryChildParent, true);
              }
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  {
                    if (wakeable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry);
                    }
                  }
                  retryCache.add(wakeable);
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
            if (current2 !== null) {
              var oldState = current2.memoizedState;
              if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
              }
            }
            return false;
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor$1 = Symbol.for;
            COMPONENT_TYPE = symbolFor$1("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor$1("selector.role");
            TEST_NAME_TYPE = symbolFor$1("selector.test_id");
            TEXT_TYPE = symbolFor$1("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = 0;
          var BatchedContext = 1;
          var EventContext = 2;
          var DiscreteEventContext = 4;
          var LegacyUnbatchedContext = 8;
          var RenderContext = 16;
          var CommitContext = 32;
          var RetryAfterError = 64;
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var mostRecentlyUpdatedRoot = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now2() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority$1;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveHookEffectsMount = [];
          var pendingPassiveHookEffectsUnmount = [];
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoTimestamp;
          var currentEventWipLanes = NoLanes;
          var currentEventPendingLanes = NoLanes;
          var isFlushingPassiveEffects = false;
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now2();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now2();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (currentEventPendingLanes !== NoLanes) {
                currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
              }
              return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
            }
            var schedulerPriority = getCurrentPriorityLevel();
            var lane;
            if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
              lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
            } else {
              var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
              lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
            }
            return lane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            return findRetryLane(currentEventWipLanes);
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root2 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return null;
            }
            markRootUpdated(root2, lane, eventTime);
            if (root2 === workInProgressRoot) {
              {
                workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            var priorityLevel = getCurrentPriorityLevel();
            if (lane === SyncLane) {
              if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                schedulePendingInteractions(root2, lane);
                performSyncWorkOnRoot(root2);
              } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            } else {
              if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = new Set([root2]);
                } else {
                  rootsWithPendingDiscreteUpdates.add(root2);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, lane);
            }
            mostRecentlyUpdatedRoot = root2;
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            var newCallbackPriority = returnNextLanesPriority();
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root2.callbackNode = null;
                root2.callbackPriority = NoLanePriority;
              }
              return;
            }
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root2.callbackPriority;
              if (existingCallbackPriority === newCallbackPriority) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLanePriority) {
              newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else if (newCallbackPriority === SyncBatchedLanePriority) {
              newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root2));
            } else {
              var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
              newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2) {
            currentEventTime = NoTimestamp;
            currentEventWipLanes = NoLanes;
            currentEventPendingLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var exitStatus = renderRootConcurrent(root2, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              prepareFreshStack(root2, NoLanes);
            } else if (exitStatus !== RootIncomplete) {
              if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError;
                if (root2.hydrate) {
                  root2.hydrate = false;
                  clearContainer(root2.containerInfo);
                }
                lanes = getLanesToRetrySynchronouslyOnError(root2);
                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root2, lanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now2());
                throw fatalError;
              }
              var finishedWork = root2.current.alternate;
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
            ensureRootIsScheduled(root2, now2());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              case RootErrored: {
                commitRoot(root2);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now2() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootCompleted: {
                commitRoot(root2);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            var lanes;
            var exitStatus;
            if (root2 === workInProgressRoot && includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)) {
              lanes = workInProgressRootRenderLanes;
              exitStatus = renderRootSync(root2, lanes);
              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                lanes = getNextLanes(root2, lanes);
                exitStatus = renderRootSync(root2, lanes);
              }
            } else {
              lanes = getNextLanes(root2, NoLanes);
              exitStatus = renderRootSync(root2, lanes);
            }
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root2.hydrate) {
                root2.hydrate = false;
                clearContainer(root2.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root2);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root2, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now2());
              throw fatalError;
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2);
            ensureRootIsScheduled(root2, now2());
            return null;
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(root2) {
                markDiscreteUpdatesExpired(root2);
                ensureRootIsScheduled(root2, now2());
              });
            }
            flushSyncCallbackQueue();
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function batchedEventUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function discreteUpdates$1(fn, a, b, c, d) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            {
              try {
                return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
          }
          function unbatchedUpdates(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function flushSync(fn, a) {
            var prevExecutionContext = executionContext;
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
              return fn(a);
            }
            executionContext |= BatchedContext;
            {
              try {
                if (fn) {
                  return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
                } else {
                  return void 0;
                }
              } finally {
                executionContext = prevExecutionContext;
                flushSyncCallbackQueue();
              }
            }
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            workInProgress = createWorkInProgress(root2.current, null);
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function pushInteractions(root2) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root2.memoizedInteractions;
              return prevInteractions;
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now2();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              return RootIncomplete;
            } else {
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = completedWork.firstEffect;
                  }
                  if (completedWork.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                    }
                    returnFiber.lastEffect = completedWork.lastEffect;
                  }
                  var flags = completedWork.flags;
                  if (flags > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork;
                    } else {
                      returnFiber.firstEffect = completedWork;
                    }
                    returnFiber.lastEffect = completedWork;
                  }
                }
              } else {
                var _next = unwindWork(completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.flags |= Incomplete;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function resetChildLanes(completedWork) {
            if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
              return;
            }
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) {
                  treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
              }
            }
            completedWork.childLanes = newChildLanes;
          }
          function commitRoot(root2) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root2, renderPriorityLevel));
            return null;
          }
          function commitRootImpl(root2, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            if (finishedWork === null) {
              return null;
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (!(finishedWork !== root2.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root2.callbackNode = null;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (rootsWithPendingDiscreteUpdates !== null) {
              if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
                rootsWithPendingDiscreteUpdates.delete(root2);
              }
            }
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            var firstEffect;
            if (finishedWork.flags > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root2);
              ReactCurrentOwner$2.current = null;
              focusedInstanceHandle = prepareForCommit(root2.containerInfo);
              shouldFireAfterActiveInstanceBlur = false;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              focusedInstanceHandle = null;
              {
                recordCommitTime();
              }
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) {
                  detachFiberAfterEffects(nextEffect);
                }
                nextEffect = nextNextEffect;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes !== NoLanes) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i = 0; i < expirationTimes.length; i++) {
                    scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root2, remainingLanes);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root2, lanes);
              }
            }
            if (remainingLanes === SyncLane) {
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now2());
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var current2 = nextEffect.alternate;
              if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                  if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                } else {
                  if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                }
              }
              var flags = nextEffect.flags;
              if ((flags & Snapshot2) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current2, nextEffect);
                resetCurrentFiber();
              }
              if ((flags & Passive) !== NoFlags) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority$1, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitMutationEffects(root2, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (flags & Ref) {
                var current2 = nextEffect.alternate;
                if (current2 !== null) {
                  commitDetachRef(current2);
                }
              }
              var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
              switch (primaryFlags) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.flags &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root2, nextEffect);
                  break;
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitLayoutEffects(root2, committedLanes) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & (Update | Callback)) {
                var current2 = nextEffect.alternate;
                commitLifeCycles(root2, current2, nextEffect);
              }
              {
                if (flags & Ref) {
                  commitAttachRef(nextEffect);
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority$1;
              {
                return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
              }
            }
            return false;
          }
          function enqueuePendingPassiveHookEffectMount(fiber, effect) {
            pendingPassiveHookEffectsMount.push(effect, fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
            pendingPassiveHookEffectsUnmount.push(effect, fiber);
            {
              fiber.flags |= PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags |= PassiveUnmountPendingDev;
              }
            }
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function invokePassiveEffectCreate(effect) {
            var create4 = effect.create;
            effect.destroy = create4();
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            {
              isFlushingPassiveEffects = true;
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            var unmountEffects = pendingPassiveHookEffectsUnmount;
            pendingPassiveHookEffectsUnmount = [];
            for (var i = 0; i < unmountEffects.length; i += 2) {
              var _effect = unmountEffects[i];
              var fiber = unmountEffects[i + 1];
              var destroy2 = _effect.destroy;
              _effect.destroy = void 0;
              {
                fiber.flags &= ~PassiveUnmountPendingDev;
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.flags &= ~PassiveUnmountPendingDev;
                }
              }
              if (typeof destroy2 === "function") {
                {
                  setCurrentFiber(fiber);
                  {
                    invokeGuardedCallback(null, destroy2, null);
                  }
                  if (hasCaughtError()) {
                    if (!(fiber !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(fiber, error2);
                  }
                  resetCurrentFiber();
                }
              }
            }
            var mountEffects = pendingPassiveHookEffectsMount;
            pendingPassiveHookEffectsMount = [];
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
              var _effect2 = mountEffects[_i];
              var _fiber = mountEffects[_i + 1];
              {
                setCurrentFiber(_fiber);
                {
                  invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                }
                if (hasCaughtError()) {
                  if (!(_fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error4 = clearCaughtError();
                  captureCommitPhaseError(_fiber, _error4);
                }
                resetCurrentFiber();
              }
            }
            var effect = root2.current.firstEffect;
            while (effect !== null) {
              var nextNextEffect = effect.nextEffect;
              effect.nextEffect = null;
              if (effect.flags & Deletion) {
                detachFiberAfterEffects(effect);
              }
              effect = nextNextEffect;
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root2, lanes);
            }
            {
              isFlushingPassiveEffects = false;
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber);
            var update3 = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update3);
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, SyncLane);
            }
          }
          function captureCommitPhaseError(sourceFiber, error2) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error2, sourceFiber);
                  var update3 = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update3);
                  var eventTime = requestEventTime();
                  var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                    schedulePendingInteractions(root2, SyncLane);
                  } else {
                    if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                      try {
                        instance.componentDidCatch(error2, errorInfo);
                      } catch (errorToIgnore) {
                      }
                    }
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, pingedLanes);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, retryLane);
            }
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef2 && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag = fiber.tag;
              if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef2 && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
              }
              if (isFlushingPassiveEffects)
                ;
              else {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef2:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
                }
              }
            }
          }
          function computeThreadID(root2, lane) {
            return lane * 1e3 + root2.interactionThreadID;
          }
          function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [lane];
            } else {
              spawnedWorkDuringRender.push(lane);
            }
          }
          function scheduleInteractions(root2, lane, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root2.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(lane);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(lane, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lane);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          function schedulePendingInteractions(root2, lane) {
            scheduleInteractions(root2, lane, tracing.__interactionsRef.current);
          }
          function startWorkOnPendingInteractions(root2, lanes) {
            var interactions = new Set();
            root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
              if (includesSomeLane(lanes, scheduledLane)) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root2.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lanes);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error2) {
                  scheduleCallback(ImmediatePriority$1, function() {
                    throw error2;
                  });
                }
              }
            }
          }
          function finishPendingInteractions(root2, committedLanes) {
            var remainingLanesAfterCommit = root2.pendingLanes;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root2.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root2, committedLanes);
                subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
              }
            } catch (error2) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error2;
              });
            } finally {
              var pendingInteractionMap = root2.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                  pendingInteractionMap.delete(lane);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error2) {
                        scheduleCallback(ImmediatePriority$1, function() {
                          throw error2;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0;
          }
          var actingUpdatesScopeDepth = 0;
          function detachFiberAfterEffects(fiber) {
            fiber.sibling = null;
            fiber.stateNode = null;
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef2: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update3) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update3.staleFamilies, updatedFamilies = update3.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef2:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef2:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              new Map([[nonExtensibleObject, null]]);
              new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component5) {
            var prototype = Component5.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component5) {
            if (typeof Component5 === "function") {
              return shouldConstruct$1(Component5) ? ClassComponent : FunctionComponent;
            } else if (Component5 !== void 0 && Component5 !== null) {
              var $$typeof = Component5.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef2;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugID = current2._debugID;
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef2:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag === BlockingRoot) {
              mode = BlockingMode | StrictMode;
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= DebugTracingMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                    return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                  case REACT_SCOPE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef2;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_BLOCK_TYPE:
                          fiberTag = Block;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    {
                      {
                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                      }
                    }
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment8, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" as a prop');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_OFFSCREEN_TYPE;
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_LEGACY_HIDDEN_TYPE;
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugID = source._debugID;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate2;
            this.callbackNode = null;
            this.callbackPriority = NoLanePriority;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = new Set();
              this.pendingInteractionMap = new Map();
            }
            {
              switch (tag) {
                case BlockingRoot:
                  this._debugRootType = "createBlockingRoot()";
                  break;
                case ConcurrentRoot:
                  this._debugRootType = "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = "createLegacyRoot()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
            var uninitializedFiber = createHostRootFiber(tag);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get2(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component5 = fiber.type;
              if (isContextProvider(Component5)) {
                return processChildContext(fiber, Component5, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get2(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate2);
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            {
              if (typeof jest !== "undefined") {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var lane = requestUpdateLane(current$1);
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
              }
            }
            var update3 = createUpdate(eventTime, lane);
            update3.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update3.callback = callback;
            }
            enqueueUpdate(current$1, update3);
            scheduleUpdateOnFiber(current$1, lane, eventTime);
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function runWithPriority$2(priority, fn) {
            try {
              setCurrentUpdateLanePriority(priority);
              return fn();
            } finally {
            }
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === path.length) {
                if (Array.isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (Array.isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools
            });
          }
          function ReactDOMRoot(container, options2) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
          }
          function ReactDOMBlockingRoot(container, tag, options2) {
            this._internalRoot = createRootImpl(container, tag, options2);
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            var container = root2.containerInfo;
            updateContainer(null, root2, null, function() {
              unmarkContainerAsRoot(container);
            });
          };
          function createRootImpl(container, tag, options2) {
            var hydrate2 = options2 != null && options2.hydrate === true;
            var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
            var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
            var root2 = createContainer(container, tag, hydrate2);
            markContainerAsRoot(root2.current, container);
            var containerNodeType = container.nodeType;
            {
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
            }
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return root2;
          }
          function createLegacyRoot(container, options2) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container);
            return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root2 = container._reactRootContainer;
            var fiberRoot;
            if (!root2) {
              root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                };
              }
              unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                };
              }
              updateContainer(children, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          function findDOMNode12(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setAttemptHydrationAtPriority(runWithPriority$2);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal2(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          function unstable_createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children, container, key);
          }
          var Internals = {
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              flushPassiveEffects,
              IsThisRendererActing
            ]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.findDOMNode = findDOMNode12;
          exports.flushSync = flushSync;
          exports.hydrate = hydrate;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_createPortal = unstable_createPortal;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE;
          var Fragment8 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo2 = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef2;
          exports.Fragment = Fragment8;
          exports.Lazy = Lazy;
          exports.Memo = Memo2;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment4;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = Function.call.bind(Object.prototype.hasOwnProperty);
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values3, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var checkPropTypes = require_checkPropTypes();
      var has = Function.call.bind(Object.prototype.hasOwnProperty);
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement8, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message) {
          this.message = message;
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                  printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement8(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              if (checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
                return null;
              }
            }
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode2(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (!checker) {
                continue;
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (!checker) {
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode2(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode2);
              }
              if (propValue === null || isValidElement8(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode2(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode2(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE;
          var Fragment8 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo2 = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef2;
          exports.Fragment = Fragment8;
          exports.Lazy = Lazy;
          exports.Memo = Memo2;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment4;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE;
          var Fragment8 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo2 = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef2;
          exports.Fragment = Fragment8;
          exports.Lazy = Lazy;
          exports.Memo = Memo2;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment4;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/index.js
  var require_react_is3 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development3();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is3();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty2 = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics3(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics3(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys2 = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i = 0; i < keys2.length; ++i) {
            var key = keys2[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty2(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics3;
    }
  });

  // node_modules/axios/lib/helpers/bind.js
  var require_bind = __commonJS({
    "node_modules/axios/lib/helpers/bind.js"(exports, module) {
      "use strict";
      module.exports = function bind(fn, thisArg) {
        return function wrap() {
          var args = new Array(arguments.length);
          for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i];
          }
          return fn.apply(thisArg, args);
        };
      };
    }
  });

  // node_modules/axios/lib/utils.js
  var require_utils = __commonJS({
    "node_modules/axios/lib/utils.js"(exports, module) {
      "use strict";
      var bind = require_bind();
      var toString = Object.prototype.toString;
      function isArray(val) {
        return toString.call(val) === "[object Array]";
      }
      function isUndefined(val) {
        return typeof val === "undefined";
      }
      function isBuffer(val) {
        return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
      }
      function isArrayBuffer(val) {
        return toString.call(val) === "[object ArrayBuffer]";
      }
      function isFormData(val) {
        return typeof FormData !== "undefined" && val instanceof FormData;
      }
      function isArrayBufferView(val) {
        var result;
        if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
          result = ArrayBuffer.isView(val);
        } else {
          result = val && val.buffer && val.buffer instanceof ArrayBuffer;
        }
        return result;
      }
      function isString(val) {
        return typeof val === "string";
      }
      function isNumber(val) {
        return typeof val === "number";
      }
      function isObject(val) {
        return val !== null && typeof val === "object";
      }
      function isPlainObject2(val) {
        if (toString.call(val) !== "[object Object]") {
          return false;
        }
        var prototype = Object.getPrototypeOf(val);
        return prototype === null || prototype === Object.prototype;
      }
      function isDate(val) {
        return toString.call(val) === "[object Date]";
      }
      function isFile(val) {
        return toString.call(val) === "[object File]";
      }
      function isBlob(val) {
        return toString.call(val) === "[object Blob]";
      }
      function isFunction2(val) {
        return toString.call(val) === "[object Function]";
      }
      function isStream(val) {
        return isObject(val) && isFunction2(val.pipe);
      }
      function isURLSearchParams(val) {
        return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
      }
      function trim(str) {
        return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
      }
      function isStandardBrowserEnv() {
        if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
          return false;
        }
        return typeof window !== "undefined" && typeof document !== "undefined";
      }
      function forEach(obj, fn) {
        if (obj === null || typeof obj === "undefined") {
          return;
        }
        if (typeof obj !== "object") {
          obj = [obj];
        }
        if (isArray(obj)) {
          for (var i = 0, l = obj.length; i < l; i++) {
            fn.call(null, obj[i], i, obj);
          }
        } else {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              fn.call(null, obj[key], key, obj);
            }
          }
        }
      }
      function merge2() {
        var result = {};
        function assignValue(val, key) {
          if (isPlainObject2(result[key]) && isPlainObject2(val)) {
            result[key] = merge2(result[key], val);
          } else if (isPlainObject2(val)) {
            result[key] = merge2({}, val);
          } else if (isArray(val)) {
            result[key] = val.slice();
          } else {
            result[key] = val;
          }
        }
        for (var i = 0, l = arguments.length; i < l; i++) {
          forEach(arguments[i], assignValue);
        }
        return result;
      }
      function extend(a, b, thisArg) {
        forEach(b, function assignValue(val, key) {
          if (thisArg && typeof val === "function") {
            a[key] = bind(val, thisArg);
          } else {
            a[key] = val;
          }
        });
        return a;
      }
      function stripBOM(content) {
        if (content.charCodeAt(0) === 65279) {
          content = content.slice(1);
        }
        return content;
      }
      module.exports = {
        isArray,
        isArrayBuffer,
        isBuffer,
        isFormData,
        isArrayBufferView,
        isString,
        isNumber,
        isObject,
        isPlainObject: isPlainObject2,
        isUndefined,
        isDate,
        isFile,
        isBlob,
        isFunction: isFunction2,
        isStream,
        isURLSearchParams,
        isStandardBrowserEnv,
        forEach,
        merge: merge2,
        extend,
        trim,
        stripBOM
      };
    }
  });

  // node_modules/axios/lib/helpers/buildURL.js
  var require_buildURL = __commonJS({
    "node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      function encode(val) {
        return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
      }
      module.exports = function buildURL(url, params, paramsSerializer) {
        if (!params) {
          return url;
        }
        var serializedParams;
        if (paramsSerializer) {
          serializedParams = paramsSerializer(params);
        } else if (utils.isURLSearchParams(params)) {
          serializedParams = params.toString();
        } else {
          var parts = [];
          utils.forEach(params, function serialize(val, key) {
            if (val === null || typeof val === "undefined") {
              return;
            }
            if (utils.isArray(val)) {
              key = key + "[]";
            } else {
              val = [val];
            }
            utils.forEach(val, function parseValue(v) {
              if (utils.isDate(v)) {
                v = v.toISOString();
              } else if (utils.isObject(v)) {
                v = JSON.stringify(v);
              }
              parts.push(encode(key) + "=" + encode(v));
            });
          });
          serializedParams = parts.join("&");
        }
        if (serializedParams) {
          var hashmarkIndex = url.indexOf("#");
          if (hashmarkIndex !== -1) {
            url = url.slice(0, hashmarkIndex);
          }
          url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
        }
        return url;
      };
    }
  });

  // node_modules/axios/lib/core/InterceptorManager.js
  var require_InterceptorManager = __commonJS({
    "node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      function InterceptorManager() {
        this.handlers = [];
      }
      InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      };
      InterceptorManager.prototype.eject = function eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      };
      InterceptorManager.prototype.forEach = function forEach(fn) {
        utils.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      };
      module.exports = InterceptorManager;
    }
  });

  // node_modules/axios/lib/helpers/normalizeHeaderName.js
  var require_normalizeHeaderName = __commonJS({
    "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      module.exports = function normalizeHeaderName(headers, normalizedName) {
        utils.forEach(headers, function processHeader(value, name) {
          if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name];
          }
        });
      };
    }
  });

  // node_modules/axios/lib/core/enhanceError.js
  var require_enhanceError = __commonJS({
    "node_modules/axios/lib/core/enhanceError.js"(exports, module) {
      "use strict";
      module.exports = function enhanceError(error, config, code, request, response) {
        error.config = config;
        if (code) {
          error.code = code;
        }
        error.request = request;
        error.response = response;
        error.isAxiosError = true;
        error.toJSON = function toJSON() {
          return {
            message: this.message,
            name: this.name,
            description: this.description,
            number: this.number,
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            config: this.config,
            code: this.code
          };
        };
        return error;
      };
    }
  });

  // node_modules/axios/lib/core/createError.js
  var require_createError = __commonJS({
    "node_modules/axios/lib/core/createError.js"(exports, module) {
      "use strict";
      var enhanceError = require_enhanceError();
      module.exports = function createError(message, config, code, request, response) {
        var error = new Error(message);
        return enhanceError(error, config, code, request, response);
      };
    }
  });

  // node_modules/axios/lib/core/settle.js
  var require_settle = __commonJS({
    "node_modules/axios/lib/core/settle.js"(exports, module) {
      "use strict";
      var createError = require_createError();
      module.exports = function settle(resolve, reject, response) {
        var validateStatus = response.config.validateStatus;
        if (!response.status || !validateStatus || validateStatus(response.status)) {
          resolve(response);
        } else {
          reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
        }
      };
    }
  });

  // node_modules/axios/lib/helpers/cookies.js
  var require_cookies = __commonJS({
    "node_modules/axios/lib/helpers/cookies.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }() : function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }();
    }
  });

  // node_modules/axios/lib/helpers/isAbsoluteURL.js
  var require_isAbsoluteURL = __commonJS({
    "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
      "use strict";
      module.exports = function isAbsoluteURL(url) {
        return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
      };
    }
  });

  // node_modules/axios/lib/helpers/combineURLs.js
  var require_combineURLs = __commonJS({
    "node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
      "use strict";
      module.exports = function combineURLs(baseURL, relativeURL) {
        return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
      };
    }
  });

  // node_modules/axios/lib/core/buildFullPath.js
  var require_buildFullPath = __commonJS({
    "node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
      "use strict";
      var isAbsoluteURL = require_isAbsoluteURL();
      var combineURLs = require_combineURLs();
      module.exports = function buildFullPath(baseURL, requestedURL) {
        if (baseURL && !isAbsoluteURL(requestedURL)) {
          return combineURLs(baseURL, requestedURL);
        }
        return requestedURL;
      };
    }
  });

  // node_modules/axios/lib/helpers/parseHeaders.js
  var require_parseHeaders = __commonJS({
    "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var ignoreDuplicateOf = [
        "age",
        "authorization",
        "content-length",
        "content-type",
        "etag",
        "expires",
        "from",
        "host",
        "if-modified-since",
        "if-unmodified-since",
        "last-modified",
        "location",
        "max-forwards",
        "proxy-authorization",
        "referer",
        "retry-after",
        "user-agent"
      ];
      module.exports = function parseHeaders(headers) {
        var parsed = {};
        var key;
        var val;
        var i;
        if (!headers) {
          return parsed;
        }
        utils.forEach(headers.split("\n"), function parser(line) {
          i = line.indexOf(":");
          key = utils.trim(line.substr(0, i)).toLowerCase();
          val = utils.trim(line.substr(i + 1));
          if (key) {
            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
              return;
            }
            if (key === "set-cookie") {
              parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
            } else {
              parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
            }
          }
        });
        return parsed;
      };
    }
  });

  // node_modules/axios/lib/helpers/isURLSameOrigin.js
  var require_isURLSameOrigin = __commonJS({
    "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }() : function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }();
    }
  });

  // node_modules/axios/lib/adapters/xhr.js
  var require_xhr = __commonJS({
    "node_modules/axios/lib/adapters/xhr.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var settle = require_settle();
      var cookies = require_cookies();
      var buildURL = require_buildURL();
      var buildFullPath = require_buildFullPath();
      var parseHeaders = require_parseHeaders();
      var isURLSameOrigin = require_isURLSameOrigin();
      var createError = require_createError();
      module.exports = function xhrAdapter(config) {
        return new Promise(function dispatchXhrRequest(resolve, reject) {
          var requestData = config.data;
          var requestHeaders = config.headers;
          var responseType = config.responseType;
          if (utils.isFormData(requestData)) {
            delete requestHeaders["Content-Type"];
          }
          var request = new XMLHttpRequest();
          if (config.auth) {
            var username = config.auth.username || "";
            var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
            requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
          }
          var fullPath = buildFullPath(config.baseURL, config.url);
          request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
          request.timeout = config.timeout;
          function onloadend() {
            if (!request) {
              return;
            }
            var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
            var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
            var response = {
              data: responseData,
              status: request.status,
              statusText: request.statusText,
              headers: responseHeaders,
              config,
              request
            };
            settle(resolve, reject, response);
            request = null;
          }
          if ("onloadend" in request) {
            request.onloadend = onloadend;
          } else {
            request.onreadystatechange = function handleLoad() {
              if (!request || request.readyState !== 4) {
                return;
              }
              if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
                return;
              }
              setTimeout(onloadend);
            };
          }
          request.onabort = function handleAbort() {
            if (!request) {
              return;
            }
            reject(createError("Request aborted", config, "ECONNABORTED", request));
            request = null;
          };
          request.onerror = function handleError() {
            reject(createError("Network Error", config, null, request));
            request = null;
          };
          request.ontimeout = function handleTimeout() {
            var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
            if (config.timeoutErrorMessage) {
              timeoutErrorMessage = config.timeoutErrorMessage;
            }
            reject(createError(timeoutErrorMessage, config, config.transitional && config.transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", request));
            request = null;
          };
          if (utils.isStandardBrowserEnv()) {
            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
            if (xsrfValue) {
              requestHeaders[config.xsrfHeaderName] = xsrfValue;
            }
          }
          if ("setRequestHeader" in request) {
            utils.forEach(requestHeaders, function setRequestHeader(val, key) {
              if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
                delete requestHeaders[key];
              } else {
                request.setRequestHeader(key, val);
              }
            });
          }
          if (!utils.isUndefined(config.withCredentials)) {
            request.withCredentials = !!config.withCredentials;
          }
          if (responseType && responseType !== "json") {
            request.responseType = config.responseType;
          }
          if (typeof config.onDownloadProgress === "function") {
            request.addEventListener("progress", config.onDownloadProgress);
          }
          if (typeof config.onUploadProgress === "function" && request.upload) {
            request.upload.addEventListener("progress", config.onUploadProgress);
          }
          if (config.cancelToken) {
            config.cancelToken.promise.then(function onCanceled(cancel) {
              if (!request) {
                return;
              }
              request.abort();
              reject(cancel);
              request = null;
            });
          }
          if (!requestData) {
            requestData = null;
          }
          request.send(requestData);
        });
      };
    }
  });

  // node_modules/axios/lib/defaults.js
  var require_defaults = __commonJS({
    "node_modules/axios/lib/defaults.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var normalizeHeaderName = require_normalizeHeaderName();
      var enhanceError = require_enhanceError();
      var DEFAULT_CONTENT_TYPE = {
        "Content-Type": "application/x-www-form-urlencoded"
      };
      function setContentTypeIfUnset(headers, value) {
        if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
          headers["Content-Type"] = value;
        }
      }
      function getDefaultAdapter() {
        var adapter;
        if (typeof XMLHttpRequest !== "undefined") {
          adapter = require_xhr();
        } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
          adapter = require_xhr();
        }
        return adapter;
      }
      var defaults = {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: getDefaultAdapter(),
        transformRequest: [function transformRequest(data, headers) {
          normalizeHeaderName(headers, "Accept");
          normalizeHeaderName(headers, "Content-Type");
          if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
            return data;
          }
          if (utils.isArrayBufferView(data)) {
            return data.buffer;
          }
          if (utils.isURLSearchParams(data)) {
            setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
            return data.toString();
          }
          if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
            setContentTypeIfUnset(headers, "application/json");
            return JSON.stringify(data);
          }
          return data;
        }],
        transformResponse: [function transformResponse(data) {
          var transitional = this.transitional;
          var silentJSONParsing = transitional && transitional.silentJSONParsing;
          var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
          var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
          if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
            try {
              return JSON.parse(data);
            } catch (e) {
              if (strictJSONParsing) {
                if (e.name === "SyntaxError") {
                  throw enhanceError(e, this, "E_JSON_PARSE");
                }
                throw e;
              }
            }
          }
          return data;
        }],
        timeout: 0,
        xsrfCookieName: "XSRF-TOKEN",
        xsrfHeaderName: "X-XSRF-TOKEN",
        maxContentLength: -1,
        maxBodyLength: -1,
        validateStatus: function validateStatus(status) {
          return status >= 200 && status < 300;
        }
      };
      defaults.headers = {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      };
      utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
        defaults.headers[method] = {};
      });
      utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
        defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
      });
      module.exports = defaults;
    }
  });

  // node_modules/axios/lib/core/transformData.js
  var require_transformData = __commonJS({
    "node_modules/axios/lib/core/transformData.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var defaults = require_defaults();
      module.exports = function transformData(data, headers, fns) {
        var context = this || defaults;
        utils.forEach(fns, function transform4(fn) {
          data = fn.call(context, data, headers);
        });
        return data;
      };
    }
  });

  // node_modules/axios/lib/cancel/isCancel.js
  var require_isCancel = __commonJS({
    "node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
      "use strict";
      module.exports = function isCancel(value) {
        return !!(value && value.__CANCEL__);
      };
    }
  });

  // node_modules/axios/lib/core/dispatchRequest.js
  var require_dispatchRequest = __commonJS({
    "node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var transformData = require_transformData();
      var isCancel = require_isCancel();
      var defaults = require_defaults();
      function throwIfCancellationRequested(config) {
        if (config.cancelToken) {
          config.cancelToken.throwIfRequested();
        }
      }
      module.exports = function dispatchRequest(config) {
        throwIfCancellationRequested(config);
        config.headers = config.headers || {};
        config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
        config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
        utils.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
          delete config.headers[method];
        });
        var adapter = config.adapter || defaults.adapter;
        return adapter(config).then(function onAdapterResolution(response) {
          throwIfCancellationRequested(config);
          response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
          return response;
        }, function onAdapterRejection(reason) {
          if (!isCancel(reason)) {
            throwIfCancellationRequested(config);
            if (reason && reason.response) {
              reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
            }
          }
          return Promise.reject(reason);
        });
      };
    }
  });

  // node_modules/axios/lib/core/mergeConfig.js
  var require_mergeConfig = __commonJS({
    "node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      module.exports = function mergeConfig(config1, config2) {
        config2 = config2 || {};
        var config = {};
        var valueFromConfig2Keys = ["url", "method", "data"];
        var mergeDeepPropertiesKeys = ["headers", "auth", "proxy", "params"];
        var defaultToConfig2Keys = [
          "baseURL",
          "transformRequest",
          "transformResponse",
          "paramsSerializer",
          "timeout",
          "timeoutMessage",
          "withCredentials",
          "adapter",
          "responseType",
          "xsrfCookieName",
          "xsrfHeaderName",
          "onUploadProgress",
          "onDownloadProgress",
          "decompress",
          "maxContentLength",
          "maxBodyLength",
          "maxRedirects",
          "transport",
          "httpAgent",
          "httpsAgent",
          "cancelToken",
          "socketPath",
          "responseEncoding"
        ];
        var directMergeKeys = ["validateStatus"];
        function getMergedValue(target, source) {
          if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
            return utils.merge(target, source);
          } else if (utils.isPlainObject(source)) {
            return utils.merge({}, source);
          } else if (utils.isArray(source)) {
            return source.slice();
          }
          return source;
        }
        function mergeDeepProperties(prop) {
          if (!utils.isUndefined(config2[prop])) {
            config[prop] = getMergedValue(config1[prop], config2[prop]);
          } else if (!utils.isUndefined(config1[prop])) {
            config[prop] = getMergedValue(void 0, config1[prop]);
          }
        }
        utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
          if (!utils.isUndefined(config2[prop])) {
            config[prop] = getMergedValue(void 0, config2[prop]);
          }
        });
        utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
        utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
          if (!utils.isUndefined(config2[prop])) {
            config[prop] = getMergedValue(void 0, config2[prop]);
          } else if (!utils.isUndefined(config1[prop])) {
            config[prop] = getMergedValue(void 0, config1[prop]);
          }
        });
        utils.forEach(directMergeKeys, function merge2(prop) {
          if (prop in config2) {
            config[prop] = getMergedValue(config1[prop], config2[prop]);
          } else if (prop in config1) {
            config[prop] = getMergedValue(void 0, config1[prop]);
          }
        });
        var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
        var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
          return axiosKeys.indexOf(key) === -1;
        });
        utils.forEach(otherKeys, mergeDeepProperties);
        return config;
      };
    }
  });

  // node_modules/axios/package.json
  var require_package = __commonJS({
    "node_modules/axios/package.json"(exports, module) {
      module.exports = {
        name: "axios",
        version: "0.21.2",
        description: "Promise based HTTP client for the browser and node.js",
        main: "index.js",
        scripts: {
          test: "grunt test",
          start: "node ./sandbox/server.js",
          build: "NODE_ENV=production grunt build",
          preversion: "npm test",
          version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",
          postversion: "git push && git push --tags",
          examples: "node ./examples/server.js",
          coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
          fix: "eslint --fix lib/**/*.js"
        },
        repository: {
          type: "git",
          url: "https://github.com/axios/axios.git"
        },
        keywords: [
          "xhr",
          "http",
          "ajax",
          "promise",
          "node"
        ],
        author: "Matt Zabriskie",
        license: "MIT",
        bugs: {
          url: "https://github.com/axios/axios/issues"
        },
        homepage: "https://axios-http.com",
        devDependencies: {
          coveralls: "^3.0.0",
          "es6-promise": "^4.2.4",
          grunt: "^1.3.0",
          "grunt-banner": "^0.6.0",
          "grunt-cli": "^1.2.0",
          "grunt-contrib-clean": "^1.1.0",
          "grunt-contrib-watch": "^1.0.0",
          "grunt-eslint": "^23.0.0",
          "grunt-karma": "^4.0.0",
          "grunt-mocha-test": "^0.13.3",
          "grunt-ts": "^6.0.0-beta.19",
          "grunt-webpack": "^4.0.2",
          "istanbul-instrumenter-loader": "^1.0.0",
          "jasmine-core": "^2.4.1",
          karma: "^6.3.2",
          "karma-chrome-launcher": "^3.1.0",
          "karma-firefox-launcher": "^2.1.0",
          "karma-jasmine": "^1.1.1",
          "karma-jasmine-ajax": "^0.1.13",
          "karma-safari-launcher": "^1.0.0",
          "karma-sauce-launcher": "^4.3.6",
          "karma-sinon": "^1.0.5",
          "karma-sourcemap-loader": "^0.3.8",
          "karma-webpack": "^4.0.2",
          "load-grunt-tasks": "^3.5.2",
          minimist: "^1.2.0",
          mocha: "^8.2.1",
          sinon: "^4.5.0",
          "terser-webpack-plugin": "^4.2.3",
          typescript: "^4.0.5",
          "url-search-params": "^0.10.0",
          webpack: "^4.44.2",
          "webpack-dev-server": "^3.11.0"
        },
        browser: {
          "./lib/adapters/http.js": "./lib/adapters/xhr.js"
        },
        jsdelivr: "dist/axios.min.js",
        unpkg: "dist/axios.min.js",
        typings: "./index.d.ts",
        dependencies: {
          "follow-redirects": "^1.14.0"
        },
        bundlesize: [
          {
            path: "./dist/axios.min.js",
            threshold: "5kB"
          }
        ]
      };
    }
  });

  // node_modules/axios/lib/helpers/validator.js
  var require_validator = __commonJS({
    "node_modules/axios/lib/helpers/validator.js"(exports, module) {
      "use strict";
      var pkg = require_package();
      var validators = {};
      ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
        validators[type] = function validator(thing) {
          return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
        };
      });
      var deprecatedWarnings = {};
      var currentVerArr = pkg.version.split(".");
      function isOlderVersion(version, thanVersion) {
        var pkgVersionArr = thanVersion ? thanVersion.split(".") : currentVerArr;
        var destVer = version.split(".");
        for (var i = 0; i < 3; i++) {
          if (pkgVersionArr[i] > destVer[i]) {
            return true;
          } else if (pkgVersionArr[i] < destVer[i]) {
            return false;
          }
        }
        return false;
      }
      validators.transitional = function transitional(validator, version, message) {
        var isDeprecated = version && isOlderVersion(version);
        function formatMessage(opt, desc) {
          return "[Axios v" + pkg.version + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
        }
        return function(value, opt, opts) {
          if (validator === false) {
            throw new Error(formatMessage(opt, " has been removed in " + version));
          }
          if (isDeprecated && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
          }
          return validator ? validator(value, opt, opts) : true;
        };
      };
      function assertOptions(options, schema, allowUnknown) {
        if (typeof options !== "object") {
          throw new TypeError("options must be an object");
        }
        var keys2 = Object.keys(options);
        var i = keys2.length;
        while (i-- > 0) {
          var opt = keys2[i];
          var validator = schema[opt];
          if (validator) {
            var value = options[opt];
            var result = value === void 0 || validator(value, opt, options);
            if (result !== true) {
              throw new TypeError("option " + opt + " must be " + result);
            }
            continue;
          }
          if (allowUnknown !== true) {
            throw Error("Unknown option " + opt);
          }
        }
      }
      module.exports = {
        isOlderVersion,
        assertOptions,
        validators
      };
    }
  });

  // node_modules/axios/lib/core/Axios.js
  var require_Axios = __commonJS({
    "node_modules/axios/lib/core/Axios.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var buildURL = require_buildURL();
      var InterceptorManager = require_InterceptorManager();
      var dispatchRequest = require_dispatchRequest();
      var mergeConfig = require_mergeConfig();
      var validator = require_validator();
      var validators = validator.validators;
      function Axios(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager(),
          response: new InterceptorManager()
        };
      }
      Axios.prototype.request = function request(config) {
        if (typeof config === "string") {
          config = arguments[1] || {};
          config.url = arguments[0];
        } else {
          config = config || {};
        }
        config = mergeConfig(this.defaults, config);
        if (config.method) {
          config.method = config.method.toLowerCase();
        } else if (this.defaults.method) {
          config.method = this.defaults.method.toLowerCase();
        } else {
          config.method = "get";
        }
        var transitional = config.transitional;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
            forcedJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
            clarifyTimeoutError: validators.transitional(validators.boolean, "1.0.0")
          }, false);
        }
        var requestInterceptorChain = [];
        var synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        var responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        var promise;
        if (!synchronousRequestInterceptors) {
          var chain = [dispatchRequest, void 0];
          Array.prototype.unshift.apply(chain, requestInterceptorChain);
          chain.concat(responseInterceptorChain);
          promise = Promise.resolve(config);
          while (chain.length) {
            promise = promise.then(chain.shift(), chain.shift());
          }
          return promise;
        }
        var newConfig = config;
        while (requestInterceptorChain.length) {
          var onFulfilled = requestInterceptorChain.shift();
          var onRejected = requestInterceptorChain.shift();
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected(error);
            break;
          }
        }
        try {
          promise = dispatchRequest(newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        while (responseInterceptorChain.length) {
          promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
        }
        return promise;
      };
      Axios.prototype.getUri = function getUri(config) {
        config = mergeConfig(this.defaults, config);
        return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
      };
      utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
        Axios.prototype[method] = function(url, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            url,
            data: (config || {}).data
          }));
        };
      });
      utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
        Axios.prototype[method] = function(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            url,
            data
          }));
        };
      });
      module.exports = Axios;
    }
  });

  // node_modules/axios/lib/cancel/Cancel.js
  var require_Cancel = __commonJS({
    "node_modules/axios/lib/cancel/Cancel.js"(exports, module) {
      "use strict";
      function Cancel(message) {
        this.message = message;
      }
      Cancel.prototype.toString = function toString() {
        return "Cancel" + (this.message ? ": " + this.message : "");
      };
      Cancel.prototype.__CANCEL__ = true;
      module.exports = Cancel;
    }
  });

  // node_modules/axios/lib/cancel/CancelToken.js
  var require_CancelToken = __commonJS({
    "node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
      "use strict";
      var Cancel = require_Cancel();
      function CancelToken(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        var resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        var token = this;
        executor(function cancel(message) {
          if (token.reason) {
            return;
          }
          token.reason = new Cancel(message);
          resolvePromise(token.reason);
        });
      }
      CancelToken.prototype.throwIfRequested = function throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      };
      CancelToken.source = function source() {
        var cancel;
        var token = new CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      };
      module.exports = CancelToken;
    }
  });

  // node_modules/axios/lib/helpers/spread.js
  var require_spread = __commonJS({
    "node_modules/axios/lib/helpers/spread.js"(exports, module) {
      "use strict";
      module.exports = function spread(callback) {
        return function wrap(arr) {
          return callback.apply(null, arr);
        };
      };
    }
  });

  // node_modules/axios/lib/helpers/isAxiosError.js
  var require_isAxiosError = __commonJS({
    "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
      "use strict";
      module.exports = function isAxiosError(payload) {
        return typeof payload === "object" && payload.isAxiosError === true;
      };
    }
  });

  // node_modules/axios/lib/axios.js
  var require_axios = __commonJS({
    "node_modules/axios/lib/axios.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var bind = require_bind();
      var Axios = require_Axios();
      var mergeConfig = require_mergeConfig();
      var defaults = require_defaults();
      function createInstance(defaultConfig) {
        var context = new Axios(defaultConfig);
        var instance = bind(Axios.prototype.request, context);
        utils.extend(instance, Axios.prototype, context);
        utils.extend(instance, context);
        return instance;
      }
      var axios2 = createInstance(defaults);
      axios2.Axios = Axios;
      axios2.create = function create4(instanceConfig) {
        return createInstance(mergeConfig(axios2.defaults, instanceConfig));
      };
      axios2.Cancel = require_Cancel();
      axios2.CancelToken = require_CancelToken();
      axios2.isCancel = require_isCancel();
      axios2.all = function all(promises) {
        return Promise.all(promises);
      };
      axios2.spread = require_spread();
      axios2.isAxiosError = require_isAxiosError();
      module.exports = axios2;
      module.exports.default = axios2;
    }
  });

  // node_modules/axios/index.js
  var require_axios2 = __commonJS({
    "node_modules/axios/index.js"(exports, module) {
      module.exports = require_axios();
    }
  });

  // node_modules/store2/dist/store2.js
  var require_store2 = __commonJS({
    "node_modules/store2/dist/store2.js"(exports, module) {
      (function(window2, define) {
        var _ = {
          version: "2.12.0",
          areas: {},
          apis: {},
          inherit: function(api, o) {
            for (var p in api) {
              if (!o.hasOwnProperty(p)) {
                Object.defineProperty(o, p, Object.getOwnPropertyDescriptor(api, p));
              }
            }
            return o;
          },
          stringify: function(d) {
            return d === void 0 || typeof d === "function" ? d + "" : JSON.stringify(d);
          },
          parse: function(s, fn) {
            try {
              return JSON.parse(s, fn || _.revive);
            } catch (e) {
              return s;
            }
          },
          fn: function(name, fn) {
            _.storeAPI[name] = fn;
            for (var api in _.apis) {
              _.apis[api][name] = fn;
            }
          },
          get: function(area, key) {
            return area.getItem(key);
          },
          set: function(area, key, string) {
            area.setItem(key, string);
          },
          remove: function(area, key) {
            area.removeItem(key);
          },
          key: function(area, i) {
            return area.key(i);
          },
          length: function(area) {
            return area.length;
          },
          clear: function(area) {
            area.clear();
          },
          Store: function(id, area, namespace) {
            var store3 = _.inherit(_.storeAPI, function(key, data, overwrite) {
              if (arguments.length === 0) {
                return store3.getAll();
              }
              if (typeof data === "function") {
                return store3.transact(key, data, overwrite);
              }
              if (data !== void 0) {
                return store3.set(key, data, overwrite);
              }
              if (typeof key === "string" || typeof key === "number") {
                return store3.get(key);
              }
              if (typeof key === "function") {
                return store3.each(key);
              }
              if (!key) {
                return store3.clear();
              }
              return store3.setAll(key, data);
            });
            store3._id = id;
            try {
              var testKey = "__store2_test";
              area.setItem(testKey, "ok");
              store3._area = area;
              area.removeItem(testKey);
            } catch (e) {
              store3._area = _.storage("fake");
            }
            store3._ns = namespace || "";
            if (!_.areas[id]) {
              _.areas[id] = store3._area;
            }
            if (!_.apis[store3._ns + store3._id]) {
              _.apis[store3._ns + store3._id] = store3;
            }
            return store3;
          },
          storeAPI: {
            area: function(id, area) {
              var store3 = this[id];
              if (!store3 || !store3.area) {
                store3 = _.Store(id, area, this._ns);
                if (!this[id]) {
                  this[id] = store3;
                }
              }
              return store3;
            },
            namespace: function(namespace, singleArea) {
              if (!namespace) {
                return this._ns ? this._ns.substring(0, this._ns.length - 1) : "";
              }
              var ns2 = namespace, store3 = this[ns2];
              if (!store3 || !store3.namespace) {
                store3 = _.Store(this._id, this._area, this._ns + ns2 + ".");
                if (!this[ns2]) {
                  this[ns2] = store3;
                }
                if (!singleArea) {
                  for (var name in _.areas) {
                    store3.area(name, _.areas[name]);
                  }
                }
              }
              return store3;
            },
            isFake: function() {
              return this._area.name === "fake";
            },
            toString: function() {
              return "store" + (this._ns ? "." + this.namespace() : "") + "[" + this._id + "]";
            },
            has: function(key) {
              if (this._area.has) {
                return this._area.has(this._in(key));
              }
              return !!(this._in(key) in this._area);
            },
            size: function() {
              return this.keys().length;
            },
            each: function(fn, fill) {
              for (var i = 0, m = _.length(this._area); i < m; i++) {
                var key = this._out(_.key(this._area, i));
                if (key !== void 0) {
                  if (fn.call(this, key, this.get(key), fill) === false) {
                    break;
                  }
                }
                if (m > _.length(this._area)) {
                  m--;
                  i--;
                }
              }
              return fill || this;
            },
            keys: function(fillList) {
              return this.each(function(k, v, list) {
                list.push(k);
              }, fillList || []);
            },
            get: function(key, alt) {
              var s = _.get(this._area, this._in(key)), fn;
              if (typeof alt === "function") {
                fn = alt;
                alt = null;
              }
              return s !== null ? _.parse(s, fn) : alt != null ? alt : s;
            },
            getAll: function(fillObj) {
              return this.each(function(k, v, all) {
                all[k] = v;
              }, fillObj || {});
            },
            transact: function(key, fn, alt) {
              var val = this.get(key, alt), ret = fn(val);
              this.set(key, ret === void 0 ? val : ret);
              return this;
            },
            set: function(key, data, overwrite) {
              var d = this.get(key);
              if (d != null && overwrite === false) {
                return data;
              }
              return _.set(this._area, this._in(key), _.stringify(data), overwrite) || d;
            },
            setAll: function(data, overwrite) {
              var changed, val;
              for (var key in data) {
                val = data[key];
                if (this.set(key, val, overwrite) !== val) {
                  changed = true;
                }
              }
              return changed;
            },
            add: function(key, data) {
              var d = this.get(key);
              if (d instanceof Array) {
                data = d.concat(data);
              } else if (d !== null) {
                var type = typeof d;
                if (type === typeof data && type === "object") {
                  for (var k in data) {
                    d[k] = data[k];
                  }
                  data = d;
                } else {
                  data = d + data;
                }
              }
              _.set(this._area, this._in(key), _.stringify(data));
              return data;
            },
            remove: function(key, alt) {
              var d = this.get(key, alt);
              _.remove(this._area, this._in(key));
              return d;
            },
            clear: function() {
              if (!this._ns) {
                _.clear(this._area);
              } else {
                this.each(function(k) {
                  _.remove(this._area, this._in(k));
                }, 1);
              }
              return this;
            },
            clearAll: function() {
              var area = this._area;
              for (var id in _.areas) {
                if (_.areas.hasOwnProperty(id)) {
                  this._area = _.areas[id];
                  this.clear();
                }
              }
              this._area = area;
              return this;
            },
            _in: function(k) {
              if (typeof k !== "string") {
                k = _.stringify(k);
              }
              return this._ns ? this._ns + k : k;
            },
            _out: function(k) {
              return this._ns ? k && k.indexOf(this._ns) === 0 ? k.substring(this._ns.length) : void 0 : k;
            }
          },
          storage: function(name) {
            return _.inherit(_.storageAPI, { items: {}, name });
          },
          storageAPI: {
            length: 0,
            has: function(k) {
              return this.items.hasOwnProperty(k);
            },
            key: function(i) {
              var c = 0;
              for (var k in this.items) {
                if (this.has(k) && i === c++) {
                  return k;
                }
              }
            },
            setItem: function(k, v) {
              if (!this.has(k)) {
                this.length++;
              }
              this.items[k] = v;
            },
            removeItem: function(k) {
              if (this.has(k)) {
                delete this.items[k];
                this.length--;
              }
            },
            getItem: function(k) {
              return this.has(k) ? this.items[k] : null;
            },
            clear: function() {
              for (var k in this.items) {
                this.removeItem(k);
              }
            }
          }
        };
        var store2 = _.Store("local", function() {
          try {
            return localStorage;
          } catch (e) {
          }
        }());
        store2.local = store2;
        store2._ = _;
        store2.area("session", function() {
          try {
            return sessionStorage;
          } catch (e) {
          }
        }());
        store2.area("page", _.storage("page"));
        if (typeof define === "function" && define.amd !== void 0) {
          define("store2", [], function() {
            return store2;
          });
        } else if (typeof module !== "undefined" && module.exports) {
          module.exports = store2;
        } else {
          if (window2.store) {
            _.conflict = window2.store;
          }
          window2.store = store2;
        }
      })(exports, exports && exports.define);
    }
  });

  // client/OrgUnitManagementPage.jsx
  var import_react25 = __toModule(require_react());
  var import_react_dom3 = __toModule(require_react_dom());

  // node_modules/recoil/es/recoil.js
  var import_react = __toModule(require_react());
  var import_react_dom = __toModule(require_react_dom());
  function isPromise(p) {
    return !!p && typeof p.then === "function";
  }
  var Recoil_isPromise = isPromise;
  function nullthrows(x, message) {
    if (x != null) {
      return x;
    }
    throw new Error(message !== null && message !== void 0 ? message : "Got unexpected null or undefined");
  }
  var Recoil_nullthrows = nullthrows;
  var Canceled = class {
  };
  var CANCELED = new Canceled();
  var loadableAccessors = {
    valueMaybe() {
      return void 0;
    },
    valueOrThrow() {
      const error = new Error(`Loadable expected value, but in "${this.state}" state`);
      throw error;
    },
    errorMaybe() {
      return void 0;
    },
    errorOrThrow() {
      const error = new Error(`Loadable expected error, but in "${this.state}" state`);
      throw error;
    },
    promiseMaybe() {
      return void 0;
    },
    promiseOrThrow() {
      const error = new Error(`Loadable expected promise, but in "${this.state}" state`);
      throw error;
    },
    is(other) {
      return other.state === this.state && other.contents === this.contents;
    },
    map(map) {
      if (this.state === "hasError") {
        return this;
      }
      if (this.state === "hasValue") {
        try {
          const next = map(this.contents);
          return Recoil_isPromise(next) ? loadableWithPromise(next) : loadableWithValue(next);
        } catch (e) {
          return Recoil_isPromise(e) ? loadableWithPromise(e.next(() => map(this.contents))) : loadableWithError(e);
        }
      }
      if (this.state === "loading") {
        return loadableWithPromise(this.contents.then(map).catch((e) => {
          if (Recoil_isPromise(e)) {
            return e.then(() => map(this.contents));
          }
          throw e;
        }));
      }
      const error = new Error("Invalid Loadable state");
      throw error;
    }
  };
  function loadableWithValue(value) {
    return Object.freeze({
      state: "hasValue",
      contents: value,
      ...loadableAccessors,
      getValue() {
        return this.contents;
      },
      toPromise() {
        return Promise.resolve(this.contents);
      },
      valueMaybe() {
        return this.contents;
      },
      valueOrThrow() {
        return this.contents;
      }
    });
  }
  function loadableWithError(error) {
    return Object.freeze({
      state: "hasError",
      contents: error,
      ...loadableAccessors,
      getValue() {
        throw this.contents;
      },
      toPromise() {
        return Promise.reject(this.contents);
      },
      errorMaybe() {
        return this.contents;
      },
      errorOrThrow() {
        return this.contents;
      }
    });
  }
  function loadableWithPromise(promise) {
    return Object.freeze({
      state: "loading",
      contents: promise,
      ...loadableAccessors,
      getValue() {
        throw this.contents.then(({
          __value
        }) => __value);
      },
      toPromise() {
        return this.contents.then(({
          __value
        }) => __value);
      },
      promiseMaybe() {
        return this.contents.then(({
          __value
        }) => __value);
      },
      promiseOrThrow() {
        return this.contents.then(({
          __value
        }) => __value);
      }
    });
  }
  function loadableLoading() {
    return loadableWithPromise(new Promise(() => {
    }));
  }
  function loadableAll(inputs) {
    return inputs.every((i) => i.state === "hasValue") ? loadableWithValue(inputs.map((i) => i.contents)) : inputs.some((i) => i.state === "hasError") ? loadableWithError(Recoil_nullthrows(inputs.find((i) => i.state === "hasError"), "Invalid loadable passed to loadableAll").contents) : loadableWithPromise(Promise.all(inputs.map((i) => i.contents)).then((value) => ({
      __value: value
    })));
  }
  var Recoil_Loadable = {
    loadableWithValue,
    loadableWithError,
    loadableWithPromise,
    loadableLoading,
    loadableAll,
    Canceled,
    CANCELED
  };
  var _useMutableSource;
  var useMutableSource = (_useMutableSource = import_react.default.useMutableSource) !== null && _useMutableSource !== void 0 ? _useMutableSource : import_react.default.unstable_useMutableSource;
  function mutableSourceExists() {
    return useMutableSource && !(typeof window !== "undefined" && window.$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE);
  }
  var Recoil_mutableSource = {
    mutableSourceExists,
    useMutableSource
  };
  var {
    mutableSourceExists: mutableSourceExists$1
  } = Recoil_mutableSource;
  var gks = new Map().set("recoil_hamt_2020", true).set("recoil_memory_managament_2020", true);
  function Recoil_gkx(gk) {
    var _gks$get;
    if (gk === "recoil_early_rendering_2021" && !mutableSourceExists$1()) {
      return false;
    }
    return (_gks$get = gks.get(gk)) !== null && _gks$get !== void 0 ? _gks$get : false;
  }
  Recoil_gkx.setPass = (gk) => {
    gks.set(gk, true);
  };
  Recoil_gkx.setFail = (gk) => {
    gks.set(gk, false);
  };
  var Recoil_gkx_1 = Recoil_gkx;
  function recoverableViolation(message, projectName, {
    error
  } = {}) {
    if (true) {
      console.error(message, error);
    }
    return null;
  }
  var recoverableViolation_1 = recoverableViolation;
  var Recoil_recoverableViolation = recoverableViolation_1;
  function setByAddingToSet(set2, v) {
    const next = new Set(set2);
    next.add(v);
    return next;
  }
  function setByDeletingFromSet(set2, v) {
    const next = new Set(set2);
    next.delete(v);
    return next;
  }
  function mapBySettingInMap(map, k, v) {
    const next = new Map(map);
    next.set(k, v);
    return next;
  }
  function mapByUpdatingInMap(map, k, updater) {
    const next = new Map(map);
    next.set(k, updater(next.get(k)));
    return next;
  }
  function mapByDeletingFromMap(map, k) {
    const next = new Map(map);
    next.delete(k);
    return next;
  }
  function mapByDeletingMultipleFromMap(map, ks) {
    const next = new Map(map);
    ks.forEach((k) => next.delete(k));
    return next;
  }
  var Recoil_CopyOnWrite = {
    setByAddingToSet,
    setByDeletingFromSet,
    mapBySettingInMap,
    mapByUpdatingInMap,
    mapByDeletingFromMap,
    mapByDeletingMultipleFromMap
  };
  function* filterIterable(iterable, predicate) {
    let index = 0;
    for (const value of iterable) {
      if (predicate(value, index++)) {
        yield value;
      }
    }
  }
  var Recoil_filterIterable = filterIterable;
  function mapIterable(iterable, callback) {
    return function* () {
      let index = 0;
      for (const value of iterable) {
        yield callback(value, index++);
      }
    }();
  }
  var Recoil_mapIterable = mapIterable;
  function sprintf(format, ...args) {
    let index = 0;
    return format.replace(/%s/g, () => String(args[index++]));
  }
  var sprintf_1 = sprintf;
  function expectationViolation(format, ...args) {
    if (true) {
      const message = sprintf_1.call(null, format, ...args);
      const error = new Error(message);
      error.name = "Expectation Violation";
      console.error(error);
    }
  }
  var expectationViolation_1 = expectationViolation;
  var Recoil_expectationViolation = expectationViolation_1;
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var AbstractRecoilValue = class {
    constructor(newKey) {
      _defineProperty(this, "key", void 0);
      this.key = newKey;
    }
  };
  var RecoilState = class extends AbstractRecoilValue {
  };
  var RecoilValueReadOnly = class extends AbstractRecoilValue {
  };
  function isRecoilValue(x) {
    return x instanceof RecoilState || x instanceof RecoilValueReadOnly;
  }
  var Recoil_RecoilValue = {
    AbstractRecoilValue,
    RecoilState,
    RecoilValueReadOnly,
    isRecoilValue
  };
  var Recoil_RecoilValue_1 = Recoil_RecoilValue.AbstractRecoilValue;
  var Recoil_RecoilValue_2 = Recoil_RecoilValue.RecoilState;
  var Recoil_RecoilValue_3 = Recoil_RecoilValue.RecoilValueReadOnly;
  var Recoil_RecoilValue_4 = Recoil_RecoilValue.isRecoilValue;
  var Recoil_RecoilValue$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    AbstractRecoilValue: Recoil_RecoilValue_1,
    RecoilState: Recoil_RecoilValue_2,
    RecoilValueReadOnly: Recoil_RecoilValue_3,
    isRecoilValue: Recoil_RecoilValue_4
  });
  var DefaultValue = class {
  };
  var DEFAULT_VALUE = new DefaultValue();
  var RecoilValueNotReady = class extends Error {
    constructor(key) {
      super(`Tried to set the value of Recoil selector ${key} using an updater function, but it is an async selector in a pending or error state; this is not supported.`);
    }
  };
  var nodes = new Map();
  var recoilValues = new Map();
  function recoilValuesForKeys(keys2) {
    return Recoil_mapIterable(keys2, (key) => Recoil_nullthrows(recoilValues.get(key)));
  }
  function registerNode(node) {
    if (nodes.has(node.key)) {
      const message = `Duplicate atom key "${node.key}". This is a FATAL ERROR in
      production. But it is safe to ignore this warning if it occurred because of
      hot module replacement.`;
      console.warn(message);
    }
    nodes.set(node.key, node);
    const recoilValue = node.set == null ? new Recoil_RecoilValue$1.RecoilValueReadOnly(node.key) : new Recoil_RecoilValue$1.RecoilState(node.key);
    recoilValues.set(node.key, recoilValue);
    return recoilValue;
  }
  var NodeMissingError = class extends Error {
  };
  function getNode(key) {
    const node = nodes.get(key);
    if (node == null) {
      throw new NodeMissingError(`Missing definition for RecoilValue: "${key}""`);
    }
    return node;
  }
  function getNodeMaybe(key) {
    return nodes.get(key);
  }
  var configDeletionHandlers = new Map();
  function deleteNodeConfigIfPossible(key) {
    var _node$shouldDeleteCon;
    if (!Recoil_gkx_1("recoil_memory_managament_2020")) {
      return;
    }
    const node = nodes.get(key);
    if (node === null || node === void 0 ? void 0 : (_node$shouldDeleteCon = node.shouldDeleteConfigOnRelease) === null || _node$shouldDeleteCon === void 0 ? void 0 : _node$shouldDeleteCon.call(node)) {
      var _getConfigDeletionHan;
      nodes.delete(key);
      (_getConfigDeletionHan = getConfigDeletionHandler(key)) === null || _getConfigDeletionHan === void 0 ? void 0 : _getConfigDeletionHan();
      configDeletionHandlers.delete(key);
    }
  }
  function setConfigDeletionHandler(key, fn) {
    if (!Recoil_gkx_1("recoil_memory_managament_2020")) {
      return;
    }
    if (fn === void 0) {
      configDeletionHandlers.delete(key);
    } else {
      configDeletionHandlers.set(key, fn);
    }
  }
  function getConfigDeletionHandler(key) {
    return configDeletionHandlers.get(key);
  }
  var Recoil_Node = {
    nodes,
    recoilValues,
    registerNode,
    getNode,
    getNodeMaybe,
    deleteNodeConfigIfPossible,
    setConfigDeletionHandler,
    getConfigDeletionHandler,
    recoilValuesForKeys,
    NodeMissingError,
    DefaultValue,
    DEFAULT_VALUE,
    RecoilValueNotReady
  };
  var RetentionZone = class {
  };
  function retentionZone() {
    return new RetentionZone();
  }
  var Recoil_RetentionZone = {
    RetentionZone,
    retentionZone
  };
  var {
    setByAddingToSet: setByAddingToSet$1
  } = Recoil_CopyOnWrite;
  var {
    getNode: getNode$1,
    getNodeMaybe: getNodeMaybe$1,
    recoilValuesForKeys: recoilValuesForKeys$1
  } = Recoil_Node;
  var {
    RetentionZone: RetentionZone$1
  } = Recoil_RetentionZone;
  var emptySet = Object.freeze(new Set());
  var ReadOnlyRecoilValueError = class extends Error {
  };
  function initializeRetentionForNode(store2, nodeKey, retainedBy) {
    if (!Recoil_gkx_1("recoil_memory_managament_2020")) {
      return () => void 0;
    }
    const {
      nodesRetainedByZone: nodesRetainedByZone2
    } = store2.getState().retention;
    function addToZone(zone) {
      let set2 = nodesRetainedByZone2.get(zone);
      if (!set2) {
        nodesRetainedByZone2.set(zone, set2 = new Set());
      }
      set2.add(nodeKey);
    }
    if (retainedBy instanceof RetentionZone$1) {
      addToZone(retainedBy);
    } else if (Array.isArray(retainedBy)) {
      for (const zone of retainedBy) {
        addToZone(zone);
      }
    }
    return () => {
      if (!Recoil_gkx_1("recoil_memory_managament_2020")) {
        return;
      }
      const nodesRetainedByZone3 = store2.getState().retention.nodesRetainedByZone;
      function deleteFromZone(zone) {
        const set2 = nodesRetainedByZone3.get(zone);
        if (set2) {
          set2.delete(nodeKey);
        }
        if (set2 && set2.size === 0) {
          nodesRetainedByZone3.delete(zone);
        }
      }
      if (retainedBy instanceof RetentionZone$1) {
        deleteFromZone(retainedBy);
      } else if (Array.isArray(retainedBy)) {
        for (const zone of retainedBy) {
          deleteFromZone(zone);
        }
      }
    };
  }
  function initializeNodeIfNewToStore(store2, treeState, key, trigger) {
    const storeState = store2.getState();
    if (storeState.nodeCleanupFunctions.has(key)) {
      return;
    }
    const config = getNode$1(key);
    const retentionCleanup = initializeRetentionForNode(store2, key, config.retainedBy);
    const nodeCleanup = config.init(store2, treeState, trigger);
    storeState.nodeCleanupFunctions.set(key, () => {
      nodeCleanup();
      retentionCleanup();
    });
  }
  function cleanUpNode(store2, key) {
    var _state$nodeCleanupFun;
    const state = store2.getState();
    (_state$nodeCleanupFun = state.nodeCleanupFunctions.get(key)) === null || _state$nodeCleanupFun === void 0 ? void 0 : _state$nodeCleanupFun();
    state.nodeCleanupFunctions.delete(key);
  }
  function getNodeLoadable(store2, state, key) {
    initializeNodeIfNewToStore(store2, state, key, "get");
    return getNode$1(key).get(store2, state);
  }
  function peekNodeLoadable(store2, state, key) {
    return getNode$1(key).peek(store2, state);
  }
  function setUnvalidatedAtomValue_DEPRECATED(state, key, newValue) {
    var _node$invalidate;
    const node = getNodeMaybe$1(key);
    node === null || node === void 0 ? void 0 : (_node$invalidate = node.invalidate) === null || _node$invalidate === void 0 ? void 0 : _node$invalidate.call(node, state);
    return {
      ...state,
      atomValues: state.atomValues.clone().delete(key),
      nonvalidatedAtoms: state.nonvalidatedAtoms.clone().set(key, newValue),
      dirtyAtoms: setByAddingToSet$1(state.dirtyAtoms, key)
    };
  }
  function setNodeValue(store2, state, key, newValue) {
    const node = getNode$1(key);
    if (node.set == null) {
      throw new ReadOnlyRecoilValueError(`Attempt to set read-only RecoilValue: ${key}`);
    }
    const set2 = node.set;
    initializeNodeIfNewToStore(store2, state, key, "set");
    return set2(store2, state, newValue);
  }
  function peekNodeInfo(store2, state, key) {
    var _graph$nodeDeps$get, _storeState$nodeToCom, _storeState$nodeToCom2;
    const storeState = store2.getState();
    const graph2 = store2.getGraph(state.version);
    const type = storeState.knownAtoms.has(key) ? "atom" : storeState.knownSelectors.has(key) ? "selector" : void 0;
    const downstreamNodes = Recoil_filterIterable(getDownstreamNodes(store2, state, new Set([key])), (nodeKey) => nodeKey !== key);
    return {
      loadable: peekNodeLoadable(store2, state, key),
      isActive: storeState.knownAtoms.has(key) || storeState.knownSelectors.has(key),
      isSet: type === "selector" ? false : state.atomValues.has(key),
      isModified: state.dirtyAtoms.has(key),
      type,
      deps: recoilValuesForKeys$1((_graph$nodeDeps$get = graph2.nodeDeps.get(key)) !== null && _graph$nodeDeps$get !== void 0 ? _graph$nodeDeps$get : []),
      subscribers: {
        nodes: recoilValuesForKeys$1(downstreamNodes),
        components: Recoil_mapIterable((_storeState$nodeToCom = (_storeState$nodeToCom2 = storeState.nodeToComponentSubscriptions.get(key)) === null || _storeState$nodeToCom2 === void 0 ? void 0 : _storeState$nodeToCom2.values()) !== null && _storeState$nodeToCom !== void 0 ? _storeState$nodeToCom : [], ([name]) => ({
          name
        }))
      }
    };
  }
  function getDownstreamNodes(store2, state, keys2) {
    const visitedNodes = new Set();
    const visitingNodes = Array.from(keys2);
    const graph2 = store2.getGraph(state.version);
    for (let key = visitingNodes.pop(); key; key = visitingNodes.pop()) {
      var _graph$nodeToNodeSubs;
      visitedNodes.add(key);
      const subscribedNodes = (_graph$nodeToNodeSubs = graph2.nodeToNodeSubscriptions.get(key)) !== null && _graph$nodeToNodeSubs !== void 0 ? _graph$nodeToNodeSubs : emptySet;
      for (const downstreamNode of subscribedNodes) {
        if (!visitedNodes.has(downstreamNode)) {
          visitingNodes.push(downstreamNode);
        }
      }
    }
    return visitedNodes;
  }
  var Recoil_FunctionalCore = {
    getNodeLoadable,
    peekNodeLoadable,
    setNodeValue,
    cleanUpNode,
    setUnvalidatedAtomValue_DEPRECATED,
    peekNodeInfo,
    getDownstreamNodes,
    initializeNodeIfNewToStore
  };
  var {
    CANCELED: CANCELED$1
  } = Recoil_Loadable;
  var {
    getDownstreamNodes: getDownstreamNodes$1,
    getNodeLoadable: getNodeLoadable$1,
    setNodeValue: setNodeValue$1
  } = Recoil_FunctionalCore;
  var {
    getNodeMaybe: getNodeMaybe$2
  } = Recoil_Node;
  var {
    DefaultValue: DefaultValue$1,
    RecoilValueNotReady: RecoilValueNotReady$1
  } = Recoil_Node;
  var {
    AbstractRecoilValue: AbstractRecoilValue$1,
    RecoilState: RecoilState$1,
    RecoilValueReadOnly: RecoilValueReadOnly$1,
    isRecoilValue: isRecoilValue$1
  } = Recoil_RecoilValue$1;
  function getRecoilValueAsLoadable(store2, {
    key
  }, treeState = store2.getState().currentTree) {
    var _storeState$nextTree, _storeState$previousT;
    const storeState = store2.getState();
    if (!(treeState.version === storeState.currentTree.version || treeState.version === ((_storeState$nextTree = storeState.nextTree) === null || _storeState$nextTree === void 0 ? void 0 : _storeState$nextTree.version) || treeState.version === ((_storeState$previousT = storeState.previousTree) === null || _storeState$previousT === void 0 ? void 0 : _storeState$previousT.version))) {
      Recoil_recoverableViolation("Tried to read from a discarded tree");
    }
    const loadable = getNodeLoadable$1(store2, treeState, key);
    if (loadable.state === "loading") {
      loadable.contents.catch(() => {
        return CANCELED$1;
      });
    }
    return loadable;
  }
  function applyAtomValueWrites(atomValues, writes) {
    const result = atomValues.clone();
    writes.forEach((v, k) => {
      if (v.state === "hasValue" && v.contents instanceof DefaultValue$1) {
        result.delete(k);
      } else {
        result.set(k, v);
      }
    });
    return result;
  }
  function valueFromValueOrUpdater(store2, state, {
    key
  }, valueOrUpdater) {
    if (typeof valueOrUpdater === "function") {
      const current = getNodeLoadable$1(store2, state, key);
      if (current.state === "loading") {
        throw new RecoilValueNotReady$1(key);
      } else if (current.state === "hasError") {
        throw current.contents;
      }
      return valueOrUpdater(current.contents);
    } else {
      return valueOrUpdater;
    }
  }
  function applyAction(store2, state, action) {
    if (action.type === "set") {
      const {
        recoilValue,
        valueOrUpdater
      } = action;
      const newValue = valueFromValueOrUpdater(store2, state, recoilValue, valueOrUpdater);
      const writes = setNodeValue$1(store2, state, recoilValue.key, newValue);
      for (const [key, loadable] of writes.entries()) {
        writeLoadableToTreeState(state, key, loadable);
      }
    } else if (action.type === "setLoadable") {
      const {
        recoilValue: {
          key
        },
        loadable
      } = action;
      writeLoadableToTreeState(state, key, loadable);
    } else if (action.type === "markModified") {
      const {
        recoilValue: {
          key
        }
      } = action;
      state.dirtyAtoms.add(key);
    } else if (action.type === "setUnvalidated") {
      var _node$invalidate;
      const {
        recoilValue: {
          key
        },
        unvalidatedValue
      } = action;
      const node = getNodeMaybe$2(key);
      node === null || node === void 0 ? void 0 : (_node$invalidate = node.invalidate) === null || _node$invalidate === void 0 ? void 0 : _node$invalidate.call(node, state);
      state.atomValues.delete(key);
      state.nonvalidatedAtoms.set(key, unvalidatedValue);
      state.dirtyAtoms.add(key);
    } else {
      Recoil_recoverableViolation(`Unknown action ${action.type}`);
    }
  }
  function writeLoadableToTreeState(state, key, loadable) {
    if (loadable.state === "hasValue" && loadable.contents instanceof DefaultValue$1) {
      state.atomValues.delete(key);
    } else {
      state.atomValues.set(key, loadable);
    }
    state.dirtyAtoms.add(key);
    state.nonvalidatedAtoms.delete(key);
  }
  function applyActionsToStore(store2, actions) {
    store2.replaceState((state) => {
      const newState = copyTreeState(state);
      for (const action of actions) {
        applyAction(store2, newState, action);
      }
      invalidateDownstreams(store2, newState);
      return newState;
    });
  }
  function queueOrPerformStateUpdate(store2, action) {
    if (batchStack.length) {
      const actionsByStore = batchStack[batchStack.length - 1];
      let actions = actionsByStore.get(store2);
      if (!actions) {
        actionsByStore.set(store2, actions = []);
      }
      actions.push(action);
    } else {
      applyActionsToStore(store2, [action]);
    }
  }
  var batchStack = [];
  function batchStart() {
    const actionsByStore = new Map();
    batchStack.push(actionsByStore);
    return () => {
      for (const [store2, actions] of actionsByStore) {
        applyActionsToStore(store2, actions);
      }
      const popped = batchStack.pop();
      if (popped !== actionsByStore) {
        Recoil_recoverableViolation("Incorrect order of batch popping");
      }
    };
  }
  function copyTreeState(state) {
    return {
      ...state,
      atomValues: state.atomValues.clone(),
      nonvalidatedAtoms: state.nonvalidatedAtoms.clone(),
      dirtyAtoms: new Set(state.dirtyAtoms)
    };
  }
  function invalidateDownstreams(store2, state) {
    const downstreams = getDownstreamNodes$1(store2, state, state.dirtyAtoms);
    for (const key of downstreams) {
      var _getNodeMaybe, _getNodeMaybe$invalid;
      (_getNodeMaybe = getNodeMaybe$2(key)) === null || _getNodeMaybe === void 0 ? void 0 : (_getNodeMaybe$invalid = _getNodeMaybe.invalidate) === null || _getNodeMaybe$invalid === void 0 ? void 0 : _getNodeMaybe$invalid.call(_getNodeMaybe, state);
    }
  }
  function setRecoilValue(store2, recoilValue, valueOrUpdater) {
    queueOrPerformStateUpdate(store2, {
      type: "set",
      recoilValue,
      valueOrUpdater
    });
  }
  function setRecoilValueLoadable(store2, recoilValue, loadable) {
    if (loadable instanceof DefaultValue$1) {
      return setRecoilValue(store2, recoilValue, loadable);
    }
    queueOrPerformStateUpdate(store2, {
      type: "setLoadable",
      recoilValue,
      loadable
    });
  }
  function markRecoilValueModified(store2, recoilValue) {
    queueOrPerformStateUpdate(store2, {
      type: "markModified",
      recoilValue
    });
  }
  function setUnvalidatedRecoilValue(store2, recoilValue, unvalidatedValue) {
    queueOrPerformStateUpdate(store2, {
      type: "setUnvalidated",
      recoilValue,
      unvalidatedValue
    });
  }
  var subscriptionID = 0;
  function subscribeToRecoilValue(store2, {
    key
  }, callback, componentDebugName = null) {
    const subID = subscriptionID++;
    const storeState = store2.getState();
    if (!storeState.nodeToComponentSubscriptions.has(key)) {
      storeState.nodeToComponentSubscriptions.set(key, new Map());
    }
    Recoil_nullthrows(storeState.nodeToComponentSubscriptions.get(key)).set(subID, [componentDebugName !== null && componentDebugName !== void 0 ? componentDebugName : "<not captured>", callback]);
    if (Recoil_gkx_1("recoil_early_rendering_2021")) {
      const nextTree = store2.getState().nextTree;
      if (nextTree && nextTree.dirtyAtoms.has(key)) {
        callback(nextTree);
      }
    }
    return {
      release: () => {
        const storeState2 = store2.getState();
        const subs = storeState2.nodeToComponentSubscriptions.get(key);
        if (subs === void 0 || !subs.has(subID)) {
          Recoil_recoverableViolation(`Subscription missing at release time for atom ${key}. This is a bug in Recoil.`);
          return;
        }
        subs.delete(subID);
        if (subs.size === 0) {
          storeState2.nodeToComponentSubscriptions.delete(key);
        }
      }
    };
  }
  var Recoil_RecoilValueInterface = {
    RecoilValueReadOnly: RecoilValueReadOnly$1,
    AbstractRecoilValue: AbstractRecoilValue$1,
    RecoilState: RecoilState$1,
    getRecoilValueAsLoadable,
    setRecoilValue,
    setRecoilValueLoadable,
    markRecoilValueModified,
    setUnvalidatedRecoilValue,
    subscribeToRecoilValue,
    isRecoilValue: isRecoilValue$1,
    applyAtomValueWrites,
    batchStart,
    writeLoadableToTreeState,
    invalidateDownstreams,
    copyTreeState,
    invalidateDownstreams_FOR_TESTING: invalidateDownstreams
  };
  var {
    unstable_batchedUpdates
  } = import_react_dom.default;
  var ReactBatchedUpdates = {
    unstable_batchedUpdates
  };
  var {
    unstable_batchedUpdates: unstable_batchedUpdates$1
  } = ReactBatchedUpdates;
  var Recoil_ReactBatchedUpdates = {
    unstable_batchedUpdates: unstable_batchedUpdates$1
  };
  var {
    batchStart: batchStart$1
  } = Recoil_RecoilValueInterface;
  var {
    unstable_batchedUpdates: unstable_batchedUpdates$2
  } = Recoil_ReactBatchedUpdates;
  var batcher = unstable_batchedUpdates$2;
  var setBatcher = (newBatcher) => {
    batcher = newBatcher;
  };
  var getBatcher = () => batcher;
  var batchUpdates = (callback) => {
    batcher(() => {
      let batchEnd = () => void 0;
      try {
        batchEnd = batchStart$1();
        callback();
      } finally {
        batchEnd();
      }
    });
  };
  var Recoil_Batching = {
    getBatcher,
    setBatcher,
    batchUpdates
  };
  function enqueueExecution(s, f) {
    f();
  }
  var Recoil_Queue = {
    enqueueExecution
  };
  function differenceSets(set2, ...setsWithValuesToRemove) {
    const ret = new Set();
    FIRST:
      for (const value of set2) {
        for (const otherSet of setsWithValuesToRemove) {
          if (otherSet.has(value)) {
            continue FIRST;
          }
        }
        ret.add(value);
      }
    return ret;
  }
  var Recoil_differenceSets = differenceSets;
  function mapMap(map, callback) {
    const result = new Map();
    map.forEach((value, key) => {
      result.set(key, callback(value, key));
    });
    return result;
  }
  var Recoil_mapMap = mapMap;
  function graph() {
    return {
      nodeDeps: new Map(),
      nodeToNodeSubscriptions: new Map()
    };
  }
  function cloneGraph(graph2) {
    return {
      nodeDeps: Recoil_mapMap(graph2.nodeDeps, (s) => new Set(s)),
      nodeToNodeSubscriptions: Recoil_mapMap(graph2.nodeToNodeSubscriptions, (s) => new Set(s))
    };
  }
  function mergeDependencyMapIntoGraph(deps, graph2, olderGraph) {
    const {
      nodeDeps,
      nodeToNodeSubscriptions
    } = graph2;
    deps.forEach((upstreams, downstream) => {
      const existingUpstreams = nodeDeps.get(downstream);
      if (existingUpstreams && olderGraph && existingUpstreams !== olderGraph.nodeDeps.get(downstream)) {
        return;
      }
      nodeDeps.set(downstream, new Set(upstreams));
      const addedUpstreams = existingUpstreams == null ? upstreams : Recoil_differenceSets(upstreams, existingUpstreams);
      addedUpstreams.forEach((upstream) => {
        if (!nodeToNodeSubscriptions.has(upstream)) {
          nodeToNodeSubscriptions.set(upstream, new Set());
        }
        const existing = Recoil_nullthrows(nodeToNodeSubscriptions.get(upstream));
        existing.add(downstream);
      });
      if (existingUpstreams) {
        const removedUpstreams = Recoil_differenceSets(existingUpstreams, upstreams);
        removedUpstreams.forEach((upstream) => {
          if (!nodeToNodeSubscriptions.has(upstream)) {
            return;
          }
          const existing = Recoil_nullthrows(nodeToNodeSubscriptions.get(upstream));
          existing.delete(downstream);
          if (existing.size === 0) {
            nodeToNodeSubscriptions.delete(upstream);
          }
        });
      }
    });
  }
  function saveDependencyMapToStore(dependencyMap, store2, version) {
    var _storeState$nextTree, _storeState$previousT, _storeState$previousT2, _storeState$previousT3;
    const storeState = store2.getState();
    if (!(version === storeState.currentTree.version || version === ((_storeState$nextTree = storeState.nextTree) === null || _storeState$nextTree === void 0 ? void 0 : _storeState$nextTree.version) || version === ((_storeState$previousT = storeState.previousTree) === null || _storeState$previousT === void 0 ? void 0 : _storeState$previousT.version))) {
      Recoil_recoverableViolation("Tried to save dependencies to a discarded tree");
    }
    const graph2 = store2.getGraph(version);
    mergeDependencyMapIntoGraph(dependencyMap, graph2);
    if (version === ((_storeState$previousT2 = storeState.previousTree) === null || _storeState$previousT2 === void 0 ? void 0 : _storeState$previousT2.version)) {
      const currentGraph = store2.getGraph(storeState.currentTree.version);
      mergeDependencyMapIntoGraph(dependencyMap, currentGraph, graph2);
    }
    if (version === ((_storeState$previousT3 = storeState.previousTree) === null || _storeState$previousT3 === void 0 ? void 0 : _storeState$previousT3.version) || version === storeState.currentTree.version) {
      var _storeState$nextTree2;
      const nextVersion = (_storeState$nextTree2 = storeState.nextTree) === null || _storeState$nextTree2 === void 0 ? void 0 : _storeState$nextTree2.version;
      if (nextVersion !== void 0) {
        const nextGraph = store2.getGraph(nextVersion);
        mergeDependencyMapIntoGraph(dependencyMap, nextGraph, graph2);
      }
    }
  }
  function mergeDepsIntoDependencyMap(from, into) {
    from.forEach((upstreamDeps, downstreamNode) => {
      if (!into.has(downstreamNode)) {
        into.set(downstreamNode, new Set());
      }
      const deps = Recoil_nullthrows(into.get(downstreamNode));
      upstreamDeps.forEach((dep) => deps.add(dep));
    });
  }
  function addToDependencyMap(downstream, upstream, dependencyMap) {
    if (!dependencyMap.has(downstream)) {
      dependencyMap.set(downstream, new Set());
    }
    Recoil_nullthrows(dependencyMap.get(downstream)).add(upstream);
  }
  var Recoil_Graph = {
    addToDependencyMap,
    cloneGraph,
    graph,
    mergeDepsIntoDependencyMap,
    saveDependencyMapToStore
  };
  function createCommonjsModule(fn, module) {
    return module = { exports: {} }, fn(module, module.exports), module.exports;
  }
  var hamt_1 = createCommonjsModule(function(module) {
    var _typeof3 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    var hamt = {};
    var SIZE = 5;
    var BUCKET_SIZE = Math.pow(2, SIZE);
    var MASK = BUCKET_SIZE - 1;
    var MAX_INDEX_NODE = BUCKET_SIZE / 2;
    var MIN_ARRAY_NODE = BUCKET_SIZE / 4;
    var nothing = {};
    var constant = function constant2(x) {
      return function() {
        return x;
      };
    };
    var hash = hamt.hash = function(str) {
      var type = typeof str === "undefined" ? "undefined" : _typeof3(str);
      if (type === "number")
        return str;
      if (type !== "string")
        str += "";
      var hash2 = 0;
      for (var i = 0, len = str.length; i < len; ++i) {
        var c = str.charCodeAt(i);
        hash2 = (hash2 << 5) - hash2 + c | 0;
      }
      return hash2;
    };
    var popcount = function popcount2(x) {
      x -= x >> 1 & 1431655765;
      x = (x & 858993459) + (x >> 2 & 858993459);
      x = x + (x >> 4) & 252645135;
      x += x >> 8;
      x += x >> 16;
      return x & 127;
    };
    var hashFragment = function hashFragment2(shift2, h) {
      return h >>> shift2 & MASK;
    };
    var toBitmap = function toBitmap2(x) {
      return 1 << x;
    };
    var fromBitmap = function fromBitmap2(bitmap, bit) {
      return popcount(bitmap & bit - 1);
    };
    var arrayUpdate = function arrayUpdate2(mutate2, at2, v, arr) {
      var out = arr;
      if (!mutate2) {
        var len = arr.length;
        out = new Array(len);
        for (var i = 0; i < len; ++i) {
          out[i] = arr[i];
        }
      }
      out[at2] = v;
      return out;
    };
    var arraySpliceOut = function arraySpliceOut2(mutate2, at2, arr) {
      var newLen = arr.length - 1;
      var i = 0;
      var g = 0;
      var out = arr;
      if (mutate2) {
        i = g = at2;
      } else {
        out = new Array(newLen);
        while (i < at2) {
          out[g++] = arr[i++];
        }
      }
      ++i;
      while (i <= newLen) {
        out[g++] = arr[i++];
      }
      if (mutate2) {
        out.length = newLen;
      }
      return out;
    };
    var arraySpliceIn = function arraySpliceIn2(mutate2, at2, v, arr) {
      var len = arr.length;
      if (mutate2) {
        var _i = len;
        while (_i >= at2) {
          arr[_i--] = arr[_i];
        }
        arr[at2] = v;
        return arr;
      }
      var i = 0, g = 0;
      var out = new Array(len + 1);
      while (i < at2) {
        out[g++] = arr[i++];
      }
      out[at2] = v;
      while (i < len) {
        out[++g] = arr[i++];
      }
      return out;
    };
    var LEAF = 1;
    var COLLISION = 2;
    var INDEX = 3;
    var ARRAY = 4;
    var empty = {
      __hamt_isEmpty: true
    };
    var isEmptyNode = function isEmptyNode2(x) {
      return x === empty || x && x.__hamt_isEmpty;
    };
    var Leaf = function Leaf2(edit, hash2, key, value) {
      return {
        type: LEAF,
        edit,
        hash: hash2,
        key,
        value,
        _modify: Leaf__modify
      };
    };
    var Collision = function Collision2(edit, hash2, children) {
      return {
        type: COLLISION,
        edit,
        hash: hash2,
        children,
        _modify: Collision__modify
      };
    };
    var IndexedNode = function IndexedNode2(edit, mask2, children) {
      return {
        type: INDEX,
        edit,
        mask: mask2,
        children,
        _modify: IndexedNode__modify
      };
    };
    var ArrayNode = function ArrayNode2(edit, size, children) {
      return {
        type: ARRAY,
        edit,
        size,
        children,
        _modify: ArrayNode__modify
      };
    };
    var isLeaf = function isLeaf2(node) {
      return node === empty || node.type === LEAF || node.type === COLLISION;
    };
    var expand = function expand2(edit, frag, child, bitmap, subNodes) {
      var arr = [];
      var bit = bitmap;
      var count2 = 0;
      for (var i = 0; bit; ++i) {
        if (bit & 1)
          arr[i] = subNodes[count2++];
        bit >>>= 1;
      }
      arr[frag] = child;
      return ArrayNode(edit, count2 + 1, arr);
    };
    var pack = function pack2(edit, count2, removed, elements) {
      var children = new Array(count2 - 1);
      var g = 0;
      var bitmap = 0;
      for (var i = 0, len = elements.length; i < len; ++i) {
        if (i !== removed) {
          var elem = elements[i];
          if (elem && !isEmptyNode(elem)) {
            children[g++] = elem;
            bitmap |= 1 << i;
          }
        }
      }
      return IndexedNode(edit, bitmap, children);
    };
    var mergeLeaves = function mergeLeaves2(edit, shift2, h1, n1, h2, n2) {
      if (h1 === h2)
        return Collision(edit, h1, [n2, n1]);
      var subH1 = hashFragment(shift2, h1);
      var subH2 = hashFragment(shift2, h2);
      return IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), subH1 === subH2 ? [mergeLeaves2(edit, shift2 + SIZE, h1, n1, h2, n2)] : subH1 < subH2 ? [n1, n2] : [n2, n1]);
    };
    var updateCollisionList = function updateCollisionList2(mutate2, edit, keyEq, h, list, f, k, size) {
      var len = list.length;
      for (var i = 0; i < len; ++i) {
        var child = list[i];
        if (keyEq(k, child.key)) {
          var value = child.value;
          var _newValue = f(value);
          if (_newValue === value)
            return list;
          if (_newValue === nothing) {
            --size.value;
            return arraySpliceOut(mutate2, i, list);
          }
          return arrayUpdate(mutate2, i, Leaf(edit, h, k, _newValue), list);
        }
      }
      var newValue = f();
      if (newValue === nothing)
        return list;
      ++size.value;
      return arrayUpdate(mutate2, len, Leaf(edit, h, k, newValue), list);
    };
    var canEditNode = function canEditNode2(edit, node) {
      return edit === node.edit;
    };
    var Leaf__modify = function Leaf__modify2(edit, keyEq, shift2, f, h, k, size) {
      if (keyEq(k, this.key)) {
        var _v = f(this.value);
        if (_v === this.value)
          return this;
        else if (_v === nothing) {
          --size.value;
          return empty;
        }
        if (canEditNode(edit, this)) {
          this.value = _v;
          return this;
        }
        return Leaf(edit, h, k, _v);
      }
      var v = f();
      if (v === nothing)
        return this;
      ++size.value;
      return mergeLeaves(edit, shift2, this.hash, this, h, Leaf(edit, h, k, v));
    };
    var Collision__modify = function Collision__modify2(edit, keyEq, shift2, f, h, k, size) {
      if (h === this.hash) {
        var canEdit = canEditNode(edit, this);
        var list = updateCollisionList(canEdit, edit, keyEq, this.hash, this.children, f, k, size);
        if (list === this.children)
          return this;
        return list.length > 1 ? Collision(edit, this.hash, list) : list[0];
      }
      var v = f();
      if (v === nothing)
        return this;
      ++size.value;
      return mergeLeaves(edit, shift2, this.hash, this, h, Leaf(edit, h, k, v));
    };
    var IndexedNode__modify = function IndexedNode__modify2(edit, keyEq, shift2, f, h, k, size) {
      var mask2 = this.mask;
      var children = this.children;
      var frag = hashFragment(shift2, h);
      var bit = toBitmap(frag);
      var indx = fromBitmap(mask2, bit);
      var exists = mask2 & bit;
      var current = exists ? children[indx] : empty;
      var child = current._modify(edit, keyEq, shift2 + SIZE, f, h, k, size);
      if (current === child)
        return this;
      var canEdit = canEditNode(edit, this);
      var bitmap = mask2;
      var newChildren = void 0;
      if (exists && isEmptyNode(child)) {
        bitmap &= ~bit;
        if (!bitmap)
          return empty;
        if (children.length <= 2 && isLeaf(children[indx ^ 1]))
          return children[indx ^ 1];
        newChildren = arraySpliceOut(canEdit, indx, children);
      } else if (!exists && !isEmptyNode(child)) {
        if (children.length >= MAX_INDEX_NODE)
          return expand(edit, frag, child, mask2, children);
        bitmap |= bit;
        newChildren = arraySpliceIn(canEdit, indx, child, children);
      } else {
        newChildren = arrayUpdate(canEdit, indx, child, children);
      }
      if (canEdit) {
        this.mask = bitmap;
        this.children = newChildren;
        return this;
      }
      return IndexedNode(edit, bitmap, newChildren);
    };
    var ArrayNode__modify = function ArrayNode__modify2(edit, keyEq, shift2, f, h, k, size) {
      var count2 = this.size;
      var children = this.children;
      var frag = hashFragment(shift2, h);
      var child = children[frag];
      var newChild = (child || empty)._modify(edit, keyEq, shift2 + SIZE, f, h, k, size);
      if (child === newChild)
        return this;
      var canEdit = canEditNode(edit, this);
      var newChildren = void 0;
      if (isEmptyNode(child) && !isEmptyNode(newChild)) {
        ++count2;
        newChildren = arrayUpdate(canEdit, frag, newChild, children);
      } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {
        --count2;
        if (count2 <= MIN_ARRAY_NODE)
          return pack(edit, count2, frag, children);
        newChildren = arrayUpdate(canEdit, frag, empty, children);
      } else {
        newChildren = arrayUpdate(canEdit, frag, newChild, children);
      }
      if (canEdit) {
        this.size = count2;
        this.children = newChildren;
        return this;
      }
      return ArrayNode(edit, count2, newChildren);
    };
    empty._modify = function(edit, keyEq, shift2, f, h, k, size) {
      var v = f();
      if (v === nothing)
        return empty;
      ++size.value;
      return Leaf(edit, h, k, v);
    };
    function Map2(editable, edit, config, root, size) {
      this._editable = editable;
      this._edit = edit;
      this._config = config;
      this._root = root;
      this._size = size;
    }
    Map2.prototype.setTree = function(newRoot, newSize) {
      if (this._editable) {
        this._root = newRoot;
        this._size = newSize;
        return this;
      }
      return newRoot === this._root ? this : new Map2(this._editable, this._edit, this._config, newRoot, newSize);
    };
    var tryGetHash = hamt.tryGetHash = function(alt, hash2, key, map) {
      var node = map._root;
      var shift2 = 0;
      var keyEq = map._config.keyEq;
      while (true) {
        switch (node.type) {
          case LEAF: {
            return keyEq(key, node.key) ? node.value : alt;
          }
          case COLLISION: {
            if (hash2 === node.hash) {
              var children = node.children;
              for (var i = 0, len = children.length; i < len; ++i) {
                var child = children[i];
                if (keyEq(key, child.key))
                  return child.value;
              }
            }
            return alt;
          }
          case INDEX: {
            var frag = hashFragment(shift2, hash2);
            var bit = toBitmap(frag);
            if (node.mask & bit) {
              node = node.children[fromBitmap(node.mask, bit)];
              shift2 += SIZE;
              break;
            }
            return alt;
          }
          case ARRAY: {
            node = node.children[hashFragment(shift2, hash2)];
            if (node) {
              shift2 += SIZE;
              break;
            }
            return alt;
          }
          default:
            return alt;
        }
      }
    };
    Map2.prototype.tryGetHash = function(alt, hash2, key) {
      return tryGetHash(alt, hash2, key, this);
    };
    var tryGet = hamt.tryGet = function(alt, key, map) {
      return tryGetHash(alt, map._config.hash(key), key, map);
    };
    Map2.prototype.tryGet = function(alt, key) {
      return tryGet(alt, key, this);
    };
    var getHash = hamt.getHash = function(hash2, key, map) {
      return tryGetHash(void 0, hash2, key, map);
    };
    Map2.prototype.getHash = function(hash2, key) {
      return getHash(hash2, key, this);
    };
    var get2 = hamt.get = function(key, map) {
      return tryGetHash(void 0, map._config.hash(key), key, map);
    };
    Map2.prototype.get = function(key, alt) {
      return tryGet(alt, key, this);
    };
    var hasHash = hamt.has = function(hash2, key, map) {
      return tryGetHash(nothing, hash2, key, map) !== nothing;
    };
    Map2.prototype.hasHash = function(hash2, key) {
      return hasHash(hash2, key, this);
    };
    var has = hamt.has = function(key, map) {
      return hasHash(map._config.hash(key), key, map);
    };
    Map2.prototype.has = function(key) {
      return has(key, this);
    };
    var defKeyCompare = function defKeyCompare2(x, y) {
      return x === y;
    };
    hamt.make = function(config) {
      return new Map2(0, 0, {
        keyEq: config && config.keyEq || defKeyCompare,
        hash: config && config.hash || hash
      }, empty, 0);
    };
    hamt.empty = hamt.make();
    var isEmpty2 = hamt.isEmpty = function(map) {
      return map && !!isEmptyNode(map._root);
    };
    Map2.prototype.isEmpty = function() {
      return isEmpty2(this);
    };
    var modifyHash = hamt.modifyHash = function(f, hash2, key, map) {
      var size = {
        value: map._size
      };
      var newRoot = map._root._modify(map._editable ? map._edit : NaN, map._config.keyEq, 0, f, hash2, key, size);
      return map.setTree(newRoot, size.value);
    };
    Map2.prototype.modifyHash = function(hash2, key, f) {
      return modifyHash(f, hash2, key, this);
    };
    var modify = hamt.modify = function(f, key, map) {
      return modifyHash(f, map._config.hash(key), key, map);
    };
    Map2.prototype.modify = function(key, f) {
      return modify(f, key, this);
    };
    var setHash = hamt.setHash = function(hash2, key, value, map) {
      return modifyHash(constant(value), hash2, key, map);
    };
    Map2.prototype.setHash = function(hash2, key, value) {
      return setHash(hash2, key, value, this);
    };
    var set2 = hamt.set = function(key, value, map) {
      return setHash(map._config.hash(key), key, value, map);
    };
    Map2.prototype.set = function(key, value) {
      return set2(key, value, this);
    };
    var del = constant(nothing);
    var removeHash = hamt.removeHash = function(hash2, key, map) {
      return modifyHash(del, hash2, key, map);
    };
    Map2.prototype.removeHash = Map2.prototype.deleteHash = function(hash2, key) {
      return removeHash(hash2, key, this);
    };
    var remove = hamt.remove = function(key, map) {
      return removeHash(map._config.hash(key), key, map);
    };
    Map2.prototype.remove = Map2.prototype.delete = function(key) {
      return remove(key, this);
    };
    var beginMutation = hamt.beginMutation = function(map) {
      return new Map2(map._editable + 1, map._edit + 1, map._config, map._root, map._size);
    };
    Map2.prototype.beginMutation = function() {
      return beginMutation(this);
    };
    var endMutation = hamt.endMutation = function(map) {
      map._editable = map._editable && map._editable - 1;
      return map;
    };
    Map2.prototype.endMutation = function() {
      return endMutation(this);
    };
    var mutate = hamt.mutate = function(f, map) {
      var transient = beginMutation(map);
      f(transient);
      return endMutation(transient);
    };
    Map2.prototype.mutate = function(f) {
      return mutate(f, this);
    };
    var appk = function appk2(k) {
      return k && lazyVisitChildren(k[0], k[1], k[2], k[3], k[4]);
    };
    var lazyVisitChildren = function lazyVisitChildren2(len, children, i, f, k) {
      while (i < len) {
        var child = children[i++];
        if (child && !isEmptyNode(child))
          return lazyVisit(child, f, [len, children, i, f, k]);
      }
      return appk(k);
    };
    var lazyVisit = function lazyVisit2(node, f, k) {
      switch (node.type) {
        case LEAF:
          return {
            value: f(node),
            rest: k
          };
        case COLLISION:
        case ARRAY:
        case INDEX:
          var children = node.children;
          return lazyVisitChildren(children.length, children, 0, f, k);
        default:
          return appk(k);
      }
    };
    var DONE = {
      done: true
    };
    function MapIterator(v) {
      this.v = v;
    }
    MapIterator.prototype.next = function() {
      if (!this.v)
        return DONE;
      var v0 = this.v;
      this.v = appk(v0.rest);
      return v0;
    };
    MapIterator.prototype[Symbol.iterator] = function() {
      return this;
    };
    var visit = function visit2(map, f) {
      return new MapIterator(lazyVisit(map._root, f));
    };
    var buildPairs = function buildPairs2(x) {
      return [x.key, x.value];
    };
    var entries = hamt.entries = function(map) {
      return visit(map, buildPairs);
    };
    Map2.prototype.entries = Map2.prototype[Symbol.iterator] = function() {
      return entries(this);
    };
    var buildKeys = function buildKeys2(x) {
      return x.key;
    };
    var keys2 = hamt.keys = function(map) {
      return visit(map, buildKeys);
    };
    Map2.prototype.keys = function() {
      return keys2(this);
    };
    var buildValues = function buildValues2(x) {
      return x.value;
    };
    var values3 = hamt.values = Map2.prototype.values = function(map) {
      return visit(map, buildValues);
    };
    Map2.prototype.values = function() {
      return values3(this);
    };
    var fold = hamt.fold = function(f, z, m) {
      var root = m._root;
      if (root.type === LEAF)
        return f(z, root.value, root.key);
      var toVisit = [root.children];
      var children = void 0;
      while (children = toVisit.pop()) {
        for (var i = 0, len = children.length; i < len; ) {
          var child = children[i++];
          if (child && child.type) {
            if (child.type === LEAF)
              z = f(z, child.value, child.key);
            else
              toVisit.push(child.children);
          }
        }
      }
      return z;
    };
    Map2.prototype.fold = function(f, z) {
      return fold(f, z, this);
    };
    var forEach = hamt.forEach = function(f, map) {
      return fold(function(_, value, key) {
        return f(value, key, map);
      }, null, map);
    };
    Map2.prototype.forEach = function(f) {
      return forEach(f, this);
    };
    var count = hamt.count = function(map) {
      return map._size;
    };
    Map2.prototype.count = function() {
      return count(this);
    };
    Object.defineProperty(Map2.prototype, "size", {
      get: Map2.prototype.count
    });
    if (module.exports) {
      module.exports = hamt;
    } else {
      (void 0).hamt = hamt;
    }
  });
  var BuiltInMap = class {
    constructor(existing) {
      _defineProperty(this, "_map", void 0);
      this._map = new Map(existing === null || existing === void 0 ? void 0 : existing.entries());
    }
    keys() {
      return this._map.keys();
    }
    entries() {
      return this._map.entries();
    }
    get(k) {
      return this._map.get(k);
    }
    has(k) {
      return this._map.has(k);
    }
    set(k, v) {
      this._map.set(k, v);
      return this;
    }
    delete(k) {
      this._map.delete(k);
      return this;
    }
    clone() {
      return persistentMap(this);
    }
    toMap() {
      return new Map(this._map);
    }
  };
  var HashArrayMappedTrieMap = class {
    constructor(existing) {
      _defineProperty(this, "_hamt", hamt_1.empty.beginMutation());
      if (existing instanceof HashArrayMappedTrieMap) {
        const h = existing._hamt.endMutation();
        existing._hamt = h.beginMutation();
        this._hamt = h.beginMutation();
      } else if (existing) {
        for (const [k, v] of existing.entries()) {
          this._hamt.set(k, v);
        }
      }
    }
    keys() {
      return this._hamt.keys();
    }
    entries() {
      return this._hamt.entries();
    }
    get(k) {
      return this._hamt.get(k);
    }
    has(k) {
      return this._hamt.has(k);
    }
    set(k, v) {
      this._hamt.set(k, v);
      return this;
    }
    delete(k) {
      this._hamt.delete(k);
      return this;
    }
    clone() {
      return persistentMap(this);
    }
    toMap() {
      return new Map(this._hamt);
    }
  };
  function persistentMap(existing) {
    if (Recoil_gkx_1("recoil_hamt_2020")) {
      return new HashArrayMappedTrieMap(existing);
    } else {
      return new BuiltInMap(existing);
    }
  }
  var Recoil_PersistentMap = {
    persistentMap
  };
  var Recoil_PersistentMap_1 = Recoil_PersistentMap.persistentMap;
  var Recoil_PersistentMap$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    persistentMap: Recoil_PersistentMap_1
  });
  var {
    graph: graph$1
  } = Recoil_Graph;
  var {
    persistentMap: persistentMap$1
  } = Recoil_PersistentMap$1;
  var nextTreeStateVersion = 0;
  var getNextTreeStateVersion = () => nextTreeStateVersion++;
  function makeEmptyTreeState() {
    const version = getNextTreeStateVersion();
    return {
      version,
      stateID: version,
      transactionMetadata: {},
      dirtyAtoms: new Set(),
      atomValues: persistentMap$1(),
      nonvalidatedAtoms: persistentMap$1()
    };
  }
  function makeEmptyStoreState() {
    const currentTree = makeEmptyTreeState();
    return {
      currentTree,
      nextTree: null,
      previousTree: null,
      commitDepth: 0,
      knownAtoms: new Set(),
      knownSelectors: new Set(),
      transactionSubscriptions: new Map(),
      nodeTransactionSubscriptions: new Map(),
      nodeToComponentSubscriptions: new Map(),
      queuedComponentCallbacks_DEPRECATED: [],
      suspendedComponentResolvers: new Set(),
      graphsByVersion: new Map().set(currentTree.version, graph$1()),
      versionsUsedByComponent: new Map(),
      retention: {
        referenceCounts: new Map(),
        nodesRetainedByZone: new Map(),
        retainablesToCheckForRelease: new Set()
      },
      nodeCleanupFunctions: new Map()
    };
  }
  var Recoil_State = {
    makeEmptyTreeState,
    makeEmptyStoreState,
    getNextTreeStateVersion
  };
  function unionSets(...sets) {
    const result = new Set();
    for (const set2 of sets) {
      for (const value of set2) {
        result.add(value);
      }
    }
    return result;
  }
  var Recoil_unionSets = unionSets;
  function someSet(set2, callback, context) {
    const iterator = set2.entries();
    let current = iterator.next();
    while (!current.done) {
      const entry = current.value;
      if (callback.call(context, entry[1], entry[0], set2)) {
        return true;
      }
      current = iterator.next();
    }
    return false;
  }
  var Recoil_someSet = someSet;
  var {
    cleanUpNode: cleanUpNode$1
  } = Recoil_FunctionalCore;
  var {
    deleteNodeConfigIfPossible: deleteNodeConfigIfPossible$1,
    getNode: getNode$2
  } = Recoil_Node;
  var {
    RetentionZone: RetentionZone$2
  } = Recoil_RetentionZone;
  var emptySet$1 = new Set();
  function releaseRetainablesNowOnCurrentTree(store2, retainables) {
    const storeState = store2.getState();
    const treeState = storeState.currentTree;
    if (storeState.nextTree) {
      Recoil_recoverableViolation("releaseNodesNowOnCurrentTree should only be called at the end of a batch");
      return;
    }
    const nodes2 = new Set();
    for (const r of retainables) {
      if (r instanceof RetentionZone$2) {
        for (const n of nodesRetainedByZone(storeState, r)) {
          nodes2.add(n);
        }
      } else {
        nodes2.add(r);
      }
    }
    const releasableNodes = findReleasableNodes(store2, nodes2);
    for (const node of releasableNodes) {
      releaseNode(store2, treeState, node);
    }
  }
  function findReleasableNodes(store2, searchFromNodes) {
    const storeState = store2.getState();
    const treeState = storeState.currentTree;
    const graph2 = store2.getGraph(treeState.version);
    const releasableNodes = new Set();
    const nonReleasableNodes = new Set();
    findReleasableNodesInner(searchFromNodes);
    return releasableNodes;
    function findReleasableNodesInner(searchFromNodes2) {
      const releasableNodesFoundThisIteration = new Set();
      const downstreams = getDownstreamNodesInTopologicalOrder(store2, treeState, searchFromNodes2, releasableNodes, nonReleasableNodes);
      for (const node of downstreams) {
        var _storeState$retention;
        if (getNode$2(node).retainedBy === "recoilRoot") {
          nonReleasableNodes.add(node);
          continue;
        }
        if (((_storeState$retention = storeState.retention.referenceCounts.get(node)) !== null && _storeState$retention !== void 0 ? _storeState$retention : 0) > 0) {
          nonReleasableNodes.add(node);
          continue;
        }
        if (zonesThatCouldRetainNode(node).some((z) => storeState.retention.referenceCounts.get(z))) {
          nonReleasableNodes.add(node);
          continue;
        }
        const nodeChildren = graph2.nodeToNodeSubscriptions.get(node);
        if (nodeChildren && Recoil_someSet(nodeChildren, (child) => nonReleasableNodes.has(child))) {
          nonReleasableNodes.add(node);
          continue;
        }
        releasableNodes.add(node);
        releasableNodesFoundThisIteration.add(node);
      }
      const parents = new Set();
      for (const node of releasableNodesFoundThisIteration) {
        for (const parent of (_graph$nodeDeps$get = graph2.nodeDeps.get(node)) !== null && _graph$nodeDeps$get !== void 0 ? _graph$nodeDeps$get : emptySet$1) {
          var _graph$nodeDeps$get;
          if (!releasableNodes.has(parent)) {
            parents.add(parent);
          }
        }
      }
      if (parents.size) {
        findReleasableNodesInner(parents);
      }
    }
  }
  function getDownstreamNodesInTopologicalOrder(store2, treeState, nodes2, doNotDescendInto1, doNotDescendInto2) {
    const graph2 = store2.getGraph(treeState.version);
    const answer = [];
    const visited = new Set();
    while (nodes2.size > 0) {
      visit(Recoil_nullthrows(nodes2.values().next().value));
    }
    return answer;
    function visit(node) {
      if (doNotDescendInto1.has(node) || doNotDescendInto2.has(node)) {
        nodes2.delete(node);
        return;
      }
      if (visited.has(node)) {
        return;
      }
      const children = graph2.nodeToNodeSubscriptions.get(node);
      if (children) {
        for (const child of children) {
          visit(child);
        }
      }
      visited.add(node);
      nodes2.delete(node);
      answer.push(node);
    }
  }
  function releaseNode(store2, treeState, node) {
    if (!Recoil_gkx_1("recoil_memory_managament_2020")) {
      return;
    }
    cleanUpNode$1(store2, node);
    const storeState = store2.getState();
    storeState.knownAtoms.delete(node);
    storeState.knownSelectors.delete(node);
    storeState.nodeTransactionSubscriptions.delete(node);
    storeState.retention.referenceCounts.delete(node);
    const zones = zonesThatCouldRetainNode(node);
    for (const zone of zones) {
      var _storeState$retention2;
      (_storeState$retention2 = storeState.retention.nodesRetainedByZone.get(zone)) === null || _storeState$retention2 === void 0 ? void 0 : _storeState$retention2.delete(node);
    }
    treeState.atomValues.delete(node);
    treeState.dirtyAtoms.delete(node);
    treeState.nonvalidatedAtoms.delete(node);
    const graph2 = storeState.graphsByVersion.get(treeState.version);
    if (graph2) {
      const deps = graph2.nodeDeps.get(node);
      if (deps !== void 0) {
        graph2.nodeDeps.delete(node);
        for (const dep of deps) {
          var _graph$nodeToNodeSubs;
          (_graph$nodeToNodeSubs = graph2.nodeToNodeSubscriptions.get(dep)) === null || _graph$nodeToNodeSubs === void 0 ? void 0 : _graph$nodeToNodeSubs.delete(node);
        }
      }
      graph2.nodeToNodeSubscriptions.delete(node);
    }
    deleteNodeConfigIfPossible$1(node);
  }
  function nodesRetainedByZone(storeState, zone) {
    var _storeState$retention3;
    return (_storeState$retention3 = storeState.retention.nodesRetainedByZone.get(zone)) !== null && _storeState$retention3 !== void 0 ? _storeState$retention3 : emptySet$1;
  }
  function zonesThatCouldRetainNode(node) {
    const retainedBy = getNode$2(node).retainedBy;
    if (retainedBy === void 0 || retainedBy === "components" || retainedBy === "recoilRoot") {
      return [];
    } else if (retainedBy instanceof RetentionZone$2) {
      return [retainedBy];
    } else {
      return retainedBy;
    }
  }
  function scheduleOrPerformPossibleReleaseOfRetainable(store2, retainable) {
    const state = store2.getState();
    if (state.nextTree) {
      state.retention.retainablesToCheckForRelease.add(retainable);
    } else {
      releaseRetainablesNowOnCurrentTree(store2, new Set([retainable]));
    }
  }
  function updateRetainCount(store2, retainable, delta) {
    var _map$get;
    if (!Recoil_gkx_1("recoil_memory_managament_2020")) {
      return;
    }
    const map = store2.getState().retention.referenceCounts;
    const newCount = ((_map$get = map.get(retainable)) !== null && _map$get !== void 0 ? _map$get : 0) + delta;
    if (newCount === 0) {
      updateRetainCountToZero(store2, retainable);
    } else {
      map.set(retainable, newCount);
    }
  }
  function updateRetainCountToZero(store2, retainable) {
    if (!Recoil_gkx_1("recoil_memory_managament_2020")) {
      return;
    }
    const map = store2.getState().retention.referenceCounts;
    map.delete(retainable);
    scheduleOrPerformPossibleReleaseOfRetainable(store2, retainable);
  }
  function releaseScheduledRetainablesNow(store2) {
    if (!Recoil_gkx_1("recoil_memory_managament_2020")) {
      return;
    }
    const state = store2.getState();
    releaseRetainablesNowOnCurrentTree(store2, state.retention.retainablesToCheckForRelease);
    state.retention.retainablesToCheckForRelease.clear();
  }
  function retainedByOptionWithDefault(r) {
    return r === void 0 ? "recoilRoot" : r;
  }
  var Recoil_Retention = {
    updateRetainCount,
    updateRetainCountToZero,
    releaseScheduledRetainablesNow,
    retainedByOptionWithDefault
  };
  function* concatIterables(iters) {
    for (const iter of iters) {
      for (const val of iter) {
        yield val;
      }
    }
  }
  var Recoil_concatIterables = concatIterables;
  var isSSR = typeof window === "undefined";
  var isReactNative = typeof navigator !== "undefined" && navigator.product === "ReactNative";
  var Recoil_Environment = {
    isSSR,
    isReactNative
  };
  var {
    isSSR: isSSR$1
  } = Recoil_Environment;
  var {
    batchUpdates: batchUpdates$1
  } = Recoil_Batching;
  var {
    initializeNodeIfNewToStore: initializeNodeIfNewToStore$1,
    peekNodeInfo: peekNodeInfo$1
  } = Recoil_FunctionalCore;
  var {
    graph: graph$2
  } = Recoil_Graph;
  var {
    DEFAULT_VALUE: DEFAULT_VALUE$1,
    recoilValues: recoilValues$1,
    recoilValuesForKeys: recoilValuesForKeys$2
  } = Recoil_Node;
  var {
    AbstractRecoilValue: AbstractRecoilValue$2,
    getRecoilValueAsLoadable: getRecoilValueAsLoadable$1,
    setRecoilValue: setRecoilValue$1,
    setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$1
  } = Recoil_RecoilValueInterface;
  var {
    updateRetainCount: updateRetainCount$1
  } = Recoil_Retention;
  var {
    getNextTreeStateVersion: getNextTreeStateVersion$1,
    makeEmptyStoreState: makeEmptyStoreState$1
  } = Recoil_State;
  var retainWarning = `
Recoil Snapshots only last for the duration of the callback they are provided to. To keep a Snapshot longer, do this:

  const release = snapshot.retain();
  try {
    await useTheSnapshotAsynchronously(snapshot);
  } finally {
    release();
  }

This is currently a DEV-only warning but will become a thrown exception in the next release of Recoil.
`;
  var Snapshot = class {
    constructor(storeState) {
      _defineProperty(this, "_store", void 0);
      _defineProperty(this, "_refCount", 0);
      _defineProperty(this, "getLoadable", (recoilValue) => {
        this.checkRefCount_INTERNAL();
        return getRecoilValueAsLoadable$1(this._store, recoilValue);
      });
      _defineProperty(this, "getPromise", (recoilValue) => {
        this.checkRefCount_INTERNAL();
        return this.getLoadable(recoilValue).toPromise();
      });
      _defineProperty(this, "getNodes_UNSTABLE", (opt) => {
        this.checkRefCount_INTERNAL();
        if ((opt === null || opt === void 0 ? void 0 : opt.isModified) === true) {
          if ((opt === null || opt === void 0 ? void 0 : opt.isInitialized) === false) {
            return [];
          }
          const state = this._store.getState().currentTree;
          return recoilValuesForKeys$2(state.dirtyAtoms);
        }
        const knownAtoms = this._store.getState().knownAtoms;
        const knownSelectors = this._store.getState().knownSelectors;
        return (opt === null || opt === void 0 ? void 0 : opt.isInitialized) == null ? recoilValues$1.values() : opt.isInitialized === true ? recoilValuesForKeys$2(Recoil_concatIterables([this._store.getState().knownAtoms, this._store.getState().knownSelectors])) : Recoil_filterIterable(recoilValues$1.values(), ({
          key
        }) => !knownAtoms.has(key) && !knownSelectors.has(key));
      });
      _defineProperty(this, "getInfo_UNSTABLE", ({
        key
      }) => {
        this.checkRefCount_INTERNAL();
        return peekNodeInfo$1(this._store, this._store.getState().currentTree, key);
      });
      _defineProperty(this, "map", (mapper) => {
        this.checkRefCount_INTERNAL();
        const mutableSnapshot = new MutableSnapshot(this, batchUpdates$1);
        mapper(mutableSnapshot);
        return cloneSnapshot(mutableSnapshot.getStore_INTERNAL());
      });
      _defineProperty(this, "mapBatched_UNSTABLE", (mapper) => {
        this.checkRefCount_INTERNAL();
        const mutableSnapshot = new MutableSnapshot(this, (cb) => cb());
        batchUpdates$1(() => {
          mapper(mutableSnapshot);
        });
        return cloneSnapshot(mutableSnapshot.getStore_INTERNAL());
      });
      _defineProperty(this, "asyncMap", async (mapper) => {
        this.checkRefCount_INTERNAL();
        const mutableSnapshot = new MutableSnapshot(this, batchUpdates$1);
        await mapper(mutableSnapshot);
        return cloneSnapshot(mutableSnapshot.getStore_INTERNAL());
      });
      this._store = {
        getState: () => storeState,
        replaceState: (replacer) => {
          storeState.currentTree = replacer(storeState.currentTree);
        },
        getGraph: (version) => {
          const graphs = storeState.graphsByVersion;
          if (graphs.has(version)) {
            return Recoil_nullthrows(graphs.get(version));
          }
          const newGraph = graph$2();
          graphs.set(version, newGraph);
          return newGraph;
        },
        subscribeToTransactions: () => ({
          release: () => {
          }
        }),
        addTransactionMetadata: () => {
          throw new Error("Cannot subscribe to Snapshots");
        }
      };
      for (const nodeKey of this._store.getState().nodeCleanupFunctions.keys()) {
        initializeNodeIfNewToStore$1(this._store, storeState.currentTree, nodeKey, "get");
        updateRetainCount$1(this._store, nodeKey, 1);
      }
      this.retain();
      this.autorelease_INTERNAL();
    }
    retain() {
      if (!Recoil_gkx_1("recoil_memory_managament_2020")) {
        return () => void 0;
      }
      this._refCount++;
      let released = false;
      return () => {
        if (!released) {
          released = true;
          this.release_INTERNAL();
        }
      };
    }
    autorelease_INTERNAL() {
      if (!Recoil_gkx_1("recoil_memory_managament_2020")) {
        return;
      }
      if (!isSSR$1) {
        window.setTimeout(() => this.release_INTERNAL(), 0);
      }
    }
    release_INTERNAL() {
      if (!Recoil_gkx_1("recoil_memory_managament_2020")) {
        return;
      }
      this._refCount--;
      if (this._refCount === 0)
        ;
    }
    checkRefCount_INTERNAL() {
      if (Recoil_gkx_1("recoil_memory_managament_2020") && this._refCount <= 0) {
        if (true) {
          Recoil_recoverableViolation(retainWarning);
        }
      }
    }
    getStore_INTERNAL() {
      this.checkRefCount_INTERNAL();
      return this._store;
    }
    getID() {
      this.checkRefCount_INTERNAL();
      return this.getID_INTERNAL();
    }
    getID_INTERNAL() {
      this.checkRefCount_INTERNAL();
      return this._store.getState().currentTree.stateID;
    }
  };
  function cloneStoreState(store2, treeState, bumpVersion = false) {
    const storeState = store2.getState();
    const version = bumpVersion ? getNextTreeStateVersion$1() : treeState.version;
    return {
      currentTree: bumpVersion ? {
        version,
        stateID: version,
        transactionMetadata: {
          ...treeState.transactionMetadata
        },
        dirtyAtoms: new Set(treeState.dirtyAtoms),
        atomValues: treeState.atomValues.clone(),
        nonvalidatedAtoms: treeState.nonvalidatedAtoms.clone()
      } : treeState,
      commitDepth: 0,
      nextTree: null,
      previousTree: null,
      knownAtoms: new Set(storeState.knownAtoms),
      knownSelectors: new Set(storeState.knownSelectors),
      transactionSubscriptions: new Map(),
      nodeTransactionSubscriptions: new Map(),
      nodeToComponentSubscriptions: new Map(),
      queuedComponentCallbacks_DEPRECATED: [],
      suspendedComponentResolvers: new Set(),
      graphsByVersion: new Map().set(version, store2.getGraph(treeState.version)),
      versionsUsedByComponent: new Map(),
      retention: {
        referenceCounts: new Map(),
        nodesRetainedByZone: new Map(),
        retainablesToCheckForRelease: new Set()
      },
      nodeCleanupFunctions: new Map()
    };
  }
  function freshSnapshot(initializeState) {
    const snapshot = new Snapshot(makeEmptyStoreState$1());
    return initializeState != null ? snapshot.map(initializeState) : snapshot;
  }
  function cloneSnapshot(store2, version = "current") {
    const storeState = store2.getState();
    const treeState = version === "current" ? storeState.currentTree : Recoil_nullthrows(storeState.previousTree);
    return new Snapshot(cloneStoreState(store2, treeState));
  }
  var MutableSnapshot = class extends Snapshot {
    constructor(snapshot, batch) {
      super(cloneStoreState(snapshot.getStore_INTERNAL(), snapshot.getStore_INTERNAL().getState().currentTree, true));
      _defineProperty(this, "_batch", void 0);
      _defineProperty(this, "set", (recoilState, newValueOrUpdater) => {
        this.checkRefCount_INTERNAL();
        const store2 = this.getStore_INTERNAL();
        this._batch(() => {
          updateRetainCount$1(store2, recoilState.key, 1);
          setRecoilValue$1(this.getStore_INTERNAL(), recoilState, newValueOrUpdater);
        });
      });
      _defineProperty(this, "reset", (recoilState) => {
        this.checkRefCount_INTERNAL();
        const store2 = this.getStore_INTERNAL();
        this._batch(() => {
          updateRetainCount$1(store2, recoilState.key, 1);
          setRecoilValue$1(this.getStore_INTERNAL(), recoilState, DEFAULT_VALUE$1);
        });
      });
      _defineProperty(this, "setUnvalidatedAtomValues_DEPRECATED", (values3) => {
        this.checkRefCount_INTERNAL();
        const store2 = this.getStore_INTERNAL();
        batchUpdates$1(() => {
          for (const [k, v] of values3.entries()) {
            updateRetainCount$1(store2, k, 1);
            setUnvalidatedRecoilValue$1(store2, new AbstractRecoilValue$2(k), v);
          }
        });
      });
      this._batch = batch;
    }
  };
  var Recoil_Snapshot = {
    Snapshot,
    MutableSnapshot,
    freshSnapshot,
    cloneSnapshot
  };
  var Recoil_Snapshot_1 = Recoil_Snapshot.Snapshot;
  var Recoil_Snapshot_2 = Recoil_Snapshot.MutableSnapshot;
  var Recoil_Snapshot_3 = Recoil_Snapshot.freshSnapshot;
  var Recoil_Snapshot_4 = Recoil_Snapshot.cloneSnapshot;
  var Recoil_Snapshot$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    Snapshot: Recoil_Snapshot_1,
    MutableSnapshot: Recoil_Snapshot_2,
    freshSnapshot: Recoil_Snapshot_3,
    cloneSnapshot: Recoil_Snapshot_4
  });
  var {
    getNextTreeStateVersion: getNextTreeStateVersion$2,
    makeEmptyStoreState: makeEmptyStoreState$2
  } = Recoil_State;
  var {
    cleanUpNode: cleanUpNode$2,
    getDownstreamNodes: getDownstreamNodes$2,
    setNodeValue: setNodeValue$2,
    setUnvalidatedAtomValue_DEPRECATED: setUnvalidatedAtomValue_DEPRECATED$1
  } = Recoil_FunctionalCore;
  var {
    graph: graph$3
  } = Recoil_Graph;
  var {
    cloneGraph: cloneGraph$1
  } = Recoil_Graph;
  var {
    applyAtomValueWrites: applyAtomValueWrites$1
  } = Recoil_RecoilValueInterface;
  var {
    releaseScheduledRetainablesNow: releaseScheduledRetainablesNow$1
  } = Recoil_Retention;
  var {
    freshSnapshot: freshSnapshot$1
  } = Recoil_Snapshot$1;
  var {
    useCallback,
    useContext,
    useEffect,
    useMemo,
    useRef,
    useState
  } = import_react.default;
  function notInAContext() {
    throw new Error("This component must be used inside a <RecoilRoot> component.");
  }
  var defaultStore = Object.freeze({
    getState: notInAContext,
    replaceState: notInAContext,
    getGraph: notInAContext,
    subscribeToTransactions: notInAContext,
    addTransactionMetadata: notInAContext
  });
  var stateReplacerIsBeingExecuted = false;
  function startNextTreeIfNeeded(store2) {
    if (stateReplacerIsBeingExecuted) {
      throw new Error("An atom update was triggered within the execution of a state updater function. State updater functions provided to Recoil must be pure functions.");
    }
    const storeState = store2.getState();
    if (storeState.nextTree === null) {
      if (Recoil_gkx_1("recoil_memory_managament_2020") && Recoil_gkx_1("recoil_release_on_cascading_update_killswitch_2021")) {
        if (storeState.commitDepth > 0) {
          releaseScheduledRetainablesNow$1(store2);
        }
      }
      const version = storeState.currentTree.version;
      const nextVersion = getNextTreeStateVersion$2();
      storeState.nextTree = {
        ...storeState.currentTree,
        version: nextVersion,
        stateID: nextVersion,
        dirtyAtoms: new Set(),
        transactionMetadata: {}
      };
      storeState.graphsByVersion.set(nextVersion, cloneGraph$1(Recoil_nullthrows(storeState.graphsByVersion.get(version))));
    }
  }
  var AppContext = import_react.default.createContext({
    current: defaultStore
  });
  var useStoreRef = () => useContext(AppContext);
  var MutableSourceContext = import_react.default.createContext(null);
  function useRecoilMutableSource() {
    const mutableSource = useContext(MutableSourceContext);
    if (mutableSource == null) {
      Recoil_expectationViolation("Attempted to use a Recoil hook outside of a <RecoilRoot>. <RecoilRoot> must be an ancestor of any component that uses Recoil hooks.");
    }
    return mutableSource;
  }
  function notifyComponents(store2, storeState, treeState) {
    const dependentNodes = getDownstreamNodes$2(store2, treeState, treeState.dirtyAtoms);
    for (const key of dependentNodes) {
      const comps = storeState.nodeToComponentSubscriptions.get(key);
      if (comps) {
        for (const [_subID, [_debugName, callback]] of comps) {
          callback(treeState);
        }
      }
    }
  }
  function sendEndOfBatchNotifications(store2) {
    const storeState = store2.getState();
    const treeState = storeState.currentTree;
    const dirtyAtoms = treeState.dirtyAtoms;
    if (dirtyAtoms.size) {
      for (const [key, subscriptions] of storeState.nodeTransactionSubscriptions) {
        if (dirtyAtoms.has(key)) {
          for (const [_, subscription] of subscriptions) {
            subscription(store2);
          }
        }
      }
      for (const [_, subscription] of storeState.transactionSubscriptions) {
        subscription(store2);
      }
      if (!Recoil_gkx_1("recoil_early_rendering_2021") || storeState.suspendedComponentResolvers.size) {
        notifyComponents(store2, storeState, treeState);
        storeState.suspendedComponentResolvers.forEach((cb) => cb());
        storeState.suspendedComponentResolvers.clear();
      }
    }
    storeState.queuedComponentCallbacks_DEPRECATED.forEach((cb) => cb(treeState));
    storeState.queuedComponentCallbacks_DEPRECATED.splice(0, storeState.queuedComponentCallbacks_DEPRECATED.length);
  }
  function endBatch(storeRef) {
    const storeState = storeRef.current.getState();
    storeState.commitDepth++;
    try {
      const {
        nextTree
      } = storeState;
      if (nextTree === null) {
        return;
      }
      storeState.previousTree = storeState.currentTree;
      storeState.currentTree = nextTree;
      storeState.nextTree = null;
      sendEndOfBatchNotifications(storeRef.current);
      if (storeState.previousTree != null) {
        storeState.graphsByVersion.delete(storeState.previousTree.version);
      } else {
        Recoil_recoverableViolation("Ended batch with no previous state, which is unexpected", "recoil");
      }
      storeState.previousTree = null;
      if (Recoil_gkx_1("recoil_memory_managament_2020")) {
        releaseScheduledRetainablesNow$1(storeRef.current);
      }
    } finally {
      storeState.commitDepth--;
    }
  }
  function Batcher({
    setNotifyBatcherOfChange
  }) {
    const storeRef = useStoreRef();
    const [_, setState] = useState([]);
    setNotifyBatcherOfChange(() => setState({}));
    useEffect(() => {
      Recoil_Queue.enqueueExecution("Batcher", () => {
        endBatch(storeRef);
      });
    });
    useEffect(() => {
      return () => {
        setNotifyBatcherOfChange(() => {
        });
      };
    }, [setNotifyBatcherOfChange]);
    return null;
  }
  if (true) {
    if (typeof window !== "undefined" && !window.$recoilDebugStates) {
      window.$recoilDebugStates = [];
    }
  }
  function initialStoreState_DEPRECATED(store2, initializeState) {
    const initial = makeEmptyStoreState$2();
    initializeState({
      set: (atom2, value) => {
        const state = initial.currentTree;
        const writes = setNodeValue$2(store2, state, atom2.key, value);
        const writtenNodes = new Set(writes.keys());
        const nonvalidatedAtoms = state.nonvalidatedAtoms.clone();
        for (const n of writtenNodes) {
          nonvalidatedAtoms.delete(n);
        }
        initial.currentTree = {
          ...state,
          dirtyAtoms: Recoil_unionSets(state.dirtyAtoms, writtenNodes),
          atomValues: applyAtomValueWrites$1(state.atomValues, writes),
          nonvalidatedAtoms
        };
      },
      setUnvalidatedAtomValues: (atomValues) => {
        atomValues.forEach((v, k) => {
          initial.currentTree = setUnvalidatedAtomValue_DEPRECATED$1(initial.currentTree, k, v);
        });
      }
    });
    return initial;
  }
  function initialStoreState(initializeState) {
    const snapshot = freshSnapshot$1().map(initializeState);
    return snapshot.getStore_INTERNAL().getState();
  }
  var nextID = 0;
  function RecoilRoot_INTERNAL({
    initializeState_DEPRECATED,
    initializeState,
    store_INTERNAL: storeProp,
    children
  }) {
    var _createMutableSource;
    let storeState;
    const getGraph = (version) => {
      const graphs = storeState.current.graphsByVersion;
      if (graphs.has(version)) {
        return Recoil_nullthrows(graphs.get(version));
      }
      const newGraph = graph$3();
      graphs.set(version, newGraph);
      return newGraph;
    };
    const subscribeToTransactions = (callback, key) => {
      if (key == null) {
        const {
          transactionSubscriptions
        } = storeRef.current.getState();
        const id = nextID++;
        transactionSubscriptions.set(id, callback);
        return {
          release: () => {
            transactionSubscriptions.delete(id);
          }
        };
      } else {
        const {
          nodeTransactionSubscriptions
        } = storeRef.current.getState();
        if (!nodeTransactionSubscriptions.has(key)) {
          nodeTransactionSubscriptions.set(key, new Map());
        }
        const id = nextID++;
        Recoil_nullthrows(nodeTransactionSubscriptions.get(key)).set(id, callback);
        return {
          release: () => {
            const subs = nodeTransactionSubscriptions.get(key);
            if (subs) {
              subs.delete(id);
              if (subs.size === 0) {
                nodeTransactionSubscriptions.delete(key);
              }
            }
          }
        };
      }
    };
    const addTransactionMetadata = (metadata) => {
      startNextTreeIfNeeded(storeRef.current);
      for (const k of Object.keys(metadata)) {
        Recoil_nullthrows(storeRef.current.getState().nextTree).transactionMetadata[k] = metadata[k];
      }
    };
    const replaceState = (replacer) => {
      const storeState2 = storeRef.current.getState();
      startNextTreeIfNeeded(storeRef.current);
      const nextTree = Recoil_nullthrows(storeState2.nextTree);
      let replaced;
      try {
        stateReplacerIsBeingExecuted = true;
        replaced = replacer(nextTree);
      } finally {
        stateReplacerIsBeingExecuted = false;
      }
      if (replaced === nextTree) {
        return;
      }
      if (true) {
        if (typeof window !== "undefined") {
          window.$recoilDebugStates.push(replaced);
        }
      }
      storeState2.nextTree = replaced;
      if (Recoil_gkx_1("recoil_early_rendering_2021")) {
        notifyComponents(store2, storeState2, replaced);
      }
      Recoil_nullthrows(notifyBatcherOfChange.current)();
    };
    const notifyBatcherOfChange = useRef(null);
    const setNotifyBatcherOfChange = useCallback((x) => {
      notifyBatcherOfChange.current = x;
    }, [notifyBatcherOfChange]);
    const createMutableSource = (_createMutableSource = import_react.default.createMutableSource) !== null && _createMutableSource !== void 0 ? _createMutableSource : import_react.default.unstable_createMutableSource;
    const store2 = storeProp !== null && storeProp !== void 0 ? storeProp : {
      getState: () => storeState.current,
      replaceState,
      getGraph,
      subscribeToTransactions,
      addTransactionMetadata
    };
    const storeRef = useRef(store2);
    storeState = useRef(initializeState_DEPRECATED != null ? initialStoreState_DEPRECATED(store2, initializeState_DEPRECATED) : initializeState != null ? initialStoreState(initializeState) : makeEmptyStoreState$2());
    const mutableSource = useMemo(() => createMutableSource ? createMutableSource(storeState, () => storeState.current.currentTree.version) : null, [createMutableSource, storeState]);
    useEffect(() => () => {
      for (const atomKey of storeRef.current.getState().knownAtoms) {
        cleanUpNode$2(storeRef.current, atomKey);
      }
    }, []);
    return /* @__PURE__ */ import_react.default.createElement(AppContext.Provider, {
      value: storeRef
    }, /* @__PURE__ */ import_react.default.createElement(MutableSourceContext.Provider, {
      value: mutableSource
    }, /* @__PURE__ */ import_react.default.createElement(Batcher, {
      setNotifyBatcherOfChange
    }), children));
  }
  function RecoilRoot(props) {
    const {
      override,
      ...propsExceptOverride
    } = props;
    const ancestorStoreRef = useStoreRef();
    if (override === false && ancestorStoreRef.current !== defaultStore) {
      return props.children;
    }
    return /* @__PURE__ */ import_react.default.createElement(RecoilRoot_INTERNAL, propsExceptOverride);
  }
  var Recoil_RecoilRoot_react = {
    useStoreRef,
    useRecoilMutableSource,
    RecoilRoot,
    notifyComponents_FOR_TESTING: notifyComponents,
    sendEndOfBatchNotifications_FOR_TESTING: sendEndOfBatchNotifications
  };
  var {
    loadableWithValue: loadableWithValue$1
  } = Recoil_Loadable;
  var {
    DEFAULT_VALUE: DEFAULT_VALUE$2,
    getNode: getNode$3
  } = Recoil_Node;
  var {
    copyTreeState: copyTreeState$1,
    getRecoilValueAsLoadable: getRecoilValueAsLoadable$2,
    invalidateDownstreams: invalidateDownstreams$1,
    writeLoadableToTreeState: writeLoadableToTreeState$1
  } = Recoil_RecoilValueInterface;
  function isAtom(recoilValue) {
    return getNode$3(recoilValue.key).nodeType === "atom";
  }
  var TransactionInterfaceImpl = class {
    constructor(store2, treeState) {
      _defineProperty(this, "_store", void 0);
      _defineProperty(this, "_treeState", void 0);
      _defineProperty(this, "_changes", void 0);
      _defineProperty(this, "get", (recoilValue) => {
        if (this._changes.has(recoilValue.key)) {
          return this._changes.get(recoilValue.key);
        }
        if (!isAtom(recoilValue)) {
          throw new Error("Reading selectors within atomicUpdate is not supported");
        }
        const loadable = getRecoilValueAsLoadable$2(this._store, recoilValue, this._treeState);
        if (loadable.state === "hasValue") {
          return loadable.contents;
        } else if (loadable.state === "hasError") {
          throw loadable.contents;
        } else {
          throw new Error(`Expected Recoil atom ${recoilValue.key} to have a value, but it is in a loading state.`);
        }
      });
      _defineProperty(this, "set", (recoilState, valueOrUpdater) => {
        if (!isAtom(recoilState)) {
          throw new Error("Setting selectors within atomicUpdate is not supported");
        }
        if (typeof valueOrUpdater === "function") {
          const current = this.get(recoilState);
          this._changes.set(recoilState.key, valueOrUpdater(current));
        } else {
          this._changes.set(recoilState.key, valueOrUpdater);
        }
      });
      _defineProperty(this, "reset", (recoilState) => {
        this.set(recoilState, DEFAULT_VALUE$2);
      });
      this._store = store2;
      this._treeState = treeState;
      this._changes = new Map();
    }
    newTreeState_INTERNAL() {
      if (this._changes.size === 0) {
        return this._treeState;
      }
      const newState = copyTreeState$1(this._treeState);
      for (const [k, v] of this._changes) {
        writeLoadableToTreeState$1(newState, k, loadableWithValue$1(v));
      }
      invalidateDownstreams$1(this._store, newState);
      return newState;
    }
  };
  function atomicUpdater(store2) {
    return (fn) => {
      store2.replaceState((treeState) => {
        const changeset = new TransactionInterfaceImpl(store2, treeState);
        fn(changeset);
        return changeset.newTreeState_INTERNAL();
      });
    };
  }
  var Recoil_AtomicUpdates = {
    atomicUpdater
  };
  var Recoil_AtomicUpdates_1 = Recoil_AtomicUpdates.atomicUpdater;
  var Recoil_AtomicUpdates$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    atomicUpdater: Recoil_AtomicUpdates_1
  });
  function filterMap(map, callback) {
    const result = new Map();
    for (const [key, value] of map) {
      if (callback(value, key)) {
        result.set(key, value);
      }
    }
    return result;
  }
  var Recoil_filterMap = filterMap;
  function filterSet(set2, callback) {
    const result = new Set();
    for (const value of set2) {
      if (callback(value)) {
        result.add(value);
      }
    }
    return result;
  }
  var Recoil_filterSet = filterSet;
  function invariant(condition, message) {
    if (!condition) {
      throw new Error(message);
    }
  }
  var invariant_1 = invariant;
  var Recoil_invariant = invariant_1;
  function mergeMaps(...maps) {
    const result = new Map();
    for (let i = 0; i < maps.length; i++) {
      const iterator = maps[i].keys();
      let nextKey;
      while (!(nextKey = iterator.next()).done) {
        result.set(nextKey.value, maps[i].get(nextKey.value));
      }
    }
    return result;
  }
  var Recoil_mergeMaps = mergeMaps;
  function shallowArrayEqual(a, b) {
    if (a === b) {
      return true;
    }
    if (a.length !== b.length) {
      return false;
    }
    for (let i = 0, l = a.length; i < l; i++) {
      if (a[i] !== b[i]) {
        return false;
      }
    }
    return true;
  }
  var Recoil_shallowArrayEqual = shallowArrayEqual;
  var UNKNOWN_FUNCTION = "<unknown>";
  function stackTraceParser(stackString) {
    const lines = stackString.split("\n");
    return lines.reduce((stack, line) => {
      const parseResult = parseChrome(line) || parseWinjs(line) || parseGecko(line) || parseNode(line) || parseJSC(line);
      if (parseResult) {
        stack.push(parseResult);
      }
      return stack;
    }, []);
  }
  var chromeRe = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
  var chromeEvalRe = /\((\S*)(?::(\d+))(?::(\d+))\)/;
  function parseChrome(line) {
    const parts = chromeRe.exec(line);
    if (!parts) {
      return null;
    }
    const isNative = parts[2] && parts[2].indexOf("native") === 0;
    const isEval = parts[2] && parts[2].indexOf("eval") === 0;
    const submatch = chromeEvalRe.exec(parts[2]);
    if (isEval && submatch != null) {
      parts[2] = submatch[1];
      parts[3] = submatch[2];
      parts[4] = submatch[3];
    }
    return {
      file: !isNative ? parts[2] : null,
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: isNative ? [parts[2]] : [],
      lineNumber: parts[3] ? +parts[3] : null,
      column: parts[4] ? +parts[4] : null
    };
  }
  var winjsRe = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
  function parseWinjs(line) {
    const parts = winjsRe.exec(line);
    if (!parts) {
      return null;
    }
    return {
      file: parts[2],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[3],
      column: parts[4] ? +parts[4] : null
    };
  }
  var geckoRe = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i;
  var geckoEvalRe = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
  function parseGecko(line) {
    const parts = geckoRe.exec(line);
    if (!parts) {
      return null;
    }
    const isEval = parts[3] && parts[3].indexOf(" > eval") > -1;
    const submatch = geckoEvalRe.exec(parts[3]);
    if (isEval && submatch != null) {
      parts[3] = submatch[1];
      parts[4] = submatch[2];
      parts[5] = null;
    }
    return {
      file: parts[3],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: parts[2] ? parts[2].split(",") : [],
      lineNumber: parts[4] ? +parts[4] : null,
      column: parts[5] ? +parts[5] : null
    };
  }
  var javaScriptCoreRe = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i;
  function parseJSC(line) {
    const parts = javaScriptCoreRe.exec(line);
    if (!parts) {
      return null;
    }
    return {
      file: parts[3],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[4],
      column: parts[5] ? +parts[5] : null
    };
  }
  var nodeRe = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;
  function parseNode(line) {
    const parts = nodeRe.exec(line);
    if (!parts) {
      return null;
    }
    return {
      file: parts[2],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[3],
      column: parts[4] ? +parts[4] : null
    };
  }
  var Recoil_stackTraceParser = stackTraceParser;
  var {
    useRef: useRef$1
  } = import_react.default;
  function useComponentName() {
    const nameRef = useRef$1();
    if (true) {
      if (Recoil_gkx_1("recoil_infer_component_names")) {
        var _nameRef$current;
        if (nameRef.current === void 0) {
          const frames = Recoil_stackTraceParser(new Error().stack);
          for (const {
            methodName
          } of frames) {
            if (!methodName.match(/\buse[^\b]+$/)) {
              return nameRef.current = methodName;
            }
          }
          nameRef.current = null;
        }
        return (_nameRef$current = nameRef.current) !== null && _nameRef$current !== void 0 ? _nameRef$current : "<unable to determine component name>";
      }
    }
    return "<component name not available>";
  }
  var Recoil_useComponentName = useComponentName;
  var {
    atomicUpdater: atomicUpdater$1
  } = Recoil_AtomicUpdates$1;
  var {
    batchUpdates: batchUpdates$2
  } = Recoil_Batching;
  var {
    DEFAULT_VALUE: DEFAULT_VALUE$3,
    getNode: getNode$4,
    nodes: nodes$1
  } = Recoil_Node;
  var {
    useRecoilMutableSource: useRecoilMutableSource$1,
    useStoreRef: useStoreRef$1
  } = Recoil_RecoilRoot_react;
  var {
    isRecoilValue: isRecoilValue$2
  } = Recoil_RecoilValue$1;
  var {
    AbstractRecoilValue: AbstractRecoilValue$3,
    getRecoilValueAsLoadable: getRecoilValueAsLoadable$3,
    setRecoilValue: setRecoilValue$2,
    setRecoilValueLoadable: setRecoilValueLoadable$1,
    setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$2,
    subscribeToRecoilValue: subscribeToRecoilValue$1
  } = Recoil_RecoilValueInterface;
  var {
    updateRetainCount: updateRetainCount$2
  } = Recoil_Retention;
  var {
    RetentionZone: RetentionZone$3
  } = Recoil_RetentionZone;
  var {
    Snapshot: Snapshot$1,
    cloneSnapshot: cloneSnapshot$1
  } = Recoil_Snapshot$1;
  var {
    setByAddingToSet: setByAddingToSet$2
  } = Recoil_CopyOnWrite;
  var {
    isSSR: isSSR$2
  } = Recoil_Environment;
  var {
    mutableSourceExists: mutableSourceExists$2,
    useMutableSource: useMutableSource$1
  } = Recoil_mutableSource;
  var {
    useCallback: useCallback$1,
    useEffect: useEffect$1,
    useMemo: useMemo$1,
    useRef: useRef$2,
    useState: useState$1
  } = import_react.default;
  var SUSPENSE_TIMEOUT_MS = 12e4;
  function handleLoadable(loadable, recoilValue, storeRef) {
    if (loadable.state === "hasValue") {
      return loadable.contents;
    } else if (loadable.state === "loading") {
      const promise = new Promise((resolve) => {
        storeRef.current.getState().suspendedComponentResolvers.add(resolve);
      });
      throw promise;
    } else if (loadable.state === "hasError") {
      throw loadable.contents;
    } else {
      const err = new Error(`Invalid value of loadable atom "${recoilValue.key}"`);
      throw err;
    }
  }
  function validateRecoilValue(recoilValue, hookName) {
    if (!isRecoilValue$2(recoilValue)) {
      throw new Error(`Invalid argument to ${hookName}: expected an atom or selector but got ${String(recoilValue)}`);
    }
  }
  function useRecoilInterface_DEPRECATED() {
    const storeRef = useStoreRef$1();
    const [_, forceUpdate] = useState$1([]);
    const recoilValuesUsed = useRef$2(new Set());
    recoilValuesUsed.current = new Set();
    const previousSubscriptions = useRef$2(new Set());
    const subscriptions = useRef$2(new Map());
    const unsubscribeFrom = useCallback$1((key) => {
      const sub = subscriptions.current.get(key);
      if (sub) {
        sub.release();
        subscriptions.current.delete(key);
      }
    }, [subscriptions]);
    const componentName = Recoil_useComponentName();
    useEffect$1(() => {
      const store2 = storeRef.current;
      function updateState(_state, key) {
        if (!subscriptions.current.has(key)) {
          return;
        }
        forceUpdate([]);
      }
      Recoil_differenceSets(recoilValuesUsed.current, previousSubscriptions.current).forEach((key) => {
        if (subscriptions.current.has(key)) {
          Recoil_expectationViolation(`Double subscription to RecoilValue "${key}"`);
          return;
        }
        const sub = subscribeToRecoilValue$1(store2, new AbstractRecoilValue$3(key), (state2) => {
          updateState(state2, key);
        }, componentName);
        subscriptions.current.set(key, sub);
        const state = store2.getState();
        if (state.nextTree) {
          store2.getState().queuedComponentCallbacks_DEPRECATED.push(() => {
            updateState(store2.getState(), key);
          });
        } else {
          updateState(store2.getState(), key);
        }
      });
      Recoil_differenceSets(previousSubscriptions.current, recoilValuesUsed.current).forEach((key) => {
        unsubscribeFrom(key);
      });
      previousSubscriptions.current = recoilValuesUsed.current;
    });
    useEffect$1(() => {
      const subs = subscriptions.current;
      return () => subs.forEach((_2, key) => unsubscribeFrom(key));
    }, [unsubscribeFrom]);
    return useMemo$1(() => {
      function useSetRecoilState2(recoilState) {
        if (true) {
          validateRecoilValue(recoilState, "useSetRecoilState");
        }
        return (newValueOrUpdater) => {
          setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);
        };
      }
      function useResetRecoilState2(recoilState) {
        if (true) {
          validateRecoilValue(recoilState, "useResetRecoilState");
        }
        return () => setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$3);
      }
      function useRecoilValueLoadable2(recoilValue) {
        var _storeState$nextTree;
        if (true) {
          validateRecoilValue(recoilValue, "useRecoilValueLoadable");
        }
        if (!recoilValuesUsed.current.has(recoilValue.key)) {
          recoilValuesUsed.current = setByAddingToSet$2(recoilValuesUsed.current, recoilValue.key);
        }
        const storeState = storeRef.current.getState();
        return getRecoilValueAsLoadable$3(storeRef.current, recoilValue, Recoil_gkx_1("recoil_early_rendering_2021") ? (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree : storeState.currentTree);
      }
      function useRecoilValue2(recoilValue) {
        if (true) {
          validateRecoilValue(recoilValue, "useRecoilValue");
        }
        const loadable = useRecoilValueLoadable2(recoilValue);
        return handleLoadable(loadable, recoilValue, storeRef);
      }
      function useRecoilState2(recoilState) {
        if (true) {
          validateRecoilValue(recoilState, "useRecoilState");
        }
        return [useRecoilValue2(recoilState), useSetRecoilState2(recoilState)];
      }
      function useRecoilStateLoadable2(recoilState) {
        if (true) {
          validateRecoilValue(recoilState, "useRecoilStateLoadable");
        }
        return [useRecoilValueLoadable2(recoilState), useSetRecoilState2(recoilState)];
      }
      return {
        getRecoilValue: useRecoilValue2,
        getRecoilValueLoadable: useRecoilValueLoadable2,
        getRecoilState: useRecoilState2,
        getRecoilStateLoadable: useRecoilStateLoadable2,
        getSetRecoilState: useSetRecoilState2,
        getResetRecoilState: useResetRecoilState2
      };
    }, [recoilValuesUsed, storeRef]);
  }
  var recoilComponentGetRecoilValueCount_FOR_TESTING = {
    current: 0
  };
  function useRecoilValueLoadable_MUTABLESOURCE(recoilValue) {
    if (true) {
      validateRecoilValue(recoilValue, "useRecoilValueLoadable");
    }
    const storeRef = useStoreRef$1();
    const getLoadable = useCallback$1(() => {
      var _storeState$nextTree2;
      const store2 = storeRef.current;
      const storeState = store2.getState();
      const treeState = Recoil_gkx_1("recoil_early_rendering_2021") ? (_storeState$nextTree2 = storeState.nextTree) !== null && _storeState$nextTree2 !== void 0 ? _storeState$nextTree2 : storeState.currentTree : storeState.currentTree;
      return getRecoilValueAsLoadable$3(store2, recoilValue, treeState);
    }, [storeRef, recoilValue]);
    const getLoadableWithTesting = useCallback$1(() => {
      if (true) {
        recoilComponentGetRecoilValueCount_FOR_TESTING.current++;
      }
      return getLoadable();
    }, [getLoadable]);
    const componentName = Recoil_useComponentName();
    const subscribe = useCallback$1((_storeState, callback) => {
      const store2 = storeRef.current;
      const subscription = subscribeToRecoilValue$1(store2, recoilValue, () => {
        if (!Recoil_gkx_1("recoil_suppress_rerender_in_callback")) {
          return callback();
        }
        const newLoadable = getLoadable();
        if (!prevLoadableRef.current.is(newLoadable)) {
          callback();
        }
        prevLoadableRef.current = newLoadable;
      }, componentName);
      return subscription.release;
    }, [storeRef, recoilValue, componentName, getLoadable]);
    const source = useRecoilMutableSource$1();
    const loadable = useMutableSource$1(source, getLoadableWithTesting, subscribe);
    const prevLoadableRef = useRef$2(loadable);
    useEffect$1(() => {
      prevLoadableRef.current = loadable;
    });
    return loadable;
  }
  function useRecoilValueLoadable_LEGACY(recoilValue) {
    if (true) {
      validateRecoilValue(recoilValue, "useRecoilValueLoadable");
    }
    const storeRef = useStoreRef$1();
    const [_, forceUpdate] = useState$1([]);
    const componentName = Recoil_useComponentName();
    useEffect$1(() => {
      const store2 = storeRef.current;
      const storeState = store2.getState();
      const subscription = subscribeToRecoilValue$1(store2, recoilValue, (_state) => {
        var _prevLoadableRef$curr;
        if (!Recoil_gkx_1("recoil_suppress_rerender_in_callback")) {
          return forceUpdate([]);
        }
        const newLoadable = getRecoilValueAsLoadable$3(store2, recoilValue, store2.getState().currentTree);
        if (!((_prevLoadableRef$curr = prevLoadableRef.current) === null || _prevLoadableRef$curr === void 0 ? void 0 : _prevLoadableRef$curr.is(newLoadable))) {
          forceUpdate(newLoadable);
        }
        prevLoadableRef.current = newLoadable;
      }, componentName);
      if (storeState.nextTree) {
        store2.getState().queuedComponentCallbacks_DEPRECATED.push(() => {
          prevLoadableRef.current = null;
          forceUpdate([]);
        });
      } else {
        var _prevLoadableRef$curr2;
        if (!Recoil_gkx_1("recoil_suppress_rerender_in_callback")) {
          return forceUpdate([]);
        }
        const newLoadable = getRecoilValueAsLoadable$3(store2, recoilValue, store2.getState().currentTree);
        if (!((_prevLoadableRef$curr2 = prevLoadableRef.current) === null || _prevLoadableRef$curr2 === void 0 ? void 0 : _prevLoadableRef$curr2.is(newLoadable))) {
          forceUpdate(newLoadable);
        }
        prevLoadableRef.current = newLoadable;
      }
      return subscription.release;
    }, [componentName, recoilValue, storeRef]);
    const loadable = getRecoilValueAsLoadable$3(storeRef.current, recoilValue);
    const prevLoadableRef = useRef$2(loadable);
    useEffect$1(() => {
      prevLoadableRef.current = loadable;
    });
    return loadable;
  }
  function useRecoilValueLoadable(recoilValue) {
    if (Recoil_gkx_1("recoil_memory_managament_2020")) {
      useRetain(recoilValue);
    }
    if (mutableSourceExists$2()) {
      return useRecoilValueLoadable_MUTABLESOURCE(recoilValue);
    } else {
      return useRecoilValueLoadable_LEGACY(recoilValue);
    }
  }
  function useRecoilValue(recoilValue) {
    if (true) {
      validateRecoilValue(recoilValue, "useRecoilValue");
    }
    const storeRef = useStoreRef$1();
    const loadable = useRecoilValueLoadable(recoilValue);
    return handleLoadable(loadable, recoilValue, storeRef);
  }
  function useSetRecoilState(recoilState) {
    if (true) {
      validateRecoilValue(recoilState, "useSetRecoilState");
    }
    const storeRef = useStoreRef$1();
    return useCallback$1((newValueOrUpdater) => {
      setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);
    }, [storeRef, recoilState]);
  }
  function useResetRecoilState(recoilState) {
    if (true) {
      validateRecoilValue(recoilState, "useResetRecoilState");
    }
    const storeRef = useStoreRef$1();
    return useCallback$1(() => {
      setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$3);
    }, [storeRef, recoilState]);
  }
  function useRecoilState(recoilState) {
    if (true) {
      validateRecoilValue(recoilState, "useRecoilState");
    }
    return [useRecoilValue(recoilState), useSetRecoilState(recoilState)];
  }
  function useRecoilStateLoadable(recoilState) {
    if (true) {
      validateRecoilValue(recoilState, "useRecoilStateLoadable");
    }
    return [useRecoilValueLoadable(recoilState), useSetRecoilState(recoilState)];
  }
  function useTransactionSubscription(callback) {
    const storeRef = useStoreRef$1();
    useEffect$1(() => {
      const sub = storeRef.current.subscribeToTransactions(callback);
      return sub.release;
    }, [callback, storeRef]);
  }
  function externallyVisibleAtomValuesInState(state) {
    const atomValues = state.atomValues.toMap();
    const persistedAtomContentsValues = Recoil_mapMap(Recoil_filterMap(atomValues, (v, k) => {
      const node = getNode$4(k);
      const persistence = node.persistence_UNSTABLE;
      return persistence != null && persistence.type !== "none" && v.state === "hasValue";
    }), (v) => v.contents);
    return Recoil_mergeMaps(state.nonvalidatedAtoms.toMap(), persistedAtomContentsValues);
  }
  function useTransactionObservation_DEPRECATED(callback) {
    useTransactionSubscription(useCallback$1((store2) => {
      let previousTree = store2.getState().previousTree;
      const currentTree = store2.getState().currentTree;
      if (!previousTree) {
        Recoil_recoverableViolation("Transaction subscribers notified without a previous tree being present -- this is a bug in Recoil");
        previousTree = store2.getState().currentTree;
      }
      const atomValues = externallyVisibleAtomValuesInState(currentTree);
      const previousAtomValues = externallyVisibleAtomValuesInState(previousTree);
      const atomInfo = Recoil_mapMap(nodes$1, (node) => {
        var _node$persistence_UNS, _node$persistence_UNS2, _node$persistence_UNS3, _node$persistence_UNS4;
        return {
          persistence_UNSTABLE: {
            type: (_node$persistence_UNS = (_node$persistence_UNS2 = node.persistence_UNSTABLE) === null || _node$persistence_UNS2 === void 0 ? void 0 : _node$persistence_UNS2.type) !== null && _node$persistence_UNS !== void 0 ? _node$persistence_UNS : "none",
            backButton: (_node$persistence_UNS3 = (_node$persistence_UNS4 = node.persistence_UNSTABLE) === null || _node$persistence_UNS4 === void 0 ? void 0 : _node$persistence_UNS4.backButton) !== null && _node$persistence_UNS3 !== void 0 ? _node$persistence_UNS3 : false
          }
        };
      });
      const modifiedAtoms = Recoil_filterSet(currentTree.dirtyAtoms, (k) => atomValues.has(k) || previousAtomValues.has(k));
      callback({
        atomValues,
        previousAtomValues,
        atomInfo,
        modifiedAtoms,
        transactionMetadata: {
          ...currentTree.transactionMetadata
        }
      });
    }, [callback]));
  }
  function useRecoilTransactionObserver(callback) {
    useTransactionSubscription(useCallback$1((store2) => {
      const snapshot = cloneSnapshot$1(store2, "current");
      const previousSnapshot = cloneSnapshot$1(store2, "previous");
      callback({
        snapshot,
        previousSnapshot
      });
    }, [callback]));
  }
  function usePrevious(value) {
    const ref = useRef$2();
    useEffect$1(() => {
      ref.current = value;
    });
    return ref.current;
  }
  function useRecoilSnapshot() {
    const storeRef = useStoreRef$1();
    const [snapshot, setSnapshot] = useState$1(() => cloneSnapshot$1(storeRef.current));
    const previousSnapshot = usePrevious(snapshot);
    const timeoutID = useRef$2();
    useEffect$1(() => {
      if (timeoutID.current && !isSSR$2) {
        window.clearTimeout(timeoutID.current);
      }
      return snapshot.retain();
    }, [snapshot]);
    useTransactionSubscription(useCallback$1((store2) => setSnapshot(cloneSnapshot$1(store2)), []));
    if (previousSnapshot !== snapshot && !isSSR$2) {
      if (timeoutID.current) {
        previousSnapshot === null || previousSnapshot === void 0 ? void 0 : previousSnapshot.release_INTERNAL();
        window.clearTimeout(timeoutID.current);
      }
      snapshot.retain();
      timeoutID.current = window.setTimeout(() => {
        snapshot.release_INTERNAL();
        timeoutID.current = null;
      }, SUSPENSE_TIMEOUT_MS);
    }
    return snapshot;
  }
  function useGotoRecoilSnapshot() {
    const storeRef = useStoreRef$1();
    return useCallback$1((snapshot) => {
      var _storeState$nextTree3;
      const storeState = storeRef.current.getState();
      const prev = (_storeState$nextTree3 = storeState.nextTree) !== null && _storeState$nextTree3 !== void 0 ? _storeState$nextTree3 : storeState.currentTree;
      const next = snapshot.getStore_INTERNAL().getState().currentTree;
      batchUpdates$2(() => {
        const keysToUpdate = new Set();
        for (const keys2 of [prev.atomValues.keys(), next.atomValues.keys()]) {
          for (const key of keys2) {
            var _prev$atomValues$get, _next$atomValues$get;
            if (((_prev$atomValues$get = prev.atomValues.get(key)) === null || _prev$atomValues$get === void 0 ? void 0 : _prev$atomValues$get.contents) !== ((_next$atomValues$get = next.atomValues.get(key)) === null || _next$atomValues$get === void 0 ? void 0 : _next$atomValues$get.contents) && getNode$4(key).shouldRestoreFromSnapshots) {
              keysToUpdate.add(key);
            }
          }
        }
        keysToUpdate.forEach((key) => {
          setRecoilValueLoadable$1(storeRef.current, new AbstractRecoilValue$3(key), next.atomValues.has(key) ? Recoil_nullthrows(next.atomValues.get(key)) : DEFAULT_VALUE$3);
        });
        storeRef.current.replaceState((state) => {
          return {
            ...state,
            stateID: snapshot.getID_INTERNAL()
          };
        });
      });
    }, [storeRef]);
  }
  function useSetUnvalidatedAtomValues() {
    const storeRef = useStoreRef$1();
    return (values3, transactionMetadata = {}) => {
      batchUpdates$2(() => {
        storeRef.current.addTransactionMetadata(transactionMetadata);
        values3.forEach((value, key) => setUnvalidatedRecoilValue$2(storeRef.current, new AbstractRecoilValue$3(key), value));
      });
    };
  }
  var Sentinel = class {
  };
  var SENTINEL = new Sentinel();
  function useRecoilCallback(fn, deps) {
    const storeRef = useStoreRef$1();
    const gotoSnapshot = useGotoRecoilSnapshot();
    return useCallback$1((...args) => {
      function set2(recoilState, newValueOrUpdater) {
        setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);
      }
      function reset(recoilState) {
        setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$3);
      }
      const snapshot = cloneSnapshot$1(storeRef.current);
      const atomicUpdate = atomicUpdater$1(storeRef.current);
      let ret = SENTINEL;
      batchUpdates$2(() => {
        const errMsg = "useRecoilCallback expects a function that returns a function: it accepts a function of the type (RecoilInterface) => T = R and returns a callback function T => R, where RecoilInterface is an object {snapshot, set, ...} and T and R are the argument and return types of the callback you want to create.  Please see the docs at recoiljs.org for details.";
        if (typeof fn !== "function") {
          throw new Error(errMsg);
        }
        const cb = fn({
          set: set2,
          reset,
          snapshot,
          gotoSnapshot,
          transact_UNSTABLE: atomicUpdate
        });
        if (typeof cb !== "function") {
          throw new Error(errMsg);
        }
        ret = cb(...args);
      });
      !!(ret instanceof Sentinel) ? true ? Recoil_invariant(false, "batchUpdates should return immediately") : Recoil_invariant(false) : void 0;
      return ret;
    }, deps != null ? [...deps, storeRef] : void 0);
  }
  function useRetain(toRetain) {
    if (!Recoil_gkx_1("recoil_memory_managament_2020")) {
      return;
    }
    return useRetain_ACTUAL(toRetain);
  }
  function useRetain_ACTUAL(toRetain) {
    const array = Array.isArray(toRetain) ? toRetain : [toRetain];
    const retainables = array.map((a) => a instanceof RetentionZone$3 ? a : a.key);
    const storeRef = useStoreRef$1();
    useEffect$1(() => {
      if (!Recoil_gkx_1("recoil_memory_managament_2020")) {
        return;
      }
      const store2 = storeRef.current;
      if (timeoutID.current && !isSSR$2) {
        window.clearTimeout(timeoutID.current);
        timeoutID.current = null;
      } else {
        for (const r of retainables) {
          updateRetainCount$2(store2, r, 1);
        }
      }
      return () => {
        for (const r of retainables) {
          updateRetainCount$2(store2, r, -1);
        }
      };
    }, [storeRef, ...retainables]);
    const timeoutID = useRef$2();
    const previousRetainables = usePrevious(retainables);
    if (!isSSR$2 && (previousRetainables === void 0 || !Recoil_shallowArrayEqual(previousRetainables, retainables))) {
      const store2 = storeRef.current;
      for (const r of retainables) {
        updateRetainCount$2(store2, r, 1);
      }
      if (previousRetainables) {
        for (const r of previousRetainables) {
          updateRetainCount$2(store2, r, -1);
        }
      }
      if (timeoutID.current) {
        window.clearTimeout(timeoutID.current);
      }
      timeoutID.current = window.setTimeout(() => {
        timeoutID.current = null;
        for (const r of retainables) {
          updateRetainCount$2(store2, r, -1);
        }
      }, SUSPENSE_TIMEOUT_MS);
    }
  }
  function useRecoilTransaction(fn, deps) {
    const storeRef = useStoreRef$1();
    return useMemo$1(() => (...args) => {
      const atomicUpdate = atomicUpdater$1(storeRef.current);
      atomicUpdate((transactionInterface) => {
        fn(transactionInterface)(...args);
      });
    }, deps != null ? [...deps, storeRef] : void 0);
  }
  var Recoil_Hooks = {
    recoilComponentGetRecoilValueCount_FOR_TESTING,
    useGotoRecoilSnapshot,
    useRecoilCallback,
    useRecoilInterface: useRecoilInterface_DEPRECATED,
    useRecoilSnapshot,
    useRecoilState,
    useRecoilStateLoadable,
    useRecoilTransaction,
    useRecoilTransactionObserver,
    useRecoilValue,
    useRecoilValueLoadable,
    useRetain,
    useResetRecoilState,
    useSetRecoilState,
    useSetUnvalidatedAtomValues,
    useTransactionObservation_DEPRECATED,
    useTransactionSubscription_DEPRECATED: useTransactionSubscription
  };
  var {
    peekNodeInfo: peekNodeInfo$2
  } = Recoil_FunctionalCore;
  var {
    useStoreRef: useStoreRef$2
  } = Recoil_RecoilRoot_react;
  function useGetRecoilValueInfo() {
    const storeRef = useStoreRef$2();
    return ({
      key
    }) => peekNodeInfo$2(storeRef.current, storeRef.current.getState().currentTree, key);
  }
  var Recoil_useGetRecoilValueInfo = useGetRecoilValueInfo;
  var {
    RecoilRoot: RecoilRoot$1,
    useStoreRef: useStoreRef$3
  } = Recoil_RecoilRoot_react;
  var {
    useMemo: useMemo$2
  } = import_react.default;
  function useRecoilBridgeAcrossReactRoots() {
    const store2 = useStoreRef$3().current;
    return useMemo$2(() => {
      function RecoilBridge({
        children
      }) {
        return /* @__PURE__ */ import_react.default.createElement(RecoilRoot$1, {
          store_INTERNAL: store2
        }, children);
      }
      return RecoilBridge;
    }, [store2]);
  }
  var Recoil_useRecoilBridgeAcrossReactRoots = useRecoilBridgeAcrossReactRoots;
  function isNode(object) {
    var _ownerDocument, _doc$defaultView;
    if (typeof window === "undefined") {
      return false;
    }
    const doc = object != null ? (_ownerDocument = object.ownerDocument) !== null && _ownerDocument !== void 0 ? _ownerDocument : object : document;
    const defaultView = (_doc$defaultView = doc.defaultView) !== null && _doc$defaultView !== void 0 ? _doc$defaultView : window;
    return !!(object != null && (typeof defaultView.Node === "function" ? object instanceof defaultView.Node : typeof object === "object" && typeof object.nodeType === "number" && typeof object.nodeName === "string"));
  }
  var Recoil_isNode = isNode;
  var {
    isReactNative: isReactNative$1,
    isSSR: isSSR$3
  } = Recoil_Environment;
  function shouldNotBeFrozen(value) {
    if (value === null || typeof value !== "object") {
      return true;
    }
    switch (typeof value.$$typeof) {
      case "symbol":
        return true;
      case "number":
        return true;
    }
    if (value["@@__IMMUTABLE_ITERABLE__@@"] != null || value["@@__IMMUTABLE_KEYED__@@"] != null || value["@@__IMMUTABLE_INDEXED__@@"] != null || value["@@__IMMUTABLE_ORDERED__@@"] != null || value["@@__IMMUTABLE_RECORD__@@"] != null) {
      return true;
    }
    if (Recoil_isNode(value)) {
      return true;
    }
    if (Recoil_isPromise(value)) {
      return true;
    }
    if (value instanceof Error) {
      return true;
    }
    if (ArrayBuffer.isView(value)) {
      return true;
    }
    if (!isSSR$3 && !isReactNative$1 && (value === window || value instanceof Window)) {
      return true;
    }
    return false;
  }
  function deepFreezeValue(value) {
    if (typeof value !== "object" || shouldNotBeFrozen(value)) {
      return;
    }
    Object.freeze(value);
    for (const key in value) {
      if (Object.prototype.hasOwnProperty.call(value, key)) {
        const prop = value[key];
        if (typeof prop === "object" && prop != null && !Object.isFrozen(prop)) {
          deepFreezeValue(prop);
        }
      }
    }
    Object.seal(value);
  }
  var Recoil_deepFreezeValue = deepFreezeValue;
  var TIME_WARNING_THRESHOLD_MS = 15;
  function stringify(x, opt, key) {
    if (typeof x === "string" && !x.includes('"') && !x.includes("\\")) {
      return `"${x}"`;
    }
    switch (typeof x) {
      case "undefined":
        return "";
      case "boolean":
        return x ? "true" : "false";
      case "number":
      case "symbol":
        return String(x);
      case "string":
        return JSON.stringify(x);
      case "function":
        if ((opt === null || opt === void 0 ? void 0 : opt.allowFunctions) !== true) {
          throw new Error("Attempt to serialize function in a Recoil cache key");
        }
        return `__FUNCTION(${x.name})__`;
    }
    if (x === null) {
      return "null";
    }
    if (typeof x !== "object") {
      var _JSON$stringify;
      return (_JSON$stringify = JSON.stringify(x)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : "";
    }
    if (Recoil_isPromise(x)) {
      return "__PROMISE__";
    }
    if (Array.isArray(x)) {
      return `[${x.map((v, i) => stringify(v, opt, i.toString()))}]`;
    }
    if (typeof x.toJSON === "function") {
      return stringify(x.toJSON(key), opt, key);
    }
    if (x instanceof Map) {
      const obj = {};
      for (const [k, v] of x) {
        obj[typeof k === "string" ? k : stringify(k, opt)] = v;
      }
      return stringify(obj, opt, key);
    }
    if (x instanceof Set) {
      return stringify(Array.from(x).sort((a, b) => stringify(a, opt).localeCompare(stringify(b, opt))), opt, key);
    }
    if (Symbol !== void 0 && x[Symbol.iterator] != null && typeof x[Symbol.iterator] === "function") {
      return stringify(Array.from(x), opt, key);
    }
    return `{${Object.keys(x).filter((key2) => x[key2] !== void 0).sort().map((key2) => `${stringify(key2, opt)}:${stringify(x[key2], opt, key2)}`).join(",")}}`;
  }
  function stableStringify(x, opt = {
    allowFunctions: false
  }) {
    if (true) {
      if (typeof window !== "undefined") {
        const startTime = window.performance ? window.performance.now() : 0;
        const str = stringify(x, opt);
        const endTime = window.performance ? window.performance.now() : 0;
        if (endTime - startTime > TIME_WARNING_THRESHOLD_MS) {
          console.groupCollapsed(`Recoil: Spent ${endTime - startTime}ms computing a cache key`);
          console.warn(x, str);
          console.groupEnd();
        }
        return str;
      }
    }
    return stringify(x, opt);
  }
  var Recoil_stableStringify = stableStringify;
  var TreeCache = class {
    constructor(options) {
      var _options$onHit, _options$onSet, _options$mapNodeValue;
      _defineProperty(this, "_numLeafs", void 0);
      _defineProperty(this, "_root", void 0);
      _defineProperty(this, "_onHit", void 0);
      _defineProperty(this, "_onSet", void 0);
      _defineProperty(this, "_mapNodeValue", void 0);
      this._numLeafs = 0;
      this._root = null;
      this._onHit = (_options$onHit = options === null || options === void 0 ? void 0 : options.onHit) !== null && _options$onHit !== void 0 ? _options$onHit : () => {
      };
      this._onSet = (_options$onSet = options === null || options === void 0 ? void 0 : options.onSet) !== null && _options$onSet !== void 0 ? _options$onSet : () => {
      };
      this._mapNodeValue = (_options$mapNodeValue = options === null || options === void 0 ? void 0 : options.mapNodeValue) !== null && _options$mapNodeValue !== void 0 ? _options$mapNodeValue : (val) => val;
    }
    size() {
      return this._numLeafs;
    }
    root() {
      return this._root;
    }
    get(getNodeValue, handlers) {
      var _this$getLeafNode;
      return (_this$getLeafNode = this.getLeafNode(getNodeValue, handlers)) === null || _this$getLeafNode === void 0 ? void 0 : _this$getLeafNode.value;
    }
    getLeafNode(getNodeValue, handlers) {
      return findLeaf(this.root(), (nodeKey) => this._mapNodeValue(getNodeValue(nodeKey)), {
        onNodeVisit: (node) => {
          handlers === null || handlers === void 0 ? void 0 : handlers.onNodeVisit(node);
          if (node.type === "leaf") {
            this._onHit(node);
          }
        }
      });
    }
    set(route, value, handlers) {
      let leafNode;
      const newRoot = addLeaf(this.root(), route.map(([nodeKey, nodeValue]) => [nodeKey, this._mapNodeValue(nodeValue)]), null, value, null, {
        onNodeVisit: (node) => {
          handlers === null || handlers === void 0 ? void 0 : handlers.onNodeVisit(node);
          if (node.type === "leaf") {
            leafNode = node;
          }
        }
      });
      if (!this.root()) {
        this._root = newRoot;
      }
      this._numLeafs++;
      this._onSet(Recoil_nullthrows(leafNode));
    }
    delete(node) {
      if (!this.root()) {
        return false;
      }
      const root = Recoil_nullthrows(this.root());
      const existsInTree = pruneNodeFromTree(root, node, node.parent);
      if (!existsInTree) {
        return false;
      }
      if (node === root || root.type === "branch" && !root.branches.size) {
        this._root = null;
        this._numLeafs = 0;
        return true;
      }
      this._numLeafs -= countDownstreamLeaves(node);
      return true;
    }
    clear() {
      this._numLeafs = 0;
      this._root = null;
    }
  };
  var findLeaf = (root, getNodeValue, handlers) => {
    var _handlers$onNodeVisit;
    if (root == null) {
      return void 0;
    }
    handlers === null || handlers === void 0 ? void 0 : (_handlers$onNodeVisit = handlers.onNodeVisit) === null || _handlers$onNodeVisit === void 0 ? void 0 : _handlers$onNodeVisit.call(handlers, root);
    if (root.type === "leaf") {
      return root;
    }
    const nodeValue = getNodeValue(root.nodeKey);
    return findLeaf(root.branches.get(nodeValue), getNodeValue, handlers);
  };
  var addLeaf = (root, route, parent, value, branchKey, handlers) => {
    var _handlers$onNodeVisit2;
    let node;
    if (root == null) {
      if (route.length === 0) {
        node = {
          type: "leaf",
          value,
          parent,
          branchKey
        };
      } else {
        const [path, ...rest] = route;
        const [nodeKey, nodeValue] = path;
        node = {
          type: "branch",
          nodeKey,
          parent,
          branches: new Map(),
          branchKey
        };
        node.branches.set(nodeValue, addLeaf(null, rest, node, value, nodeValue, handlers));
      }
    } else {
      node = root;
      if (route.length) {
        const [path, ...rest] = route;
        const [nodeKey, nodeValue] = path;
        !(root.type === "branch" && root.nodeKey === nodeKey) ? true ? Recoil_invariant(false, "Existing cache must have a branch midway through the route with matching node key") : Recoil_invariant(false) : void 0;
        root.branches.set(nodeValue, addLeaf(root.branches.get(nodeValue), rest, root, value, nodeValue, handlers));
      }
    }
    handlers === null || handlers === void 0 ? void 0 : (_handlers$onNodeVisit2 = handlers.onNodeVisit) === null || _handlers$onNodeVisit2 === void 0 ? void 0 : _handlers$onNodeVisit2.call(handlers, node);
    return node;
  };
  var pruneNodeFromTree = (root, node, parent) => {
    if (!parent) {
      return root === node;
    }
    parent.branches.delete(node.branchKey);
    return pruneUpstreamBranches(root, parent, parent.parent);
  };
  var pruneUpstreamBranches = (root, branchNode, parent) => {
    if (!parent) {
      return root === branchNode;
    }
    if (branchNode.branches.size === 0) {
      parent.branches.delete(branchNode.branchKey);
    }
    return pruneUpstreamBranches(root, parent, parent.parent);
  };
  var countDownstreamLeaves = (node) => node.type === "leaf" ? 1 : Array.from(node.branches.values()).reduce((sum, currNode) => sum + countDownstreamLeaves(currNode), 0);
  var Recoil_TreeCache = {
    TreeCache
  };
  var Recoil_TreeCache_1 = Recoil_TreeCache.TreeCache;
  var Recoil_TreeCache$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    TreeCache: Recoil_TreeCache_1
  });
  var LRUCache = class {
    constructor(options) {
      var _options$mapKey;
      _defineProperty(this, "_maxSize", void 0);
      _defineProperty(this, "_size", void 0);
      _defineProperty(this, "_head", void 0);
      _defineProperty(this, "_tail", void 0);
      _defineProperty(this, "_map", void 0);
      _defineProperty(this, "_keyMapper", void 0);
      this._maxSize = options.maxSize;
      this._size = 0;
      this._head = null;
      this._tail = null;
      this._map = new Map();
      this._keyMapper = (_options$mapKey = options.mapKey) !== null && _options$mapKey !== void 0 ? _options$mapKey : (v) => v;
    }
    head() {
      return this._head;
    }
    tail() {
      return this._tail;
    }
    size() {
      return this._size;
    }
    maxSize() {
      return this._maxSize;
    }
    has(key) {
      return this._map.has(this._keyMapper(key));
    }
    get(key) {
      const mappedKey = this._keyMapper(key);
      const node = this._map.get(mappedKey);
      if (!node) {
        return void 0;
      }
      this.set(key, node.value);
      return node.value;
    }
    set(key, val) {
      const mappedKey = this._keyMapper(key);
      const existingNode = this._map.get(mappedKey);
      if (existingNode) {
        this.delete(key);
      }
      const head = this.head();
      const node = {
        key,
        right: head,
        left: null,
        value: val
      };
      if (head) {
        head.left = node;
      } else {
        this._tail = node;
      }
      this._map.set(mappedKey, node);
      this._head = node;
      this._size++;
      this._maybeDeleteLRU();
    }
    _maybeDeleteLRU() {
      if (this.size() > this.maxSize()) {
        this.deleteLru();
      }
    }
    deleteLru() {
      const tail = this.tail();
      if (tail) {
        this.delete(tail.key);
      }
    }
    delete(key) {
      const mappedKey = this._keyMapper(key);
      if (!this._size || !this._map.has(mappedKey)) {
        return;
      }
      const node = Recoil_nullthrows(this._map.get(mappedKey));
      const right2 = node.right;
      const left2 = node.left;
      if (right2) {
        right2.left = node.left;
      }
      if (left2) {
        left2.right = node.right;
      }
      if (node === this.head()) {
        this._head = right2;
      }
      if (node === this.tail()) {
        this._tail = left2;
      }
      this._map.delete(mappedKey);
      this._size--;
    }
    clear() {
      this._size = 0;
      this._head = null;
      this._tail = null;
      this._map = new Map();
    }
  };
  var Recoil_LRUCache = {
    LRUCache
  };
  var Recoil_LRUCache_1 = Recoil_LRUCache.LRUCache;
  var Recoil_LRUCache$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    LRUCache: Recoil_LRUCache_1
  });
  var {
    LRUCache: LRUCache$1
  } = Recoil_LRUCache$1;
  var {
    TreeCache: TreeCache$1
  } = Recoil_TreeCache$1;
  function treeCacheLRU(maxSize, mapNodeValue = (v) => v) {
    const lruCache = new LRUCache$1({
      maxSize
    });
    const cache3 = new TreeCache$1({
      mapNodeValue,
      onHit: (node) => {
        lruCache.set(node, true);
      },
      onSet: (node) => {
        const lruNode = lruCache.tail();
        lruCache.set(node, true);
        if (lruNode && cache3.size() > maxSize) {
          cache3.delete(lruNode.key);
        }
      }
    });
    return cache3;
  }
  var Recoil_treeCacheLRU = treeCacheLRU;
  var {
    TreeCache: TreeCache$2
  } = Recoil_TreeCache$1;
  var defaultPolicy = {
    equality: "reference",
    eviction: "keep-all",
    maxSize: Infinity
  };
  function treeCacheFromPolicy({
    equality = defaultPolicy.equality,
    eviction = defaultPolicy.eviction,
    maxSize = defaultPolicy.maxSize
  } = defaultPolicy) {
    const valueMapper = getValueMapper(equality);
    const treeCache = getTreeCache(eviction, maxSize, valueMapper);
    return treeCache;
  }
  function getValueMapper(equality) {
    switch (equality) {
      case "reference":
        return (val) => val;
      case "value":
        return (val) => Recoil_stableStringify(val);
    }
    throw new Error(`Unrecognized equality policy ${equality}`);
  }
  function getTreeCache(eviction, maxSize, mapNodeValue) {
    switch (eviction) {
      case "keep-all":
        return new TreeCache$2({
          mapNodeValue
        });
      case "lru":
        return Recoil_treeCacheLRU(Recoil_nullthrows(maxSize), mapNodeValue);
      case "most-recent":
        return Recoil_treeCacheLRU(1, mapNodeValue);
    }
    throw new Error(`Unrecognized eviction policy ${eviction}`);
  }
  var Recoil_treeCacheFromPolicy = treeCacheFromPolicy;
  function startPerfBlock(_id) {
    return () => null;
  }
  var Recoil_PerformanceTimings = {
    startPerfBlock
  };
  var {
    CANCELED: CANCELED$2,
    Canceled: Canceled$1,
    loadableWithError: loadableWithError$1,
    loadableWithPromise: loadableWithPromise$1,
    loadableWithValue: loadableWithValue$2
  } = Recoil_Loadable;
  var {
    getNodeLoadable: getNodeLoadable$2,
    peekNodeLoadable: peekNodeLoadable$1,
    setNodeValue: setNodeValue$3
  } = Recoil_FunctionalCore;
  var {
    saveDependencyMapToStore: saveDependencyMapToStore$1
  } = Recoil_Graph;
  var {
    DEFAULT_VALUE: DEFAULT_VALUE$4,
    RecoilValueNotReady: RecoilValueNotReady$2,
    getConfigDeletionHandler: getConfigDeletionHandler$1,
    registerNode: registerNode$1
  } = Recoil_Node;
  var {
    isRecoilValue: isRecoilValue$3
  } = Recoil_RecoilValue$1;
  var {
    AbstractRecoilValue: AbstractRecoilValue$4
  } = Recoil_RecoilValue$1;
  var {
    setRecoilValueLoadable: setRecoilValueLoadable$2
  } = Recoil_RecoilValueInterface;
  var {
    retainedByOptionWithDefault: retainedByOptionWithDefault$1
  } = Recoil_Retention;
  var {
    cloneSnapshot: cloneSnapshot$2
  } = Recoil_Snapshot$1;
  var {
    startPerfBlock: startPerfBlock$1
  } = Recoil_PerformanceTimings;
  var dependencyStack = [];
  var waitingStores = new Map();
  var getNewExecutionId = (() => {
    let executionId = 0;
    return () => executionId++;
  })();
  function getInitialExecutionInfo() {
    return {
      depValuesDiscoveredSoFarDuringAsyncWork: null,
      latestLoadable: null,
      latestExecutionId: null,
      stateVersion: null
    };
  }
  function selector(options) {
    const {
      key,
      get: get2,
      cachePolicy_UNSTABLE: cachePolicy
    } = options;
    const set2 = options.set != null ? options.set : void 0;
    const cache3 = Recoil_treeCacheFromPolicy(cachePolicy !== null && cachePolicy !== void 0 ? cachePolicy : {
      equality: "reference",
      eviction: "keep-all"
    });
    const retainedBy = retainedByOptionWithDefault$1(options.retainedBy_UNSTABLE);
    const executionInfoMap = new Map();
    let liveStoresCount = 0;
    function selectorIsLive() {
      return !Recoil_gkx_1("recoil_memory_managament_2020") || liveStoresCount > 0;
    }
    function getExecutionInfo(store2) {
      if (!executionInfoMap.has(store2)) {
        executionInfoMap.set(store2, getInitialExecutionInfo());
      }
      return Recoil_nullthrows(executionInfoMap.get(store2));
    }
    function selectorInit(store2) {
      liveStoresCount++;
      store2.getState().knownSelectors.add(key);
      return () => {
        liveStoresCount--;
        store2.getState().knownSelectors.delete(key);
        executionInfoMap.delete(store2);
      };
    }
    function selectorShouldDeleteConfigOnRelease() {
      return getConfigDeletionHandler$1(key) !== void 0 && !selectorIsLive();
    }
    function notifyStoreWhenAsyncSettles(store2, loadable, executionId) {
      if (loadable.state === "loading") {
        let stores = waitingStores.get(executionId);
        if (stores == null) {
          waitingStores.set(executionId, stores = new Set());
        }
        stores.add(store2);
      }
    }
    function notifyStoresOfSettledAsync(newLoadable, executionId) {
      const stores = waitingStores.get(executionId);
      if (stores !== void 0) {
        for (const store2 of stores) {
          setRecoilValueLoadable$2(store2, new AbstractRecoilValue$4(key), newLoadable);
        }
        waitingStores.delete(executionId);
      }
    }
    function getCachedNodeLoadable(store2, state, key2) {
      const isKeyPointingToSelector = store2.getState().knownSelectors.has(key2);
      if (isKeyPointingToSelector && state.atomValues.has(key2)) {
        return Recoil_nullthrows(state.atomValues.get(key2));
      }
      const loadable = getNodeLoadable$2(store2, state, key2);
      if (loadable.state !== "loading" && isKeyPointingToSelector) {
        state.atomValues.set(key2, loadable);
      }
      return loadable;
    }
    function wrapPendingPromise(store2, promise, state, depValues, executionId) {
      return promise.then((value) => {
        if (!selectorIsLive()) {
          clearExecutionInfo(store2, executionId);
          return CANCELED$2;
        }
        const loadable = loadableWithValue$2(value);
        maybeFreezeValue(value);
        setCache(state, depValuesToDepRoute(depValues), loadable);
        setDepsInStore(store2, state, new Set(depValues.keys()), executionId);
        setLoadableInStoreToNotifyDeps(store2, loadable, executionId);
        return {
          __value: value,
          __key: key
        };
      }).catch((errorOrPromise) => {
        if (!selectorIsLive()) {
          clearExecutionInfo(store2, executionId);
          return CANCELED$2;
        }
        if (isLatestExecution(store2, executionId)) {
          updateExecutionInfoDepValues(depValues, store2, executionId);
        }
        if (Recoil_isPromise(errorOrPromise)) {
          return wrapPendingDependencyPromise(store2, errorOrPromise, state, depValues, executionId);
        }
        const loadable = loadableWithError$1(errorOrPromise);
        maybeFreezeValue(errorOrPromise);
        setCache(state, depValuesToDepRoute(depValues), loadable);
        setDepsInStore(store2, state, new Set(depValues.keys()), executionId);
        setLoadableInStoreToNotifyDeps(store2, loadable, executionId);
        throw errorOrPromise;
      });
    }
    function wrapPendingDependencyPromise(store2, promise, state, existingDeps, executionId) {
      return promise.then((resolvedDep) => {
        if (!selectorIsLive()) {
          clearExecutionInfo(store2, executionId);
          return CANCELED$2;
        }
        if (resolvedDep instanceof Canceled$1) {
          Recoil_recoverableViolation("Selector was released while it had dependencies");
          return CANCELED$2;
        }
        const {
          __key: resolvedDepKey,
          __value: depValue
        } = resolvedDep !== null && resolvedDep !== void 0 ? resolvedDep : {};
        let bypassSelectorDepCacheOnReevaluation = true;
        if (resolvedDepKey != null) {
          state.atomValues.set(resolvedDepKey, loadableWithValue$2(depValue));
          bypassSelectorDepCacheOnReevaluation = false;
        }
        const cachedLoadable = getValFromCacheAndUpdatedDownstreamDeps(store2, state);
        if (cachedLoadable && cachedLoadable.state === "hasValue") {
          setExecutionInfo(cachedLoadable, store2);
          return {
            __value: cachedLoadable.contents,
            __key: key
          };
        }
        const [loadable, depValues] = evaluateSelectorGetter(store2, state, executionId, bypassSelectorDepCacheOnReevaluation);
        if (isLatestExecution(store2, executionId)) {
          updateExecutionInfoDepValues(depValues, store2, executionId);
        }
        maybeFreezeLoadableContents(loadable);
        if (loadable.state !== "loading") {
          setCache(state, depValuesToDepRoute(depValues), loadable);
          setDepsInStore(store2, state, new Set(depValues.keys()), executionId);
          setLoadableInStoreToNotifyDeps(store2, loadable, executionId);
        }
        if (loadable.state === "hasError") {
          throw loadable.contents;
        }
        if (loadable.state === "hasValue") {
          return {
            __value: loadable.contents,
            __key: key
          };
        }
        return loadable.contents;
      }).catch((error) => {
        if (!selectorIsLive()) {
          clearExecutionInfo(store2, executionId);
          return CANCELED$2;
        }
        const loadable = loadableWithError$1(error);
        maybeFreezeValue(error);
        setCache(state, depValuesToDepRoute(existingDeps), loadableWithError$1(error));
        setDepsInStore(store2, state, new Set(existingDeps.keys()), executionId);
        setLoadableInStoreToNotifyDeps(store2, loadable, executionId);
        throw error;
      });
    }
    function setLoadableInStoreToNotifyDeps(store2, loadable, executionId) {
      if (isLatestExecution(store2, executionId)) {
        setExecutionInfo(loadable, store2);
        notifyStoresOfSettledAsync(loadable, executionId);
      }
    }
    function setDepsInStore(store2, state, deps, executionId) {
      var _store$getState, _store$getState$curre, _store$getState2, _store$getState2$next;
      if (isLatestExecution(store2, executionId) || state.version === ((_store$getState = store2.getState()) === null || _store$getState === void 0 ? void 0 : (_store$getState$curre = _store$getState.currentTree) === null || _store$getState$curre === void 0 ? void 0 : _store$getState$curre.version) || state.version === ((_store$getState2 = store2.getState()) === null || _store$getState2 === void 0 ? void 0 : (_store$getState2$next = _store$getState2.nextTree) === null || _store$getState2$next === void 0 ? void 0 : _store$getState2$next.version)) {
        var _store$getState$nextT, _store$getState3, _store$getState3$next;
        saveDependencyMapToStore$1(new Map([[key, deps]]), store2, (_store$getState$nextT = (_store$getState3 = store2.getState()) === null || _store$getState3 === void 0 ? void 0 : (_store$getState3$next = _store$getState3.nextTree) === null || _store$getState3$next === void 0 ? void 0 : _store$getState3$next.version) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store2.getState().currentTree.version);
      }
    }
    function setNewDepInStore(store2, state, deps, newDepKey, executionId) {
      deps.add(newDepKey);
      setDepsInStore(store2, state, deps, executionId);
    }
    function evaluateSelectorGetter(store2, state, executionId, bypassSelectorDepCache = false) {
      const endPerfBlock = startPerfBlock$1(key);
      let result;
      let resultIsError = false;
      let loadable;
      const depValues = new Map();
      const deps = new Set();
      setDepsInStore(store2, state, deps, executionId);
      function getRecoilValue(recoilValue) {
        const {
          key: depKey
        } = recoilValue;
        setNewDepInStore(store2, state, deps, depKey, executionId);
        const depLoadable = bypassSelectorDepCache ? getNodeLoadable$2(store2, state, depKey) : getCachedNodeLoadable(store2, state, depKey);
        maybeFreezeLoadableContents(depLoadable);
        depValues.set(depKey, depLoadable);
        if (depLoadable.state === "hasValue") {
          return depLoadable.contents;
        }
        throw depLoadable.contents;
      }
      let gateCallback = false;
      const getCallback = (fn) => {
        return (...args) => {
          if (!gateCallback) {
            throw new Error("getCallback() should only be called asynchronously after the selector is evalutated.  It can be used for selectors to return objects with callbacks that can obtain the current Recoil state without a subscription.");
          }
          const snapshot = cloneSnapshot$2(store2);
          const cb = fn({
            snapshot
          });
          if (typeof cb !== "function") {
            throw new Error("getCallback() expects a function that returns a function.");
          }
          return cb(...args);
        };
      };
      try {
        result = get2({
          get: getRecoilValue,
          getCallback
        });
        result = isRecoilValue$3(result) ? getRecoilValue(result) : result;
        gateCallback = true;
        if (Recoil_isPromise(result)) {
          result = wrapPendingPromise(store2, result, state, depValues, executionId).finally(endPerfBlock);
        } else {
          endPerfBlock();
        }
      } catch (errorOrDepPromise) {
        result = errorOrDepPromise;
        if (Recoil_isPromise(result)) {
          result = wrapPendingDependencyPromise(store2, result, state, depValues, executionId).finally(endPerfBlock);
        } else {
          resultIsError = true;
          endPerfBlock();
        }
      }
      if (resultIsError) {
        loadable = loadableWithError$1(result);
      } else if (Recoil_isPromise(result)) {
        loadable = loadableWithPromise$1(result);
      } else {
        loadable = loadableWithValue$2(result);
      }
      maybeFreezeLoadableContents(loadable);
      return [loadable, depValues];
    }
    function getValFromCacheAndUpdatedDownstreamDeps(store2, state) {
      const depsAfterCacheDone = new Set();
      const executionInfo = getExecutionInfo(store2);
      const cachedVal = cache3.get((nodeKey) => {
        !(typeof nodeKey === "string") ? true ? Recoil_invariant(false, "Cache nodeKey is type string") : Recoil_invariant(false) : void 0;
        const loadable = getCachedNodeLoadable(store2, state, nodeKey);
        return loadable.contents;
      }, {
        onNodeVisit: (node) => {
          if (node.type === "branch" && node.nodeKey !== key && typeof node.nodeKey === "string") {
            depsAfterCacheDone.add(node.nodeKey);
          }
        }
      });
      if (cachedVal) {
        setDepsInStore(store2, state, depsAfterCacheDone, executionInfo.latestExecutionId);
      }
      return cachedVal;
    }
    function depValuesToDepRoute(depValues) {
      return Array.from(depValues.entries()).map(([key2, valLoadable]) => [key2, valLoadable.contents]);
    }
    function getValFromRunningNewExecutionAndUpdatedDeps(store2, state) {
      const newExecutionId = getNewExecutionId();
      const [loadable, newDepValues] = evaluateSelectorGetter(store2, state, newExecutionId);
      setExecutionInfo(loadable, store2, newDepValues, newExecutionId, state);
      maybeSetCacheWithLoadable(state, depValuesToDepRoute(newDepValues), loadable);
      notifyStoreWhenAsyncSettles(store2, loadable, newExecutionId);
      return loadable;
    }
    function getSelectorValAndUpdatedDeps(store2, state) {
      const cachedVal = getValFromCacheAndUpdatedDownstreamDeps(store2, state);
      if (cachedVal != null) {
        setExecutionInfo(cachedVal, store2);
        return cachedVal;
      }
      const inProgressExecutionInfo = getExecutionInfoOfInProgressExecution(store2, state);
      if (inProgressExecutionInfo) {
        const executionInfo = inProgressExecutionInfo;
        notifyStoreWhenAsyncSettles(store2, Recoil_nullthrows(executionInfo.latestLoadable), Recoil_nullthrows(executionInfo.latestExecutionId));
        return Recoil_nullthrows(executionInfo.latestLoadable);
      }
      return getValFromRunningNewExecutionAndUpdatedDeps(store2, state);
    }
    function getExecutionInfoOfInProgressExecution(store2, state) {
      var _Array$from$find;
      const [, executionInfo] = (_Array$from$find = Array.from(executionInfoMap.entries()).find(([, executionInfo2]) => {
        return executionInfo2.latestLoadable != null && executionInfo2.latestExecutionId != null && !haveAsyncDepsChanged(store2, state);
      })) !== null && _Array$from$find !== void 0 ? _Array$from$find : [];
      return executionInfo;
    }
    const mapOfCheckedVersions = new Map();
    function haveAsyncDepsChanged(store2, state) {
      var _executionInfo$depVal, _mapOfCheckedVersions;
      const executionInfo = getExecutionInfo(store2);
      const oldDepValues = (_executionInfo$depVal = executionInfo.depValuesDiscoveredSoFarDuringAsyncWork) !== null && _executionInfo$depVal !== void 0 ? _executionInfo$depVal : new Map();
      const cachedDepValuesCheckedForThisVersion = Array(((_mapOfCheckedVersions = mapOfCheckedVersions.get(state.version)) !== null && _mapOfCheckedVersions !== void 0 ? _mapOfCheckedVersions : new Map()).entries());
      const isCachedVersionSame = mapOfCheckedVersions.has(state.version) && cachedDepValuesCheckedForThisVersion.length === oldDepValues.size && cachedDepValuesCheckedForThisVersion.every(([nodeKey, nodeVal]) => {
        return oldDepValues.get(nodeKey) === nodeVal;
      });
      if (oldDepValues == null || state.version === executionInfo.stateVersion || isCachedVersionSame) {
        return false;
      }
      mapOfCheckedVersions.set(state.version, new Map(oldDepValues));
      return Array.from(oldDepValues).some(([nodeKey, oldVal]) => {
        const loadable = getCachedNodeLoadable(store2, state, nodeKey);
        return loadable.contents !== oldVal.contents && !(oldVal.state === "loading" && loadable.state !== "loading");
      });
    }
    function setExecutionInfo(loadable, store2, depValues, newExecutionId, state) {
      const executionInfo = getExecutionInfo(store2);
      if (loadable.state === "loading") {
        executionInfo.depValuesDiscoveredSoFarDuringAsyncWork = depValues;
        executionInfo.latestExecutionId = newExecutionId;
        executionInfo.latestLoadable = loadable;
        executionInfo.stateVersion = state === null || state === void 0 ? void 0 : state.version;
      } else {
        executionInfo.depValuesDiscoveredSoFarDuringAsyncWork = null;
        executionInfo.latestExecutionId = null;
        executionInfo.latestLoadable = null;
        executionInfo.stateVersion = null;
      }
    }
    function maybeSetCacheWithLoadable(state, depRoute, loadable) {
      if (loadable.state !== "loading") {
        setCache(state, depRoute, loadable);
      }
    }
    function updateExecutionInfoDepValues(depValues, store2, executionId) {
      const executionInfo = getExecutionInfo(store2);
      if (isLatestExecution(store2, executionId)) {
        executionInfo.depValuesDiscoveredSoFarDuringAsyncWork = depValues;
      }
    }
    function clearExecutionInfo(store2, executionId) {
      if (isLatestExecution(store2, executionId)) {
        executionInfoMap.delete(store2);
      }
    }
    function isLatestExecution(store2, executionId) {
      const executionInfo = getExecutionInfo(store2);
      return executionId === executionInfo.latestExecutionId;
    }
    function maybeFreezeLoadableContents(loadable) {
      if (loadable.state !== "loading") {
        maybeFreezeValue(loadable.contents);
      }
    }
    function maybeFreezeValue(val) {
      if (true) {
        if (Boolean(options.dangerouslyAllowMutability) === false) {
          Recoil_deepFreezeValue(val);
        }
      }
    }
    function setCache(state, cacheRoute, loadable) {
      state.atomValues.set(key, loadable);
      cache3.set(cacheRoute, loadable);
    }
    function detectCircularDependencies(fn) {
      if (dependencyStack.includes(key)) {
        const message = `Recoil selector has circular dependencies: ${dependencyStack.slice(dependencyStack.indexOf(key)).join(" \u2192 ")}`;
        return loadableWithError$1(new Error(message));
      }
      dependencyStack.push(key);
      try {
        return fn();
      } finally {
        dependencyStack.pop();
      }
    }
    function selectorPeek(store2, state) {
      const cacheVal = cache3.get((nodeKey) => {
        !(typeof nodeKey === "string") ? true ? Recoil_invariant(false, "Cache nodeKey is type string") : Recoil_invariant(false) : void 0;
        const peek = peekNodeLoadable$1(store2, state, nodeKey);
        return peek === null || peek === void 0 ? void 0 : peek.contents;
      });
      return cacheVal;
    }
    function selectorGet(store2, state) {
      return detectCircularDependencies(() => getSelectorValAndUpdatedDeps(store2, state));
    }
    function invalidateSelector(state) {
      state.atomValues.delete(key);
    }
    if (set2 != null) {
      const selectorSet = (store2, state, newValue) => {
        let syncSelectorSetFinished = false;
        const writes = new Map();
        function getRecoilValue({
          key: key2
        }) {
          if (syncSelectorSetFinished) {
            throw new Error("Recoil: Async selector sets are not currently supported.");
          }
          const loadable = getCachedNodeLoadable(store2, state, key2);
          maybeFreezeLoadableContents(loadable);
          if (loadable.state === "hasValue") {
            return loadable.contents;
          } else if (loadable.state === "loading") {
            throw new RecoilValueNotReady$2(key2);
          } else {
            throw loadable.contents;
          }
        }
        function setRecoilState(recoilState, valueOrUpdater) {
          if (syncSelectorSetFinished) {
            throw new Error("Recoil: Async selector sets are not currently supported.");
          }
          const newValue2 = typeof valueOrUpdater === "function" ? valueOrUpdater(getRecoilValue(recoilState)) : valueOrUpdater;
          const upstreamWrites = setNodeValue$3(store2, state, recoilState.key, newValue2);
          upstreamWrites.forEach((v, k) => writes.set(k, v));
        }
        function resetRecoilState(recoilState) {
          setRecoilState(recoilState, DEFAULT_VALUE$4);
        }
        const ret = set2({
          set: setRecoilState,
          get: getRecoilValue,
          reset: resetRecoilState
        }, newValue);
        if (ret !== void 0) {
          throw Recoil_isPromise(ret) ? new Error("Recoil: Async selector sets are not currently supported.") : new Error("Recoil: selector set should be a void function.");
        }
        syncSelectorSetFinished = true;
        return writes;
      };
      return registerNode$1({
        key,
        nodeType: "selector",
        peek: selectorPeek,
        get: selectorGet,
        set: selectorSet,
        init: selectorInit,
        invalidate: invalidateSelector,
        shouldDeleteConfigOnRelease: selectorShouldDeleteConfigOnRelease,
        dangerouslyAllowMutability: options.dangerouslyAllowMutability,
        shouldRestoreFromSnapshots: false,
        retainedBy
      });
    } else {
      return registerNode$1({
        key,
        nodeType: "selector",
        peek: selectorPeek,
        get: selectorGet,
        init: selectorInit,
        invalidate: invalidateSelector,
        shouldDeleteConfigOnRelease: selectorShouldDeleteConfigOnRelease,
        dangerouslyAllowMutability: options.dangerouslyAllowMutability,
        shouldRestoreFromSnapshots: false,
        retainedBy
      });
    }
  }
  var Recoil_selector = selector;
  var {
    loadableWithError: loadableWithError$2,
    loadableWithPromise: loadableWithPromise$2,
    loadableWithValue: loadableWithValue$3
  } = Recoil_Loadable;
  var {
    DEFAULT_VALUE: DEFAULT_VALUE$5,
    DefaultValue: DefaultValue$2,
    getConfigDeletionHandler: getConfigDeletionHandler$2,
    registerNode: registerNode$2,
    setConfigDeletionHandler: setConfigDeletionHandler$1
  } = Recoil_Node;
  var {
    isRecoilValue: isRecoilValue$4
  } = Recoil_RecoilValue$1;
  var {
    markRecoilValueModified: markRecoilValueModified$1,
    setRecoilValue: setRecoilValue$3,
    setRecoilValueLoadable: setRecoilValueLoadable$3
  } = Recoil_RecoilValueInterface;
  var {
    retainedByOptionWithDefault: retainedByOptionWithDefault$2
  } = Recoil_Retention;
  function baseAtom(options) {
    const {
      key,
      persistence_UNSTABLE: persistence
    } = options;
    const retainedBy = retainedByOptionWithDefault$2(options.retainedBy_UNSTABLE);
    let liveStoresCount = 0;
    let defaultLoadable = Recoil_isPromise(options.default) ? loadableWithPromise$2(options.default.then((value) => {
      defaultLoadable = loadableWithValue$3(value);
      const promiseInfo = {
        __key: key,
        __value: value
      };
      return promiseInfo;
    }).catch((error) => {
      defaultLoadable = loadableWithError$2(error);
      throw error;
    })) : loadableWithValue$3(options.default);
    let cachedAnswerForUnvalidatedValue = void 0;
    const cleanupEffectsByStore = new Map();
    function wrapPendingPromise(store2, promise) {
      const wrappedPromise = promise.then((value) => {
        var _store$getState$nextT, _state$atomValues$get;
        const state = (_store$getState$nextT = store2.getState().nextTree) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store2.getState().currentTree;
        if (((_state$atomValues$get = state.atomValues.get(key)) === null || _state$atomValues$get === void 0 ? void 0 : _state$atomValues$get.contents) === wrappedPromise) {
          setRecoilValue$3(store2, node, value);
        }
        return {
          __key: key,
          __value: value
        };
      }).catch((error) => {
        var _store$getState$nextT2, _state$atomValues$get2;
        const state = (_store$getState$nextT2 = store2.getState().nextTree) !== null && _store$getState$nextT2 !== void 0 ? _store$getState$nextT2 : store2.getState().currentTree;
        if (((_state$atomValues$get2 = state.atomValues.get(key)) === null || _state$atomValues$get2 === void 0 ? void 0 : _state$atomValues$get2.contents) === wrappedPromise) {
          setRecoilValueLoadable$3(store2, node, loadableWithError$2(error));
        }
        throw error;
      });
      return wrappedPromise;
    }
    function initAtom(store2, initState, trigger) {
      liveStoresCount++;
      const alreadyKnown = store2.getState().knownAtoms.has(key);
      store2.getState().knownAtoms.add(key);
      if (defaultLoadable.state === "loading") {
        const notifyDefaultSubscribers = () => {
          var _store$getState$nextT3;
          const state = (_store$getState$nextT3 = store2.getState().nextTree) !== null && _store$getState$nextT3 !== void 0 ? _store$getState$nextT3 : store2.getState().currentTree;
          if (!state.atomValues.has(key)) {
            markRecoilValueModified$1(store2, node);
          }
        };
        defaultLoadable.contents.then(notifyDefaultSubscribers).catch(notifyDefaultSubscribers);
      }
      let initValue = DEFAULT_VALUE$5;
      let pendingSetSelf = null;
      if (options.effects_UNSTABLE != null && !alreadyKnown) {
        let duringInit = true;
        const setSelf = (effect) => (valueOrUpdater) => {
          if (duringInit) {
            const currentValue = initValue instanceof DefaultValue$2 || Recoil_isPromise(initValue) ? defaultLoadable.state === "hasValue" ? defaultLoadable.contents : DEFAULT_VALUE$5 : initValue;
            initValue = typeof valueOrUpdater === "function" ? valueOrUpdater(currentValue) : valueOrUpdater;
            if (Recoil_isPromise(initValue)) {
              initValue = initValue.then((value) => {
                pendingSetSelf = {
                  effect,
                  value
                };
                return value;
              });
            }
          } else {
            if (Recoil_isPromise(valueOrUpdater)) {
              throw new Error("Setting atoms to async values is not implemented.");
            }
            if (typeof valueOrUpdater !== "function") {
              pendingSetSelf = {
                effect,
                value: valueOrUpdater
              };
            }
            setRecoilValue$3(store2, node, typeof valueOrUpdater === "function" ? (currentValue) => {
              const newValue = valueOrUpdater(currentValue);
              pendingSetSelf = {
                effect,
                value: newValue
              };
              return newValue;
            } : valueOrUpdater);
          }
        };
        const resetSelf = (effect) => () => setSelf(effect)(DEFAULT_VALUE$5);
        const onSet = (effect) => (handler) => {
          store2.subscribeToTransactions((currentStore) => {
            var _currentTree$atomValu;
            let {
              currentTree,
              previousTree
            } = currentStore.getState();
            if (!previousTree) {
              Recoil_recoverableViolation("Transaction subscribers notified without a next tree being present -- this is a bug in Recoil");
              previousTree = currentTree;
            }
            const newLoadable = (_currentTree$atomValu = currentTree.atomValues.get(key)) !== null && _currentTree$atomValu !== void 0 ? _currentTree$atomValu : defaultLoadable;
            if (newLoadable.state === "hasValue") {
              var _previousTree$atomVal, _pendingSetSelf, _pendingSetSelf2, _pendingSetSelf3;
              const newValue = newLoadable.contents;
              const oldLoadable = (_previousTree$atomVal = previousTree.atomValues.get(key)) !== null && _previousTree$atomVal !== void 0 ? _previousTree$atomVal : defaultLoadable;
              const oldValue = oldLoadable.state === "hasValue" ? oldLoadable.contents : DEFAULT_VALUE$5;
              if (((_pendingSetSelf = pendingSetSelf) === null || _pendingSetSelf === void 0 ? void 0 : _pendingSetSelf.effect) !== effect || ((_pendingSetSelf2 = pendingSetSelf) === null || _pendingSetSelf2 === void 0 ? void 0 : _pendingSetSelf2.value) !== newValue) {
                handler(newValue, oldValue);
              } else if (((_pendingSetSelf3 = pendingSetSelf) === null || _pendingSetSelf3 === void 0 ? void 0 : _pendingSetSelf3.effect) === effect) {
                pendingSetSelf = null;
              }
            }
          }, key);
        };
        for (const effect of (_options$effects_UNST = options.effects_UNSTABLE) !== null && _options$effects_UNST !== void 0 ? _options$effects_UNST : []) {
          var _options$effects_UNST;
          const cleanup = effect({
            node,
            trigger,
            setSelf: setSelf(effect),
            resetSelf: resetSelf(effect),
            onSet: onSet(effect)
          });
          if (cleanup != null) {
            var _cleanupEffectsByStor;
            cleanupEffectsByStore.set(store2, [...(_cleanupEffectsByStor = cleanupEffectsByStore.get(store2)) !== null && _cleanupEffectsByStor !== void 0 ? _cleanupEffectsByStor : [], cleanup]);
          }
        }
        duringInit = false;
      }
      if (!(initValue instanceof DefaultValue$2)) {
        var _store$getState$nextT4;
        const initLoadable = Recoil_isPromise(initValue) ? loadableWithPromise$2(wrapPendingPromise(store2, initValue)) : loadableWithValue$3(initValue);
        initState.atomValues.set(key, initLoadable);
        (_store$getState$nextT4 = store2.getState().nextTree) === null || _store$getState$nextT4 === void 0 ? void 0 : _store$getState$nextT4.atomValues.set(key, initLoadable);
      }
      return () => {
        var _cleanupEffectsByStor2;
        liveStoresCount--;
        (_cleanupEffectsByStor2 = cleanupEffectsByStore.get(store2)) === null || _cleanupEffectsByStor2 === void 0 ? void 0 : _cleanupEffectsByStor2.forEach((cleanup) => cleanup());
        cleanupEffectsByStore.delete(store2);
        store2.getState().knownAtoms.delete(key);
      };
    }
    function peekAtom(_store, state) {
      var _ref3, _state$atomValues$get3, _cachedAnswerForUnval;
      return (_ref3 = (_state$atomValues$get3 = state.atomValues.get(key)) !== null && _state$atomValues$get3 !== void 0 ? _state$atomValues$get3 : (_cachedAnswerForUnval = cachedAnswerForUnvalidatedValue) === null || _cachedAnswerForUnval === void 0 ? void 0 : _cachedAnswerForUnval[1]) !== null && _ref3 !== void 0 ? _ref3 : defaultLoadable;
    }
    function getAtom(_store, state) {
      if (state.atomValues.has(key)) {
        return Recoil_nullthrows(state.atomValues.get(key));
      } else if (state.nonvalidatedAtoms.has(key)) {
        if (cachedAnswerForUnvalidatedValue != null) {
          return cachedAnswerForUnvalidatedValue;
        }
        if (persistence == null) {
          Recoil_expectationViolation(`Tried to restore a persisted value for atom ${key} but it has no persistence settings.`);
          return defaultLoadable;
        }
        const nonvalidatedValue = state.nonvalidatedAtoms.get(key);
        const validatorResult = persistence.validator(nonvalidatedValue, DEFAULT_VALUE$5);
        const validatedValueLoadable = validatorResult instanceof DefaultValue$2 ? defaultLoadable : loadableWithValue$3(validatorResult);
        cachedAnswerForUnvalidatedValue = validatedValueLoadable;
        return cachedAnswerForUnvalidatedValue;
      } else {
        return defaultLoadable;
      }
    }
    function invalidateAtom() {
      cachedAnswerForUnvalidatedValue = void 0;
    }
    function setAtom(_store, state, newValue) {
      if (state.atomValues.has(key)) {
        const existing = Recoil_nullthrows(state.atomValues.get(key));
        if (existing.state === "hasValue" && newValue === existing.contents) {
          return new Map();
        }
      } else if (!state.nonvalidatedAtoms.has(key) && newValue instanceof DefaultValue$2) {
        return new Map();
      }
      if (true) {
        if (options.dangerouslyAllowMutability !== true) {
          Recoil_deepFreezeValue(newValue);
        }
      }
      cachedAnswerForUnvalidatedValue = void 0;
      return new Map().set(key, loadableWithValue$3(newValue));
    }
    function shouldDeleteConfigOnReleaseAtom() {
      return getConfigDeletionHandler$2(key) !== void 0 && liveStoresCount <= 0;
    }
    const node = registerNode$2({
      key,
      nodeType: "atom",
      peek: peekAtom,
      get: getAtom,
      set: setAtom,
      init: initAtom,
      invalidate: invalidateAtom,
      shouldDeleteConfigOnRelease: shouldDeleteConfigOnReleaseAtom,
      dangerouslyAllowMutability: options.dangerouslyAllowMutability,
      persistence_UNSTABLE: options.persistence_UNSTABLE ? {
        type: options.persistence_UNSTABLE.type,
        backButton: options.persistence_UNSTABLE.backButton
      } : void 0,
      shouldRestoreFromSnapshots: true,
      retainedBy
    });
    return node;
  }
  function atom(options) {
    const {
      default: optionsDefault,
      ...restOptions
    } = options;
    if (isRecoilValue$4(optionsDefault)) {
      return atomWithFallback({
        ...restOptions,
        default: optionsDefault
      });
    } else {
      return baseAtom({
        ...restOptions,
        default: optionsDefault
      });
    }
  }
  function atomWithFallback(options) {
    const base = atom({
      ...options,
      default: DEFAULT_VALUE$5,
      persistence_UNSTABLE: options.persistence_UNSTABLE === void 0 ? void 0 : {
        ...options.persistence_UNSTABLE,
        validator: (storedValue) => storedValue instanceof DefaultValue$2 ? storedValue : Recoil_nullthrows(options.persistence_UNSTABLE).validator(storedValue, DEFAULT_VALUE$5)
      },
      effects_UNSTABLE: options.effects_UNSTABLE
    });
    const sel = Recoil_selector({
      key: `${options.key}__withFallback`,
      get: ({
        get: get2
      }) => {
        const baseValue = get2(base);
        return baseValue instanceof DefaultValue$2 ? options.default : baseValue;
      },
      set: ({
        set: set2
      }, newValue) => set2(base, newValue),
      dangerouslyAllowMutability: options.dangerouslyAllowMutability
    });
    setConfigDeletionHandler$1(sel.key, getConfigDeletionHandler$2(options.key));
    return sel;
  }
  var Recoil_atom = atom;
  var MapCache = class {
    constructor(options) {
      var _options$mapKey;
      _defineProperty(this, "_map", void 0);
      _defineProperty(this, "_keyMapper", void 0);
      this._map = new Map();
      this._keyMapper = (_options$mapKey = options === null || options === void 0 ? void 0 : options.mapKey) !== null && _options$mapKey !== void 0 ? _options$mapKey : (v) => v;
    }
    size() {
      return this._map.size;
    }
    has(key) {
      return this._map.has(this._keyMapper(key));
    }
    get(key) {
      return this._map.get(this._keyMapper(key));
    }
    set(key, val) {
      this._map.set(this._keyMapper(key), val);
    }
    delete(key) {
      this._map.delete(this._keyMapper(key));
    }
    clear() {
      this._map.clear();
    }
  };
  var Recoil_MapCache = {
    MapCache
  };
  var Recoil_MapCache_1 = Recoil_MapCache.MapCache;
  var Recoil_MapCache$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    MapCache: Recoil_MapCache_1
  });
  var {
    LRUCache: LRUCache$2
  } = Recoil_LRUCache$1;
  var {
    MapCache: MapCache$1
  } = Recoil_MapCache$1;
  var defaultPolicy$1 = {
    equality: "reference",
    eviction: "none",
    maxSize: Infinity
  };
  function cacheFromPolicy({
    equality = defaultPolicy$1.equality,
    eviction = defaultPolicy$1.eviction,
    maxSize = defaultPolicy$1.maxSize
  } = defaultPolicy$1) {
    const valueMapper = getValueMapper$1(equality);
    const cache3 = getCache(eviction, maxSize, valueMapper);
    return cache3;
  }
  function getValueMapper$1(equality) {
    switch (equality) {
      case "reference":
        return (val) => val;
      case "value":
        return (val) => Recoil_stableStringify(val);
    }
    throw new Error(`Unrecognized equality policy ${equality}`);
  }
  function getCache(eviction, maxSize, mapKey) {
    switch (eviction) {
      case "keep-all":
        return new MapCache$1({
          mapKey
        });
      case "lru":
        return new LRUCache$2({
          mapKey,
          maxSize: Recoil_nullthrows(maxSize)
        });
      case "most-recent":
        return new LRUCache$2({
          mapKey,
          maxSize: 1
        });
    }
    throw new Error(`Unrecognized eviction policy ${eviction}`);
  }
  var Recoil_cacheFromPolicy = cacheFromPolicy;
  var {
    setConfigDeletionHandler: setConfigDeletionHandler$2
  } = Recoil_Node;
  function atomFamily(options) {
    var _options$cachePolicyF, _options$cachePolicyF2;
    const atomCache = Recoil_cacheFromPolicy({
      equality: (_options$cachePolicyF = (_options$cachePolicyF2 = options.cachePolicyForParams_UNSTABLE) === null || _options$cachePolicyF2 === void 0 ? void 0 : _options$cachePolicyF2.equality) !== null && _options$cachePolicyF !== void 0 ? _options$cachePolicyF : "value",
      eviction: "keep-all"
    });
    return (params) => {
      var _stableStringify;
      const cachedAtom = atomCache.get(params);
      if (cachedAtom != null) {
        return cachedAtom;
      }
      const {
        cachePolicyForParams_UNSTABLE,
        ...atomOptions
      } = options;
      const newAtom = Recoil_atom({
        ...atomOptions,
        key: `${options.key}__${(_stableStringify = Recoil_stableStringify(params)) !== null && _stableStringify !== void 0 ? _stableStringify : "void"}`,
        default: typeof options.default === "function" ? options.default(params) : options.default,
        retainedBy_UNSTABLE: typeof options.retainedBy_UNSTABLE === "function" ? options.retainedBy_UNSTABLE(params) : options.retainedBy_UNSTABLE,
        effects_UNSTABLE: typeof options.effects_UNSTABLE === "function" ? options.effects_UNSTABLE(params) : options.effects_UNSTABLE
      });
      atomCache.set(params, newAtom);
      setConfigDeletionHandler$2(newAtom.key, () => {
        atomCache.delete(params);
      });
      return newAtom;
    };
  }
  var Recoil_atomFamily = atomFamily;
  var {
    setConfigDeletionHandler: setConfigDeletionHandler$3
  } = Recoil_Node;
  var nextIndex = 0;
  function selectorFamily(options) {
    var _options$cachePolicyF, _options$cachePolicyF2;
    const selectorCache = Recoil_cacheFromPolicy({
      equality: (_options$cachePolicyF = (_options$cachePolicyF2 = options.cachePolicyForParams_UNSTABLE) === null || _options$cachePolicyF2 === void 0 ? void 0 : _options$cachePolicyF2.equality) !== null && _options$cachePolicyF !== void 0 ? _options$cachePolicyF : "value",
      eviction: "keep-all"
    });
    return (params) => {
      var _stableStringify;
      const cachedSelector = selectorCache.get(params);
      if (cachedSelector != null) {
        return cachedSelector;
      }
      const myKey = `${options.key}__selectorFamily/${(_stableStringify = Recoil_stableStringify(params, {
        allowFunctions: true
      })) !== null && _stableStringify !== void 0 ? _stableStringify : "void"}/${nextIndex++}`;
      const myGet = (callbacks) => options.get(params)(callbacks);
      const myCachePolicy = options.cachePolicy_UNSTABLE;
      const retainedBy = typeof options.retainedBy_UNSTABLE === "function" ? options.retainedBy_UNSTABLE(params) : options.retainedBy_UNSTABLE;
      let newSelector;
      if (options.set != null) {
        const set2 = options.set;
        const mySet = (callbacks, newValue) => set2(params)(callbacks, newValue);
        newSelector = Recoil_selector({
          key: myKey,
          get: myGet,
          set: mySet,
          cachePolicy_UNSTABLE: myCachePolicy,
          dangerouslyAllowMutability: options.dangerouslyAllowMutability,
          retainedBy_UNSTABLE: retainedBy
        });
      } else {
        newSelector = Recoil_selector({
          key: myKey,
          get: myGet,
          cachePolicy_UNSTABLE: myCachePolicy,
          dangerouslyAllowMutability: options.dangerouslyAllowMutability,
          retainedBy_UNSTABLE: retainedBy
        });
      }
      selectorCache.set(params, newSelector);
      setConfigDeletionHandler$3(newSelector.key, () => {
        selectorCache.delete(params);
      });
      return newSelector;
    };
  }
  var Recoil_selectorFamily = selectorFamily;
  var constantSelector = Recoil_selectorFamily({
    key: "__constant",
    get: (constant) => () => constant,
    cachePolicyForParams_UNSTABLE: {
      equality: "reference"
    }
  });
  function constSelector(constant) {
    return constantSelector(constant);
  }
  var Recoil_constSelector = constSelector;
  var throwingSelector = Recoil_selectorFamily({
    key: "__error",
    get: (message) => () => {
      throw new Error(message);
    },
    cachePolicyForParams_UNSTABLE: {
      equality: "reference"
    }
  });
  function errorSelector(message) {
    return throwingSelector(message);
  }
  var Recoil_errorSelector = errorSelector;
  function readOnlySelector(atom2) {
    return atom2;
  }
  var Recoil_readOnlySelector = readOnlySelector;
  var {
    loadableWithError: loadableWithError$3,
    loadableWithPromise: loadableWithPromise$3,
    loadableWithValue: loadableWithValue$4
  } = Recoil_Loadable;
  function concurrentRequests(getRecoilValue, deps) {
    const results = Array(deps.length).fill(void 0);
    const exceptions = Array(deps.length).fill(void 0);
    for (const [i, dep] of deps.entries()) {
      try {
        results[i] = getRecoilValue(dep);
      } catch (e) {
        exceptions[i] = e;
      }
    }
    return [results, exceptions];
  }
  function isError(exp) {
    return exp != null && !Recoil_isPromise(exp);
  }
  function unwrapDependencies(dependencies) {
    return Array.isArray(dependencies) ? dependencies : Object.getOwnPropertyNames(dependencies).map((key) => dependencies[key]);
  }
  function getValueFromLoadablePromiseResult(result) {
    if (result != null && typeof result === "object" && result.hasOwnProperty("__value")) {
      return result.__value;
    }
    return result;
  }
  function wrapResults(dependencies, results) {
    return Array.isArray(dependencies) ? results : Object.getOwnPropertyNames(dependencies).reduce((out, key, idx) => ({
      ...out,
      [key]: results[idx]
    }), {});
  }
  function wrapLoadables(dependencies, results, exceptions) {
    const output = exceptions.map((exception, idx) => exception == null ? loadableWithValue$4(results[idx]) : Recoil_isPromise(exception) ? loadableWithPromise$3(exception) : loadableWithError$3(exception));
    return wrapResults(dependencies, output);
  }
  function combineAsyncResultsWithSyncResults(syncResults, asyncResults) {
    return asyncResults.map((result, idx) => result === void 0 ? syncResults[idx] : result);
  }
  var waitForNone = Recoil_selectorFamily({
    key: "__waitForNone",
    get: (dependencies) => ({
      get: get2
    }) => {
      const deps = unwrapDependencies(dependencies);
      const [results, exceptions] = concurrentRequests(get2, deps);
      return wrapLoadables(dependencies, results, exceptions);
    },
    dangerouslyAllowMutability: true
  });
  var waitForAny = Recoil_selectorFamily({
    key: "__waitForAny",
    get: (dependencies) => ({
      get: get2
    }) => {
      const deps = unwrapDependencies(dependencies);
      const [results, exceptions] = concurrentRequests(get2, deps);
      if (exceptions.some((exp) => !Recoil_isPromise(exp))) {
        return wrapLoadables(dependencies, results, exceptions);
      }
      return new Promise((resolve) => {
        for (const [i, exp] of exceptions.entries()) {
          if (Recoil_isPromise(exp)) {
            exp.then((result) => {
              results[i] = getValueFromLoadablePromiseResult(result);
              exceptions[i] = void 0;
              resolve(wrapLoadables(dependencies, results, exceptions));
            }).catch((error) => {
              exceptions[i] = error;
              resolve(wrapLoadables(dependencies, results, exceptions));
            });
          }
        }
      });
    },
    dangerouslyAllowMutability: true
  });
  var waitForAll = Recoil_selectorFamily({
    key: "__waitForAll",
    get: (dependencies) => ({
      get: get2
    }) => {
      const deps = unwrapDependencies(dependencies);
      const [results, exceptions] = concurrentRequests(get2, deps);
      if (exceptions.every((exp) => exp == null)) {
        return wrapResults(dependencies, results);
      }
      const error = exceptions.find(isError);
      if (error != null) {
        throw error;
      }
      return Promise.all(exceptions).then((exceptionResults) => wrapResults(dependencies, combineAsyncResultsWithSyncResults(results, exceptionResults).map(getValueFromLoadablePromiseResult)));
    },
    dangerouslyAllowMutability: true
  });
  var waitForAllSettled = Recoil_selectorFamily({
    key: "__waitForAllSettled",
    get: (dependencies) => ({
      get: get2
    }) => {
      const deps = unwrapDependencies(dependencies);
      const [results, exceptions] = concurrentRequests(get2, deps);
      if (exceptions.every((exp) => !Recoil_isPromise(exp))) {
        return wrapLoadables(dependencies, results, exceptions);
      }
      return Promise.all(exceptions.map((exp, i) => Recoil_isPromise(exp) ? exp.then((result) => {
        results[i] = getValueFromLoadablePromiseResult(result);
        exceptions[i] = void 0;
      }).catch((error) => {
        results[i] = void 0;
        exceptions[i] = error;
      }) : null)).then(() => wrapLoadables(dependencies, results, exceptions));
    },
    dangerouslyAllowMutability: true
  });
  var noWait = Recoil_selectorFamily({
    key: "__noWait",
    get: (dependency) => ({
      get: get2
    }) => {
      try {
        return loadableWithValue$4(get2(dependency));
      } catch (exception) {
        return Recoil_isPromise(exception) ? loadableWithPromise$3(exception) : loadableWithError$3(exception);
      }
    },
    dangerouslyAllowMutability: true
  });
  var Recoil_WaitFor = {
    waitForNone,
    waitForAny,
    waitForAll,
    waitForAllSettled,
    noWait
  };
  var {
    batchUpdates: batchUpdates$3,
    setBatcher: setBatcher$1
  } = Recoil_Batching;
  var {
    DefaultValue: DefaultValue$3
  } = Recoil_Node;
  var {
    RecoilRoot: RecoilRoot$2
  } = Recoil_RecoilRoot_react;
  var {
    isRecoilValue: isRecoilValue$5
  } = Recoil_RecoilValue$1;
  var {
    retentionZone: retentionZone$1
  } = Recoil_RetentionZone;
  var {
    freshSnapshot: freshSnapshot$2
  } = Recoil_Snapshot$1;
  var {
    useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,
    useRecoilCallback: useRecoilCallback$1,
    useRecoilSnapshot: useRecoilSnapshot$1,
    useRecoilState: useRecoilState$1,
    useRecoilStateLoadable: useRecoilStateLoadable$1,
    useRecoilTransaction: useRecoilTransaction$1,
    useRecoilTransactionObserver: useRecoilTransactionObserver$1,
    useRecoilValue: useRecoilValue$1,
    useRecoilValueLoadable: useRecoilValueLoadable$1,
    useResetRecoilState: useResetRecoilState$1,
    useRetain: useRetain$1,
    useSetRecoilState: useSetRecoilState$1,
    useSetUnvalidatedAtomValues: useSetUnvalidatedAtomValues$1,
    useTransactionObservation_DEPRECATED: useTransactionObservation_DEPRECATED$1
  } = Recoil_Hooks;
  var {
    noWait: noWait$1,
    waitForAll: waitForAll$1,
    waitForAllSettled: waitForAllSettled$1,
    waitForAny: waitForAny$1,
    waitForNone: waitForNone$1
  } = Recoil_WaitFor;
  var Recoil_index = {
    DefaultValue: DefaultValue$3,
    RecoilRoot: RecoilRoot$2,
    useRecoilBridgeAcrossReactRoots_UNSTABLE: Recoil_useRecoilBridgeAcrossReactRoots,
    atom: Recoil_atom,
    selector: Recoil_selector,
    retentionZone: retentionZone$1,
    atomFamily: Recoil_atomFamily,
    selectorFamily: Recoil_selectorFamily,
    constSelector: Recoil_constSelector,
    errorSelector: Recoil_errorSelector,
    readOnlySelector: Recoil_readOnlySelector,
    useRecoilValue: useRecoilValue$1,
    useRecoilValueLoadable: useRecoilValueLoadable$1,
    useRecoilState: useRecoilState$1,
    useRecoilStateLoadable: useRecoilStateLoadable$1,
    useSetRecoilState: useSetRecoilState$1,
    useResetRecoilState: useResetRecoilState$1,
    useGetRecoilValueInfo_UNSTABLE: Recoil_useGetRecoilValueInfo,
    useRetain: useRetain$1,
    useRecoilCallback: useRecoilCallback$1,
    useRecoilTransaction_UNSTABLE: useRecoilTransaction$1,
    useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,
    useRecoilSnapshot: useRecoilSnapshot$1,
    useRecoilTransactionObserver_UNSTABLE: useRecoilTransactionObserver$1,
    useTransactionObservation_UNSTABLE: useTransactionObservation_DEPRECATED$1,
    useSetUnvalidatedAtomValues_UNSTABLE: useSetUnvalidatedAtomValues$1,
    noWait: noWait$1,
    waitForNone: waitForNone$1,
    waitForAny: waitForAny$1,
    waitForAll: waitForAll$1,
    waitForAllSettled: waitForAllSettled$1,
    isRecoilValue: isRecoilValue$5,
    batchUpdates: batchUpdates$3,
    setBatcher: setBatcher$1,
    snapshot_UNSTABLE: freshSnapshot$2
  };
  var Recoil_index_1 = Recoil_index.DefaultValue;
  var Recoil_index_2 = Recoil_index.RecoilRoot;
  var Recoil_index_3 = Recoil_index.useRecoilBridgeAcrossReactRoots_UNSTABLE;
  var Recoil_index_4 = Recoil_index.atom;
  var Recoil_index_5 = Recoil_index.selector;
  var Recoil_index_6 = Recoil_index.retentionZone;
  var Recoil_index_7 = Recoil_index.atomFamily;
  var Recoil_index_8 = Recoil_index.selectorFamily;
  var Recoil_index_9 = Recoil_index.constSelector;
  var Recoil_index_10 = Recoil_index.errorSelector;
  var Recoil_index_11 = Recoil_index.readOnlySelector;
  var Recoil_index_12 = Recoil_index.useRecoilValue;
  var Recoil_index_13 = Recoil_index.useRecoilValueLoadable;
  var Recoil_index_14 = Recoil_index.useRecoilState;
  var Recoil_index_15 = Recoil_index.useRecoilStateLoadable;
  var Recoil_index_16 = Recoil_index.useSetRecoilState;
  var Recoil_index_17 = Recoil_index.useResetRecoilState;
  var Recoil_index_18 = Recoil_index.useGetRecoilValueInfo_UNSTABLE;
  var Recoil_index_19 = Recoil_index.useRetain;
  var Recoil_index_20 = Recoil_index.useRecoilCallback;
  var Recoil_index_21 = Recoil_index.useRecoilTransaction_UNSTABLE;
  var Recoil_index_22 = Recoil_index.useGotoRecoilSnapshot;
  var Recoil_index_23 = Recoil_index.useRecoilSnapshot;
  var Recoil_index_24 = Recoil_index.useRecoilTransactionObserver_UNSTABLE;
  var Recoil_index_25 = Recoil_index.useTransactionObservation_UNSTABLE;
  var Recoil_index_26 = Recoil_index.useSetUnvalidatedAtomValues_UNSTABLE;
  var Recoil_index_27 = Recoil_index.noWait;
  var Recoil_index_28 = Recoil_index.waitForNone;
  var Recoil_index_29 = Recoil_index.waitForAny;
  var Recoil_index_30 = Recoil_index.waitForAll;
  var Recoil_index_31 = Recoil_index.waitForAllSettled;
  var Recoil_index_32 = Recoil_index.isRecoilValue;
  var Recoil_index_33 = Recoil_index.batchUpdates;
  var Recoil_index_34 = Recoil_index.setBatcher;
  var Recoil_index_35 = Recoil_index.snapshot_UNSTABLE;

  // node_modules/@material-ui/utils/esm/chainPropTypes.js
  function chainPropTypes(propType1, propType2) {
    if (false) {
      return function() {
        return null;
      };
    }
    return function validate() {
      return propType1.apply(void 0, arguments) || propType2.apply(void 0, arguments);
    };
  }

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof3(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof3(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }

  // node_modules/@material-ui/utils/esm/deepmerge.js
  function isPlainObject(item) {
    return item && _typeof(item) === "object" && item.constructor === Object;
  }
  function deepmerge(target, source) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
      clone: true
    };
    var output = options.clone ? _extends({}, target) : target;
    if (isPlainObject(target) && isPlainObject(source)) {
      Object.keys(source).forEach(function(key) {
        if (key === "__proto__") {
          return;
        }
        if (isPlainObject(source[key]) && key in target) {
          output[key] = deepmerge(target[key], source[key], options);
        } else {
          output[key] = source[key];
        }
      });
    }
    return output;
  }

  // node_modules/@material-ui/utils/esm/elementAcceptingRef.js
  var import_prop_types = __toModule(require_prop_types());
  function isClassComponent(elementType2) {
    var _elementType$prototyp = elementType2.prototype, prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
    return Boolean(prototype.isReactComponent);
  }
  function acceptingRef(props, propName, componentName, location, propFullName) {
    var element = props[propName];
    var safePropName = propFullName || propName;
    if (element == null) {
      return null;
    }
    var warningHint;
    var elementType2 = element.type;
    if (typeof elementType2 === "function" && !isClassComponent(elementType2)) {
      warningHint = "Did you accidentally use a plain function component for an element instead?";
    }
    if (warningHint !== void 0) {
      return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element that can hold a ref. ".concat(warningHint, " ") + "For more information see https://material-ui.com/r/caveat-with-refs-guide");
    }
    return null;
  }
  var elementAcceptingRef = chainPropTypes(import_prop_types.default.element, acceptingRef);
  elementAcceptingRef.isRequired = chainPropTypes(import_prop_types.default.element.isRequired, acceptingRef);
  var elementAcceptingRef_default = elementAcceptingRef;

  // node_modules/@material-ui/utils/esm/elementTypeAcceptingRef.js
  var PropTypes2 = __toModule(require_prop_types());
  function isClassComponent2(elementType2) {
    var _elementType$prototyp = elementType2.prototype, prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
    return Boolean(prototype.isReactComponent);
  }
  function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var safePropName = propFullName || propName;
    if (propValue == null) {
      return null;
    }
    var warningHint;
    if (typeof propValue === "function" && !isClassComponent2(propValue)) {
      warningHint = "Did you accidentally provide a plain function component instead?";
    }
    if (warningHint !== void 0) {
      return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element type that can hold a ref. ".concat(warningHint, " ") + "For more information see https://material-ui.com/r/caveat-with-refs-guide");
    }
    return null;
  }
  var elementTypeAcceptingRef_default = chainPropTypes(PropTypes2.elementType, elementTypeAcceptingRef);

  // node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty2(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  // node_modules/@material-ui/utils/esm/exactProp.js
  var specialProperty = "exact-prop: \u200B";
  function exactProp(propTypes) {
    if (false) {
      return propTypes;
    }
    return _extends({}, propTypes, _defineProperty2({}, specialProperty, function(props) {
      var unsupportedProps = Object.keys(props).filter(function(prop) {
        return !propTypes.hasOwnProperty(prop);
      });
      if (unsupportedProps.length > 0) {
        return new Error("The following props are not supported: ".concat(unsupportedProps.map(function(prop) {
          return "`".concat(prop, "`");
        }).join(", "), ". Please remove them."));
      }
      return null;
    }));
  }

  // node_modules/@material-ui/utils/esm/getDisplayName.js
  var import_react_is = __toModule(require_react_is2());
  var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
  function getFunctionName(fn) {
    var match = "".concat(fn).match(fnNameMatchRegex);
    var name = match && match[1];
    return name || "";
  }
  function getFunctionComponentName(Component5) {
    var fallback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    return Component5.displayName || Component5.name || getFunctionName(Component5) || fallback;
  }
  function getWrappedName(outerType, innerType, wrapperName) {
    var functionName = getFunctionComponentName(innerType);
    return outerType.displayName || (functionName !== "" ? "".concat(wrapperName, "(").concat(functionName, ")") : wrapperName);
  }
  function getDisplayName(Component5) {
    if (Component5 == null) {
      return void 0;
    }
    if (typeof Component5 === "string") {
      return Component5;
    }
    if (typeof Component5 === "function") {
      return getFunctionComponentName(Component5, "Component");
    }
    if (_typeof(Component5) === "object") {
      switch (Component5.$$typeof) {
        case import_react_is.ForwardRef:
          return getWrappedName(Component5, Component5.render, "ForwardRef");
        case import_react_is.Memo:
          return getWrappedName(Component5, Component5.type, "memo");
        default:
          return void 0;
      }
    }
    return void 0;
  }

  // node_modules/@material-ui/utils/esm/HTMLElementType.js
  function HTMLElementType(props, propName, componentName, location, propFullName) {
    if (false) {
      return null;
    }
    var propValue = props[propName];
    var safePropName = propFullName || propName;
    if (propValue == null) {
      return null;
    }
    if (propValue && propValue.nodeType !== 1) {
      return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an HTMLElement.");
    }
    return null;
  }

  // node_modules/@material-ui/utils/esm/ponyfillGlobal.js
  var ponyfillGlobal_default = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();

  // node_modules/@material-ui/utils/esm/refType.js
  var import_prop_types2 = __toModule(require_prop_types());
  var refType = import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object]);
  var refType_default = refType;

  // node_modules/@material-ui/core/esm/styles/colorManipulator.js
  function clamp(value) {
    var min = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var max = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
    if (true) {
      if (value < min || value > max) {
        console.error("Material-UI: The value provided ".concat(value, " is out of range [").concat(min, ", ").concat(max, "]."));
      }
    }
    return Math.min(Math.max(min, value), max);
  }
  function hexToRgb(color2) {
    color2 = color2.substr(1);
    var re = new RegExp(".{1,".concat(color2.length >= 6 ? 2 : 1, "}"), "g");
    var colors = color2.match(re);
    if (colors && colors[0].length === 1) {
      colors = colors.map(function(n) {
        return n + n;
      });
    }
    return colors ? "rgb".concat(colors.length === 4 ? "a" : "", "(").concat(colors.map(function(n, index) {
      return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
    }).join(", "), ")") : "";
  }
  function hslToRgb(color2) {
    color2 = decomposeColor(color2);
    var _color = color2, values3 = _color.values;
    var h = values3[0];
    var s = values3[1] / 100;
    var l = values3[2] / 100;
    var a = s * Math.min(l, 1 - l);
    var f = function f2(n) {
      var k = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : (n + h / 30) % 12;
      return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    };
    var type = "rgb";
    var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
    if (color2.type === "hsla") {
      type += "a";
      rgb.push(values3[3]);
    }
    return recomposeColor({
      type,
      values: rgb
    });
  }
  function decomposeColor(color2) {
    if (color2.type) {
      return color2;
    }
    if (color2.charAt(0) === "#") {
      return decomposeColor(hexToRgb(color2));
    }
    var marker = color2.indexOf("(");
    var type = color2.substring(0, marker);
    if (["rgb", "rgba", "hsl", "hsla"].indexOf(type) === -1) {
      throw new Error(true ? "Material-UI: Unsupported `".concat(color2, "` color.\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().") : formatMuiErrorMessage(3, color2));
    }
    var values3 = color2.substring(marker + 1, color2.length - 1).split(",");
    values3 = values3.map(function(value) {
      return parseFloat(value);
    });
    return {
      type,
      values: values3
    };
  }
  function recomposeColor(color2) {
    var type = color2.type;
    var values3 = color2.values;
    if (type.indexOf("rgb") !== -1) {
      values3 = values3.map(function(n, i) {
        return i < 3 ? parseInt(n, 10) : n;
      });
    } else if (type.indexOf("hsl") !== -1) {
      values3[1] = "".concat(values3[1], "%");
      values3[2] = "".concat(values3[2], "%");
    }
    return "".concat(type, "(").concat(values3.join(", "), ")");
  }
  function getContrastRatio(foreground, background) {
    var lumA = getLuminance(foreground);
    var lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
  }
  function getLuminance(color2) {
    color2 = decomposeColor(color2);
    var rgb = color2.type === "hsl" ? decomposeColor(hslToRgb(color2)).values : color2.values;
    rgb = rgb.map(function(val) {
      val /= 255;
      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
    });
    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
  }
  function alpha(color2, value) {
    color2 = decomposeColor(color2);
    value = clamp(value);
    if (color2.type === "rgb" || color2.type === "hsl") {
      color2.type += "a";
    }
    color2.values[3] = value;
    return recomposeColor(color2);
  }
  function darken(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clamp(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] *= 1 - coefficient;
    } else if (color2.type.indexOf("rgb") !== -1) {
      for (var i = 0; i < 3; i += 1) {
        color2.values[i] *= 1 - coefficient;
      }
    }
    return recomposeColor(color2);
  }
  function lighten(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clamp(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] += (100 - color2.values[2]) * coefficient;
    } else if (color2.type.indexOf("rgb") !== -1) {
      for (var i = 0; i < 3; i += 1) {
        color2.values[i] += (255 - color2.values[i]) * coefficient;
      }
    }
    return recomposeColor(color2);
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
  function _objectWithoutProperties(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }

  // node_modules/@material-ui/core/esm/styles/createBreakpoints.js
  var keys = ["xs", "sm", "md", "lg", "xl"];
  function createBreakpoints(breakpoints) {
    var _breakpoints$values = breakpoints.values, values3 = _breakpoints$values === void 0 ? {
      xs: 0,
      sm: 600,
      md: 960,
      lg: 1280,
      xl: 1920
    } : _breakpoints$values, _breakpoints$unit = breakpoints.unit, unit = _breakpoints$unit === void 0 ? "px" : _breakpoints$unit, _breakpoints$step = breakpoints.step, step = _breakpoints$step === void 0 ? 5 : _breakpoints$step, other = _objectWithoutProperties(breakpoints, ["values", "unit", "step"]);
    function up2(key) {
      var value = typeof values3[key] === "number" ? values3[key] : key;
      return "@media (min-width:".concat(value).concat(unit, ")");
    }
    function down(key) {
      var endIndex = keys.indexOf(key) + 1;
      var upperbound = values3[keys[endIndex]];
      if (endIndex === keys.length) {
        return up2("xs");
      }
      var value = typeof upperbound === "number" && endIndex > 0 ? upperbound : key;
      return "@media (max-width:".concat(value - step / 100).concat(unit, ")");
    }
    function between(start, end) {
      var endIndex = keys.indexOf(end);
      if (endIndex === keys.length - 1) {
        return up2(start);
      }
      return "@media (min-width:".concat(typeof values3[start] === "number" ? values3[start] : start).concat(unit, ") and ") + "(max-width:".concat((endIndex !== -1 && typeof values3[keys[endIndex + 1]] === "number" ? values3[keys[endIndex + 1]] : end) - step / 100).concat(unit, ")");
    }
    function only(key) {
      return between(key, key);
    }
    var warnedOnce3 = false;
    function width2(key) {
      if (true) {
        if (!warnedOnce3) {
          warnedOnce3 = true;
          console.warn(["Material-UI: The `theme.breakpoints.width` utility is deprecated because it's redundant.", "Use the `theme.breakpoints.values` instead."].join("\n"));
        }
      }
      return values3[key];
    }
    return _extends({
      keys,
      values: values3,
      up: up2,
      down,
      between,
      only,
      width: width2
    }, other);
  }

  // node_modules/@material-ui/core/esm/styles/createMixins.js
  function createMixins(breakpoints, spacing2, mixins) {
    var _toolbar;
    return _extends({
      gutters: function gutters() {
        var styles82 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        console.warn(["Material-UI: theme.mixins.gutters() is deprecated.", "You can use the source of the mixin directly:", "\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3),\n      },\n      "].join("\n"));
        return _extends({
          paddingLeft: spacing2(2),
          paddingRight: spacing2(2)
        }, styles82, _defineProperty2({}, breakpoints.up("sm"), _extends({
          paddingLeft: spacing2(3),
          paddingRight: spacing2(3)
        }, styles82[breakpoints.up("sm")])));
      },
      toolbar: (_toolbar = {
        minHeight: 56
      }, _defineProperty2(_toolbar, "".concat(breakpoints.up("xs"), " and (orientation: landscape)"), {
        minHeight: 48
      }), _defineProperty2(_toolbar, breakpoints.up("sm"), {
        minHeight: 64
      }), _toolbar)
    }, mixins);
  }

  // node_modules/@material-ui/core/esm/colors/common.js
  var common = {
    black: "#000",
    white: "#fff"
  };
  var common_default = common;

  // node_modules/@material-ui/core/esm/colors/grey.js
  var grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#d5d5d5",
    A200: "#aaaaaa",
    A400: "#303030",
    A700: "#616161"
  };
  var grey_default = grey;

  // node_modules/@material-ui/core/esm/colors/indigo.js
  var indigo = {
    50: "#e8eaf6",
    100: "#c5cae9",
    200: "#9fa8da",
    300: "#7986cb",
    400: "#5c6bc0",
    500: "#3f51b5",
    600: "#3949ab",
    700: "#303f9f",
    800: "#283593",
    900: "#1a237e",
    A100: "#8c9eff",
    A200: "#536dfe",
    A400: "#3d5afe",
    A700: "#304ffe"
  };
  var indigo_default = indigo;

  // node_modules/@material-ui/core/esm/colors/pink.js
  var pink = {
    50: "#fce4ec",
    100: "#f8bbd0",
    200: "#f48fb1",
    300: "#f06292",
    400: "#ec407a",
    500: "#e91e63",
    600: "#d81b60",
    700: "#c2185b",
    800: "#ad1457",
    900: "#880e4f",
    A100: "#ff80ab",
    A200: "#ff4081",
    A400: "#f50057",
    A700: "#c51162"
  };
  var pink_default = pink;

  // node_modules/@material-ui/core/esm/colors/red.js
  var red = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  var red_default = red;

  // node_modules/@material-ui/core/esm/colors/orange.js
  var orange = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  var orange_default = orange;

  // node_modules/@material-ui/core/esm/colors/blue.js
  var blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  var blue_default = blue;

  // node_modules/@material-ui/core/esm/colors/green.js
  var green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  var green_default = green;

  // node_modules/@material-ui/core/esm/styles/createPalette.js
  var light = {
    text: {
      primary: "rgba(0, 0, 0, 0.87)",
      secondary: "rgba(0, 0, 0, 0.54)",
      disabled: "rgba(0, 0, 0, 0.38)",
      hint: "rgba(0, 0, 0, 0.38)"
    },
    divider: "rgba(0, 0, 0, 0.12)",
    background: {
      paper: common_default.white,
      default: grey_default[50]
    },
    action: {
      active: "rgba(0, 0, 0, 0.54)",
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      disabled: "rgba(0, 0, 0, 0.26)",
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  var dark = {
    text: {
      primary: common_default.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      hint: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: grey_default[800],
      default: "#303030"
    },
    action: {
      active: common_default.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    var tonalOffsetLight = tonalOffset.light || tonalOffset;
    var tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === "light") {
        intent.light = lighten(intent.main, tonalOffsetLight);
      } else if (direction === "dark") {
        intent.dark = darken(intent.main, tonalOffsetDark);
      }
    }
  }
  function createPalette(palette2) {
    var _palette$primary = palette2.primary, primary = _palette$primary === void 0 ? {
      light: indigo_default[300],
      main: indigo_default[500],
      dark: indigo_default[700]
    } : _palette$primary, _palette$secondary = palette2.secondary, secondary = _palette$secondary === void 0 ? {
      light: pink_default.A200,
      main: pink_default.A400,
      dark: pink_default.A700
    } : _palette$secondary, _palette$error = palette2.error, error = _palette$error === void 0 ? {
      light: red_default[300],
      main: red_default[500],
      dark: red_default[700]
    } : _palette$error, _palette$warning = palette2.warning, warning2 = _palette$warning === void 0 ? {
      light: orange_default[300],
      main: orange_default[500],
      dark: orange_default[700]
    } : _palette$warning, _palette$info = palette2.info, info = _palette$info === void 0 ? {
      light: blue_default[300],
      main: blue_default[500],
      dark: blue_default[700]
    } : _palette$info, _palette$success = palette2.success, success = _palette$success === void 0 ? {
      light: green_default[300],
      main: green_default[500],
      dark: green_default[700]
    } : _palette$success, _palette$type = palette2.type, type = _palette$type === void 0 ? "light" : _palette$type, _palette$contrastThre = palette2.contrastThreshold, contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre, _palette$tonalOffset = palette2.tonalOffset, tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset, other = _objectWithoutProperties(palette2, ["primary", "secondary", "error", "warning", "info", "success", "type", "contrastThreshold", "tonalOffset"]);
    function getContrastText(background) {
      var contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      if (true) {
        var contrast = getContrastRatio(background, contrastText);
        if (contrast < 3) {
          console.error(["Material-UI: The contrast ratio of ".concat(contrast, ":1 for ").concat(contrastText, " on ").concat(background), "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    var augmentColor = function augmentColor2(color2) {
      var mainShade = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 500;
      var lightShade = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 300;
      var darkShade = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 700;
      color2 = _extends({}, color2);
      if (!color2.main && color2[mainShade]) {
        color2.main = color2[mainShade];
      }
      if (!color2.main) {
        throw new Error(true ? "Material-UI: The color provided to augmentColor(color) is invalid.\nThe color object needs to have a `main` property or a `".concat(mainShade, "` property.") : formatMuiErrorMessage(4, mainShade));
      }
      if (typeof color2.main !== "string") {
        throw new Error(true ? "Material-UI: The color provided to augmentColor(color) is invalid.\n`color.main` should be a string, but `".concat(JSON.stringify(color2.main), '` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport {\xA0green } from "@material-ui/core/colors";\n\nconst theme1 = createTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createTheme({ palette: {\n  primary: { main: green[500] },\n} });') : formatMuiErrorMessage(5, JSON.stringify(color2.main)));
      }
      addLightOrDark(color2, "light", lightShade, tonalOffset);
      addLightOrDark(color2, "dark", darkShade, tonalOffset);
      if (!color2.contrastText) {
        color2.contrastText = getContrastText(color2.main);
      }
      return color2;
    };
    var types = {
      dark,
      light
    };
    if (true) {
      if (!types[type]) {
        console.error("Material-UI: The palette type `".concat(type, "` is not supported."));
      }
    }
    var paletteOutput = deepmerge(_extends({
      common: common_default,
      type,
      primary: augmentColor(primary),
      secondary: augmentColor(secondary, "A400", "A200", "A700"),
      error: augmentColor(error),
      warning: augmentColor(warning2),
      info: augmentColor(info),
      success: augmentColor(success),
      grey: grey_default,
      contrastThreshold,
      getContrastText,
      augmentColor,
      tonalOffset
    }, types[type]), other);
    return paletteOutput;
  }

  // node_modules/@material-ui/core/esm/styles/createTypography.js
  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var warnedOnce = false;
  function roundWithDeprecationWarning(value) {
    if (true) {
      if (!warnedOnce) {
        console.warn(["Material-UI: The `theme.typography.round` helper is deprecated.", "Head to https://material-ui.com/r/migration-v4/#theme for a migration path."].join("\n"));
        warnedOnce = true;
      }
    }
    return round(value);
  }
  var caseAllCaps = {
    textTransform: "uppercase"
  };
  var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography(palette2, typography2) {
    var _ref3 = typeof typography2 === "function" ? typography2(palette2) : typography2, _ref$fontFamily = _ref3.fontFamily, fontFamily2 = _ref$fontFamily === void 0 ? defaultFontFamily : _ref$fontFamily, _ref$fontSize = _ref3.fontSize, fontSize2 = _ref$fontSize === void 0 ? 14 : _ref$fontSize, _ref$fontWeightLight = _ref3.fontWeightLight, fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight, _ref$fontWeightRegula = _ref3.fontWeightRegular, fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula, _ref$fontWeightMedium = _ref3.fontWeightMedium, fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium, _ref$fontWeightBold = _ref3.fontWeightBold, fontWeightBold = _ref$fontWeightBold === void 0 ? 700 : _ref$fontWeightBold, _ref$htmlFontSize = _ref3.htmlFontSize, htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize, allVariants = _ref3.allVariants, pxToRem2 = _ref3.pxToRem, other = _objectWithoutProperties(_ref3, ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"]);
    if (true) {
      if (typeof fontSize2 !== "number") {
        console.error("Material-UI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("Material-UI: `htmlFontSize` is required to be a number.");
      }
    }
    var coef = fontSize2 / 14;
    var pxToRem = pxToRem2 || function(size) {
      return "".concat(size / htmlFontSize * coef, "rem");
    };
    var buildVariant = function buildVariant2(fontWeight2, size, lineHeight2, letterSpacing2, casing) {
      return _extends({
        fontFamily: fontFamily2,
        fontWeight: fontWeight2,
        fontSize: pxToRem(size),
        lineHeight: lineHeight2
      }, fontFamily2 === defaultFontFamily ? {
        letterSpacing: "".concat(round(letterSpacing2 / size), "em")
      } : {}, casing, allVariants);
    };
    var variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
    };
    return deepmerge(_extends({
      htmlFontSize,
      pxToRem,
      round: roundWithDeprecationWarning,
      fontFamily: fontFamily2,
      fontSize: fontSize2,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold
    }, variants), other, {
      clone: false
    });
  }

  // node_modules/@material-ui/core/esm/styles/shadows.js
  var shadowKeyUmbraOpacity = 0.2;
  var shadowKeyPenumbraOpacity = 0.14;
  var shadowAmbientShadowOpacity = 0.12;
  function createShadow() {
    return ["".concat(arguments.length <= 0 ? void 0 : arguments[0], "px ").concat(arguments.length <= 1 ? void 0 : arguments[1], "px ").concat(arguments.length <= 2 ? void 0 : arguments[2], "px ").concat(arguments.length <= 3 ? void 0 : arguments[3], "px rgba(0,0,0,").concat(shadowKeyUmbraOpacity, ")"), "".concat(arguments.length <= 4 ? void 0 : arguments[4], "px ").concat(arguments.length <= 5 ? void 0 : arguments[5], "px ").concat(arguments.length <= 6 ? void 0 : arguments[6], "px ").concat(arguments.length <= 7 ? void 0 : arguments[7], "px rgba(0,0,0,").concat(shadowKeyPenumbraOpacity, ")"), "".concat(arguments.length <= 8 ? void 0 : arguments[8], "px ").concat(arguments.length <= 9 ? void 0 : arguments[9], "px ").concat(arguments.length <= 10 ? void 0 : arguments[10], "px ").concat(arguments.length <= 11 ? void 0 : arguments[11], "px rgba(0,0,0,").concat(shadowAmbientShadowOpacity, ")")].join(",");
  }
  var shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  var shadows_default = shadows;

  // node_modules/@material-ui/core/esm/styles/shape.js
  var shape = {
    borderRadius: 4
  };
  var shape_default = shape;

  // node_modules/@material-ui/system/esm/responsivePropType.js
  var import_prop_types3 = __toModule(require_prop_types());
  var responsivePropType = true ? import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.string, import_prop_types3.default.object, import_prop_types3.default.array]) : {};
  var responsivePropType_default = responsivePropType;

  // node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }

  // node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  }

  // node_modules/@babel/runtime/helpers/esm/iterableToArray.js
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }

  // node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
  function _unsupportedIterableToArray(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }

  // node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  // node_modules/@material-ui/system/esm/breakpoints.js
  var import_prop_types4 = __toModule(require_prop_types());

  // node_modules/@material-ui/system/esm/merge.js
  function merge(acc, item) {
    if (!item) {
      return acc;
    }
    return deepmerge(acc, item, {
      clone: false
    });
  }
  var merge_default = merge;

  // node_modules/@material-ui/system/esm/breakpoints.js
  var values = {
    xs: 0,
    sm: 600,
    md: 960,
    lg: 1280,
    xl: 1920
  };
  var defaultBreakpoints = {
    keys: ["xs", "sm", "md", "lg", "xl"],
    up: function up(key) {
      return "@media (min-width:".concat(values[key], "px)");
    }
  };
  function handleBreakpoints(props, propValue, styleFromPropValue) {
    if (true) {
      if (!props.theme) {
        console.error("Material-UI: You are calling a style function without a theme value.");
      }
    }
    if (Array.isArray(propValue)) {
      var themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;
      return propValue.reduce(function(acc, item, index) {
        acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
        return acc;
      }, {});
    }
    if (_typeof(propValue) === "object") {
      var _themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;
      return Object.keys(propValue).reduce(function(acc, breakpoint) {
        acc[_themeBreakpoints.up(breakpoint)] = styleFromPropValue(propValue[breakpoint]);
        return acc;
      }, {});
    }
    var output = styleFromPropValue(propValue);
    return output;
  }

  // node_modules/@material-ui/system/esm/style.js
  function getPath(obj, path) {
    if (!path || typeof path !== "string") {
      return null;
    }
    return path.split(".").reduce(function(acc, item) {
      return acc && acc[item] ? acc[item] : null;
    }, obj);
  }
  function style(options) {
    var prop = options.prop, _options$cssProperty = options.cssProperty, cssProperty = _options$cssProperty === void 0 ? options.prop : _options$cssProperty, themeKey = options.themeKey, transform4 = options.transform;
    var fn = function fn2(props) {
      if (props[prop] == null) {
        return null;
      }
      var propValue = props[prop];
      var theme2 = props.theme;
      var themeMapping = getPath(theme2, themeKey) || {};
      var styleFromPropValue = function styleFromPropValue2(propValueFinal) {
        var value;
        if (typeof themeMapping === "function") {
          value = themeMapping(propValueFinal);
        } else if (Array.isArray(themeMapping)) {
          value = themeMapping[propValueFinal] || propValueFinal;
        } else {
          value = getPath(themeMapping, propValueFinal) || propValueFinal;
          if (transform4) {
            value = transform4(value);
          }
        }
        if (cssProperty === false) {
          return value;
        }
        return _defineProperty2({}, cssProperty, value);
      };
      return handleBreakpoints(props, propValue, styleFromPropValue);
    };
    fn.propTypes = true ? _defineProperty2({}, prop, responsivePropType_default) : {};
    fn.filterProps = [prop];
    return fn;
  }
  var style_default = style;

  // node_modules/@material-ui/system/esm/compose.js
  function compose() {
    for (var _len = arguments.length, styles82 = new Array(_len), _key = 0; _key < _len; _key++) {
      styles82[_key] = arguments[_key];
    }
    var fn = function fn2(props) {
      return styles82.reduce(function(acc, style2) {
        var output = style2(props);
        if (output) {
          return merge_default(acc, output);
        }
        return acc;
      }, {});
    };
    fn.propTypes = true ? styles82.reduce(function(acc, style2) {
      return _extends(acc, style2.propTypes);
    }, {}) : {};
    fn.filterProps = styles82.reduce(function(acc, style2) {
      return acc.concat(style2.filterProps);
    }, []);
    return fn;
  }
  var compose_default = compose;

  // node_modules/@material-ui/system/esm/borders.js
  function getBorder(value) {
    if (typeof value !== "number") {
      return value;
    }
    return "".concat(value, "px solid");
  }
  var border = style_default({
    prop: "border",
    themeKey: "borders",
    transform: getBorder
  });
  var borderTop = style_default({
    prop: "borderTop",
    themeKey: "borders",
    transform: getBorder
  });
  var borderRight = style_default({
    prop: "borderRight",
    themeKey: "borders",
    transform: getBorder
  });
  var borderBottom = style_default({
    prop: "borderBottom",
    themeKey: "borders",
    transform: getBorder
  });
  var borderLeft = style_default({
    prop: "borderLeft",
    themeKey: "borders",
    transform: getBorder
  });
  var borderColor = style_default({
    prop: "borderColor",
    themeKey: "palette"
  });
  var borderRadius = style_default({
    prop: "borderRadius",
    themeKey: "shape"
  });
  var borders = compose_default(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderRadius);
  var borders_default = borders;

  // node_modules/@material-ui/system/esm/styleFunctionSx.js
  var import_prop_types5 = __toModule(require_prop_types());
  function omit(input, fields) {
    var output = {};
    Object.keys(input).forEach(function(prop) {
      if (fields.indexOf(prop) === -1) {
        output[prop] = input[prop];
      }
    });
    return output;
  }
  var warnedOnce2 = false;
  function styleFunctionSx(styleFunction2) {
    var newStyleFunction = function newStyleFunction2(props) {
      var output = styleFunction2(props);
      if (props.css) {
        return _extends({}, merge_default(output, styleFunction2(_extends({
          theme: props.theme
        }, props.css))), omit(props.css, [styleFunction2.filterProps]));
      }
      if (props.sx) {
        return _extends({}, merge_default(output, styleFunction2(_extends({
          theme: props.theme
        }, props.sx))), omit(props.sx, [styleFunction2.filterProps]));
      }
      return output;
    };
    newStyleFunction.propTypes = true ? _extends({}, styleFunction2.propTypes, {
      css: chainPropTypes(import_prop_types5.default.object, function(props) {
        if (!warnedOnce2 && props.css !== void 0) {
          warnedOnce2 = true;
          return new Error("Material-UI: The `css` prop is deprecated, please use the `sx` prop instead.");
        }
        return null;
      }),
      sx: import_prop_types5.default.object
    }) : {};
    newStyleFunction.filterProps = ["css", "sx"].concat(_toConsumableArray(styleFunction2.filterProps));
    return newStyleFunction;
  }
  var styleFunctionSx_default = styleFunctionSx;

  // node_modules/@material-ui/system/esm/display.js
  var displayPrint = style_default({
    prop: "displayPrint",
    cssProperty: false,
    transform: function transform(value) {
      return {
        "@media print": {
          display: value
        }
      };
    }
  });
  var displayRaw = style_default({
    prop: "display"
  });
  var overflow = style_default({
    prop: "overflow"
  });
  var textOverflow = style_default({
    prop: "textOverflow"
  });
  var visibility = style_default({
    prop: "visibility"
  });
  var whiteSpace = style_default({
    prop: "whiteSpace"
  });
  var display_default = compose_default(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

  // node_modules/@material-ui/system/esm/flexbox.js
  var flexBasis = style_default({
    prop: "flexBasis"
  });
  var flexDirection = style_default({
    prop: "flexDirection"
  });
  var flexWrap = style_default({
    prop: "flexWrap"
  });
  var justifyContent = style_default({
    prop: "justifyContent"
  });
  var alignItems = style_default({
    prop: "alignItems"
  });
  var alignContent = style_default({
    prop: "alignContent"
  });
  var order = style_default({
    prop: "order"
  });
  var flex = style_default({
    prop: "flex"
  });
  var flexGrow = style_default({
    prop: "flexGrow"
  });
  var flexShrink = style_default({
    prop: "flexShrink"
  });
  var alignSelf = style_default({
    prop: "alignSelf"
  });
  var justifyItems = style_default({
    prop: "justifyItems"
  });
  var justifySelf = style_default({
    prop: "justifySelf"
  });
  var flexbox = compose_default(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
  var flexbox_default = flexbox;

  // node_modules/@material-ui/system/esm/grid.js
  var gridGap = style_default({
    prop: "gridGap"
  });
  var gridColumnGap = style_default({
    prop: "gridColumnGap"
  });
  var gridRowGap = style_default({
    prop: "gridRowGap"
  });
  var gridColumn = style_default({
    prop: "gridColumn"
  });
  var gridRow = style_default({
    prop: "gridRow"
  });
  var gridAutoFlow = style_default({
    prop: "gridAutoFlow"
  });
  var gridAutoColumns = style_default({
    prop: "gridAutoColumns"
  });
  var gridAutoRows = style_default({
    prop: "gridAutoRows"
  });
  var gridTemplateColumns = style_default({
    prop: "gridTemplateColumns"
  });
  var gridTemplateRows = style_default({
    prop: "gridTemplateRows"
  });
  var gridTemplateAreas = style_default({
    prop: "gridTemplateAreas"
  });
  var gridArea = style_default({
    prop: "gridArea"
  });
  var grid = compose_default(gridGap, gridColumnGap, gridRowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
  var grid_default = grid;

  // node_modules/@material-ui/system/esm/palette.js
  var color = style_default({
    prop: "color",
    themeKey: "palette"
  });
  var bgcolor = style_default({
    prop: "bgcolor",
    cssProperty: "backgroundColor",
    themeKey: "palette"
  });
  var palette = compose_default(color, bgcolor);
  var palette_default = palette;

  // node_modules/@material-ui/system/esm/positions.js
  var position = style_default({
    prop: "position"
  });
  var zIndex = style_default({
    prop: "zIndex",
    themeKey: "zIndex"
  });
  var top = style_default({
    prop: "top"
  });
  var right = style_default({
    prop: "right"
  });
  var bottom = style_default({
    prop: "bottom"
  });
  var left = style_default({
    prop: "left"
  });
  var positions_default = compose_default(position, zIndex, top, right, bottom, left);

  // node_modules/@material-ui/system/esm/shadows.js
  var boxShadow = style_default({
    prop: "boxShadow",
    themeKey: "shadows"
  });
  var shadows_default2 = boxShadow;

  // node_modules/@material-ui/system/esm/sizing.js
  function transform2(value) {
    return value <= 1 ? "".concat(value * 100, "%") : value;
  }
  var width = style_default({
    prop: "width",
    transform: transform2
  });
  var maxWidth = style_default({
    prop: "maxWidth",
    transform: transform2
  });
  var minWidth = style_default({
    prop: "minWidth",
    transform: transform2
  });
  var height = style_default({
    prop: "height",
    transform: transform2
  });
  var maxHeight = style_default({
    prop: "maxHeight",
    transform: transform2
  });
  var minHeight = style_default({
    prop: "minHeight",
    transform: transform2
  });
  var sizeWidth = style_default({
    prop: "size",
    cssProperty: "width",
    transform: transform2
  });
  var sizeHeight = style_default({
    prop: "size",
    cssProperty: "height",
    transform: transform2
  });
  var boxSizing = style_default({
    prop: "boxSizing"
  });
  var sizing = compose_default(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
  var sizing_default = sizing;

  // node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }

  // node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }

  // node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@babel/runtime/helpers/esm/slicedToArray.js
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  // node_modules/@material-ui/system/esm/memoize.js
  function memoize(fn) {
    var cache3 = {};
    return function(arg) {
      if (cache3[arg] === void 0) {
        cache3[arg] = fn(arg);
      }
      return cache3[arg];
    };
  }

  // node_modules/@material-ui/system/esm/spacing.js
  var properties = {
    m: "margin",
    p: "padding"
  };
  var directions = {
    t: "Top",
    r: "Right",
    b: "Bottom",
    l: "Left",
    x: ["Left", "Right"],
    y: ["Top", "Bottom"]
  };
  var aliases = {
    marginX: "mx",
    marginY: "my",
    paddingX: "px",
    paddingY: "py"
  };
  var getCssProperties = memoize(function(prop) {
    if (prop.length > 2) {
      if (aliases[prop]) {
        prop = aliases[prop];
      } else {
        return [prop];
      }
    }
    var _prop$split = prop.split(""), _prop$split2 = _slicedToArray(_prop$split, 2), a = _prop$split2[0], b = _prop$split2[1];
    var property = properties[a];
    var direction = directions[b] || "";
    return Array.isArray(direction) ? direction.map(function(dir) {
      return property + dir;
    }) : [property + direction];
  });
  var spacingKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "p", "pt", "pr", "pb", "pl", "px", "py", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY"];
  function createUnarySpacing(theme2) {
    var themeSpacing = theme2.spacing || 8;
    if (typeof themeSpacing === "number") {
      return function(abs) {
        if (true) {
          if (typeof abs !== "number") {
            console.error("Material-UI: Expected spacing argument to be a number, got ".concat(abs, "."));
          }
        }
        return themeSpacing * abs;
      };
    }
    if (Array.isArray(themeSpacing)) {
      return function(abs) {
        if (true) {
          if (abs > themeSpacing.length - 1) {
            console.error(["Material-UI: The value provided (".concat(abs, ") overflows."), "The supported values are: ".concat(JSON.stringify(themeSpacing), "."), "".concat(abs, " > ").concat(themeSpacing.length - 1, ", you need to add the missing values.")].join("\n"));
          }
        }
        return themeSpacing[abs];
      };
    }
    if (typeof themeSpacing === "function") {
      return themeSpacing;
    }
    if (true) {
      console.error(["Material-UI: The `theme.spacing` value (".concat(themeSpacing, ") is invalid."), "It should be a number, an array or a function."].join("\n"));
    }
    return function() {
      return void 0;
    };
  }
  function getValue(transformer, propValue) {
    if (typeof propValue === "string" || propValue == null) {
      return propValue;
    }
    var abs = Math.abs(propValue);
    var transformed = transformer(abs);
    if (propValue >= 0) {
      return transformed;
    }
    if (typeof transformed === "number") {
      return -transformed;
    }
    return "-".concat(transformed);
  }
  function getStyleFromPropValue(cssProperties, transformer) {
    return function(propValue) {
      return cssProperties.reduce(function(acc, cssProperty) {
        acc[cssProperty] = getValue(transformer, propValue);
        return acc;
      }, {});
    };
  }
  function spacing(props) {
    var theme2 = props.theme;
    var transformer = createUnarySpacing(theme2);
    return Object.keys(props).map(function(prop) {
      if (spacingKeys.indexOf(prop) === -1) {
        return null;
      }
      var cssProperties = getCssProperties(prop);
      var styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
      var propValue = props[prop];
      return handleBreakpoints(props, propValue, styleFromPropValue);
    }).reduce(merge_default, {});
  }
  spacing.propTypes = true ? spacingKeys.reduce(function(obj, key) {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  spacing.filterProps = spacingKeys;
  var spacing_default = spacing;

  // node_modules/@material-ui/system/esm/typography.js
  var fontFamily = style_default({
    prop: "fontFamily",
    themeKey: "typography"
  });
  var fontSize = style_default({
    prop: "fontSize",
    themeKey: "typography"
  });
  var fontStyle = style_default({
    prop: "fontStyle",
    themeKey: "typography"
  });
  var fontWeight = style_default({
    prop: "fontWeight",
    themeKey: "typography"
  });
  var letterSpacing = style_default({
    prop: "letterSpacing"
  });
  var lineHeight = style_default({
    prop: "lineHeight"
  });
  var textAlign = style_default({
    prop: "textAlign"
  });
  var typography = compose_default(fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign);
  var typography_default = typography;

  // node_modules/@material-ui/core/esm/styles/createSpacing.js
  var warnOnce;
  function createSpacing() {
    var spacingInput = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 8;
    if (spacingInput.mui) {
      return spacingInput;
    }
    var transform4 = createUnarySpacing({
      spacing: spacingInput
    });
    var spacing2 = function spacing3() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (true) {
        if (!(args.length <= 4)) {
          console.error("Material-UI: Too many arguments provided, expected between 0 and 4, got ".concat(args.length));
        }
      }
      if (args.length === 0) {
        return transform4(1);
      }
      if (args.length === 1) {
        return transform4(args[0]);
      }
      return args.map(function(argument) {
        if (typeof argument === "string") {
          return argument;
        }
        var output = transform4(argument);
        return typeof output === "number" ? "".concat(output, "px") : output;
      }).join(" ");
    };
    Object.defineProperty(spacing2, "unit", {
      get: function get2() {
        if (true) {
          if (!warnOnce || false) {
            console.error(["Material-UI: theme.spacing.unit usage has been deprecated.", "It will be removed in v5.", "You can replace `theme.spacing.unit * y` with `theme.spacing(y)`.", "", "You can use the `https://github.com/mui-org/material-ui/tree/master/packages/material-ui-codemod/README.md#theme-spacing-api` migration helper to make the process smoother."].join("\n"));
          }
          warnOnce = true;
        }
        return spacingInput;
      }
    });
    spacing2.mui = true;
    return spacing2;
  }

  // node_modules/@material-ui/core/esm/styles/transitions.js
  var easing = {
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  var duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    standard: 300,
    complex: 375,
    enteringScreen: 225,
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return "".concat(Math.round(milliseconds), "ms");
  }
  var transitions_default = {
    easing,
    duration,
    create: function create() {
      var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ["all"];
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var _options$duration = options.duration, durationOption = _options$duration === void 0 ? duration.standard : _options$duration, _options$easing = options.easing, easingOption = _options$easing === void 0 ? easing.easeInOut : _options$easing, _options$delay = options.delay, delay = _options$delay === void 0 ? 0 : _options$delay, other = _objectWithoutProperties(options, ["duration", "easing", "delay"]);
      if (true) {
        var isString = function isString2(value) {
          return typeof value === "string";
        };
        var isNumber = function isNumber2(value) {
          return !isNaN(parseFloat(value));
        };
        if (!isString(props) && !Array.isArray(props)) {
          console.error('Material-UI: Argument "props" must be a string or Array.');
        }
        if (!isNumber(durationOption) && !isString(durationOption)) {
          console.error('Material-UI: Argument "duration" must be a number or a string but found '.concat(durationOption, "."));
        }
        if (!isString(easingOption)) {
          console.error('Material-UI: Argument "easing" must be a string.');
        }
        if (!isNumber(delay) && !isString(delay)) {
          console.error('Material-UI: Argument "delay" must be a number or a string.');
        }
        if (Object.keys(other).length !== 0) {
          console.error("Material-UI: Unrecognized argument(s) [".concat(Object.keys(other).join(","), "]."));
        }
      }
      return (Array.isArray(props) ? props : [props]).map(function(animatedProp) {
        return "".concat(animatedProp, " ").concat(typeof durationOption === "string" ? durationOption : formatMs(durationOption), " ").concat(easingOption, " ").concat(typeof delay === "string" ? delay : formatMs(delay));
      }).join(",");
    },
    getAutoHeightDuration: function getAutoHeightDuration(height2) {
      if (!height2) {
        return 0;
      }
      var constant = height2 / 36;
      return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
    }
  };

  // node_modules/@material-ui/core/esm/styles/zIndex.js
  var zIndex2 = {
    mobileStepper: 1e3,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  var zIndex_default = zIndex2;

  // node_modules/@material-ui/core/esm/styles/createTheme.js
  function createTheme() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var _options$breakpoints = options.breakpoints, breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints, _options$mixins = options.mixins, mixinsInput = _options$mixins === void 0 ? {} : _options$mixins, _options$palette = options.palette, paletteInput = _options$palette === void 0 ? {} : _options$palette, spacingInput = options.spacing, _options$typography = options.typography, typographyInput = _options$typography === void 0 ? {} : _options$typography, other = _objectWithoutProperties(options, ["breakpoints", "mixins", "palette", "spacing", "typography"]);
    var palette2 = createPalette(paletteInput);
    var breakpoints = createBreakpoints(breakpointsInput);
    var spacing2 = createSpacing(spacingInput);
    var muiTheme = deepmerge({
      breakpoints,
      direction: "ltr",
      mixins: createMixins(breakpoints, spacing2, mixinsInput),
      overrides: {},
      palette: palette2,
      props: {},
      shadows: shadows_default,
      typography: createTypography(palette2, typographyInput),
      spacing: spacing2,
      shape: shape_default,
      transitions: transitions_default,
      zIndex: zIndex_default
    }, other);
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    muiTheme = args.reduce(function(acc, argument) {
      return deepmerge(acc, argument);
    }, muiTheme);
    if (true) {
      var pseudoClasses2 = ["checked", "disabled", "error", "focused", "focusVisible", "required", "expanded", "selected"];
      var traverse = function traverse2(node, parentKey) {
        var depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
        var key;
        for (key in node) {
          var child = node[key];
          if (depth === 1) {
            if (key.indexOf("Mui") === 0 && child) {
              traverse2(child, key, depth + 1);
            }
          } else if (pseudoClasses2.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            if (true) {
              console.error(["Material-UI: The `".concat(parentKey, "` component increases ") + "the CSS specificity of the `".concat(key, "` internal state."), "You can not override it like this: ", JSON.stringify(node, null, 2), "", "Instead, you need to use the $ruleName syntax:", JSON.stringify({
                root: _defineProperty2({}, "&$".concat(key), child)
              }, null, 2), "", "https://material-ui.com/r/pseudo-classes-guide"].join("\n"));
            }
            node[key] = {};
          }
        }
      };
      traverse(muiTheme.overrides);
    }
    return muiTheme;
  }
  var createTheme_default = createTheme;

  // node_modules/@material-ui/styles/esm/ThemeProvider/nested.js
  var hasSymbol = typeof Symbol === "function" && Symbol.for;
  var nested_default = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";

  // node_modules/@material-ui/styles/esm/createGenerateClassName/createGenerateClassName.js
  var pseudoClasses = ["checked", "disabled", "error", "focused", "focusVisible", "required", "expanded", "selected"];
  function createGenerateClassName() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var _options$disableGloba = options.disableGlobal, disableGlobal = _options$disableGloba === void 0 ? false : _options$disableGloba, _options$productionPr = options.productionPrefix, productionPrefix = _options$productionPr === void 0 ? "jss" : _options$productionPr, _options$seed = options.seed, seed = _options$seed === void 0 ? "" : _options$seed;
    var seedPrefix = seed === "" ? "" : "".concat(seed, "-");
    var ruleCounter = 0;
    var getNextCounterId = function getNextCounterId2() {
      ruleCounter += 1;
      if (true) {
        if (ruleCounter >= 1e10) {
          console.warn(["Material-UI: You might have a memory leak.", "The ruleCounter is not supposed to grow that much."].join(""));
        }
      }
      return ruleCounter;
    };
    return function(rule, styleSheet) {
      var name = styleSheet.options.name;
      if (name && name.indexOf("Mui") === 0 && !styleSheet.options.link && !disableGlobal) {
        if (pseudoClasses.indexOf(rule.key) !== -1) {
          return "Mui-".concat(rule.key);
        }
        var prefix2 = "".concat(seedPrefix).concat(name, "-").concat(rule.key);
        if (!styleSheet.options.theme[nested_default] || seed !== "") {
          return prefix2;
        }
        return "".concat(prefix2, "-").concat(getNextCounterId());
      }
      if (false) {
        return "".concat(seedPrefix).concat(productionPrefix).concat(getNextCounterId());
      }
      var suffix = "".concat(rule.key, "-").concat(getNextCounterId());
      if (styleSheet.options.classNamePrefix) {
        return "".concat(seedPrefix).concat(styleSheet.options.classNamePrefix, "-").concat(suffix);
      }
      return "".concat(seedPrefix).concat(suffix);
    };
  }

  // node_modules/@material-ui/styles/esm/getThemeProps/getThemeProps.js
  function getThemeProps(params) {
    var theme2 = params.theme, name = params.name, props = params.props;
    if (!theme2 || !theme2.props || !theme2.props[name]) {
      return props;
    }
    var defaultProps2 = theme2.props[name];
    var propName;
    for (propName in defaultProps2) {
      if (props[propName] === void 0) {
        props[propName] = defaultProps2[propName];
      }
    }
    return props;
  }

  // node_modules/tiny-warning/dist/tiny-warning.esm.js
  var isProduction = false;
  function warning(condition, message) {
    if (!isProduction) {
      if (condition) {
        return;
      }
      var text = "Warning: " + message;
      if (typeof console !== "undefined") {
        console.warn(text);
      }
      try {
        throw Error(text);
      } catch (x) {
      }
    }
  }
  var tiny_warning_esm_default = warning;

  // node_modules/is-in-browser/dist/module.js
  var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };
  var isBrowser = (typeof window === "undefined" ? "undefined" : _typeof2(window)) === "object" && (typeof document === "undefined" ? "undefined" : _typeof2(document)) === "object" && document.nodeType === 9;
  var module_default = isBrowser;

  // node_modules/@babel/runtime/helpers/esm/createClass.js
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }

  // node_modules/jss/dist/jss.esm.js
  var plainObjectConstrurctor = {}.constructor;
  function cloneStyle(style2) {
    if (style2 == null || typeof style2 !== "object")
      return style2;
    if (Array.isArray(style2))
      return style2.map(cloneStyle);
    if (style2.constructor !== plainObjectConstrurctor)
      return style2;
    var newStyle = {};
    for (var name in style2) {
      newStyle[name] = cloneStyle(style2[name]);
    }
    return newStyle;
  }
  function createRule(name, decl, options) {
    if (name === void 0) {
      name = "unnamed";
    }
    var jss3 = options.jss;
    var declCopy = cloneStyle(decl);
    var rule = jss3.plugins.onCreateRule(name, declCopy, options);
    if (rule)
      return rule;
    if (name[0] === "@") {
      true ? tiny_warning_esm_default(false, "[JSS] Unknown rule " + name) : void 0;
    }
    return null;
  }
  var join = function join2(value, by) {
    var result = "";
    for (var i = 0; i < value.length; i++) {
      if (value[i] === "!important")
        break;
      if (result)
        result += by;
      result += value[i];
    }
    return result;
  };
  var toCssValue = function toCssValue2(value, ignoreImportant) {
    if (ignoreImportant === void 0) {
      ignoreImportant = false;
    }
    if (!Array.isArray(value))
      return value;
    var cssValue = "";
    if (Array.isArray(value[0])) {
      for (var i = 0; i < value.length; i++) {
        if (value[i] === "!important")
          break;
        if (cssValue)
          cssValue += ", ";
        cssValue += join(value[i], " ");
      }
    } else
      cssValue = join(value, ", ");
    if (!ignoreImportant && value[value.length - 1] === "!important") {
      cssValue += " !important";
    }
    return cssValue;
  };
  function indentStr(str, indent) {
    var result = "";
    for (var index = 0; index < indent; index++) {
      result += "  ";
    }
    return result + str;
  }
  function toCss(selector2, style2, options) {
    if (options === void 0) {
      options = {};
    }
    var result = "";
    if (!style2)
      return result;
    var _options = options, _options$indent = _options.indent, indent = _options$indent === void 0 ? 0 : _options$indent;
    var fallbacks = style2.fallbacks;
    if (selector2)
      indent++;
    if (fallbacks) {
      if (Array.isArray(fallbacks)) {
        for (var index = 0; index < fallbacks.length; index++) {
          var fallback = fallbacks[index];
          for (var prop in fallback) {
            var value = fallback[prop];
            if (value != null) {
              if (result)
                result += "\n";
              result += indentStr(prop + ": " + toCssValue(value) + ";", indent);
            }
          }
        }
      } else {
        for (var _prop in fallbacks) {
          var _value = fallbacks[_prop];
          if (_value != null) {
            if (result)
              result += "\n";
            result += indentStr(_prop + ": " + toCssValue(_value) + ";", indent);
          }
        }
      }
    }
    for (var _prop2 in style2) {
      var _value2 = style2[_prop2];
      if (_value2 != null && _prop2 !== "fallbacks") {
        if (result)
          result += "\n";
        result += indentStr(_prop2 + ": " + toCssValue(_value2) + ";", indent);
      }
    }
    if (!result && !options.allowEmpty)
      return result;
    if (!selector2)
      return result;
    indent--;
    if (result)
      result = "\n" + result + "\n";
    return indentStr(selector2 + " {" + result, indent) + indentStr("}", indent);
  }
  var escapeRegex = /([[\].#*$><+~=|^:(),"'`\s])/g;
  var nativeEscape = typeof CSS !== "undefined" && CSS.escape;
  var escape = function(str) {
    return nativeEscape ? nativeEscape(str) : str.replace(escapeRegex, "\\$1");
  };
  var BaseStyleRule = /* @__PURE__ */ function() {
    function BaseStyleRule2(key, style2, options) {
      this.type = "style";
      this.key = void 0;
      this.isProcessed = false;
      this.style = void 0;
      this.renderer = void 0;
      this.renderable = void 0;
      this.options = void 0;
      var sheet = options.sheet, Renderer = options.Renderer;
      this.key = key;
      this.options = options;
      this.style = style2;
      if (sheet)
        this.renderer = sheet.renderer;
      else if (Renderer)
        this.renderer = new Renderer();
    }
    var _proto = BaseStyleRule2.prototype;
    _proto.prop = function prop(name, value, options) {
      if (value === void 0)
        return this.style[name];
      var force = options ? options.force : false;
      if (!force && this.style[name] === value)
        return this;
      var newValue = value;
      if (!options || options.process !== false) {
        newValue = this.options.jss.plugins.onChangeValue(value, name, this);
      }
      var isEmpty2 = newValue == null || newValue === false;
      var isDefined = name in this.style;
      if (isEmpty2 && !isDefined && !force)
        return this;
      var remove = isEmpty2 && isDefined;
      if (remove)
        delete this.style[name];
      else
        this.style[name] = newValue;
      if (this.renderable && this.renderer) {
        if (remove)
          this.renderer.removeProperty(this.renderable, name);
        else
          this.renderer.setProperty(this.renderable, name, newValue);
        return this;
      }
      var sheet = this.options.sheet;
      if (sheet && sheet.attached) {
        true ? tiny_warning_esm_default(false, '[JSS] Rule is not linked. Missing sheet option "link: true".') : void 0;
      }
      return this;
    };
    return BaseStyleRule2;
  }();
  var StyleRule = /* @__PURE__ */ function(_BaseStyleRule) {
    _inheritsLoose(StyleRule2, _BaseStyleRule);
    function StyleRule2(key, style2, options) {
      var _this;
      _this = _BaseStyleRule.call(this, key, style2, options) || this;
      _this.selectorText = void 0;
      _this.id = void 0;
      _this.renderable = void 0;
      var selector2 = options.selector, scoped = options.scoped, sheet = options.sheet, generateId = options.generateId;
      if (selector2) {
        _this.selectorText = selector2;
      } else if (scoped !== false) {
        _this.id = generateId(_assertThisInitialized(_assertThisInitialized(_this)), sheet);
        _this.selectorText = "." + escape(_this.id);
      }
      return _this;
    }
    var _proto2 = StyleRule2.prototype;
    _proto2.applyTo = function applyTo(renderable) {
      var renderer = this.renderer;
      if (renderer) {
        var json = this.toJSON();
        for (var prop in json) {
          renderer.setProperty(renderable, prop, json[prop]);
        }
      }
      return this;
    };
    _proto2.toJSON = function toJSON() {
      var json = {};
      for (var prop in this.style) {
        var value = this.style[prop];
        if (typeof value !== "object")
          json[prop] = value;
        else if (Array.isArray(value))
          json[prop] = toCssValue(value);
      }
      return json;
    };
    _proto2.toString = function toString(options) {
      var sheet = this.options.sheet;
      var link = sheet ? sheet.options.link : false;
      var opts = link ? _extends({}, options, {
        allowEmpty: true
      }) : options;
      return toCss(this.selectorText, this.style, opts);
    };
    _createClass(StyleRule2, [{
      key: "selector",
      set: function set2(selector2) {
        if (selector2 === this.selectorText)
          return;
        this.selectorText = selector2;
        var renderer = this.renderer, renderable = this.renderable;
        if (!renderable || !renderer)
          return;
        var hasChanged = renderer.setSelector(renderable, selector2);
        if (!hasChanged) {
          renderer.replaceRule(renderable, this);
        }
      },
      get: function get2() {
        return this.selectorText;
      }
    }]);
    return StyleRule2;
  }(BaseStyleRule);
  var pluginStyleRule = {
    onCreateRule: function onCreateRule(name, style2, options) {
      if (name[0] === "@" || options.parent && options.parent.type === "keyframes") {
        return null;
      }
      return new StyleRule(name, style2, options);
    }
  };
  var defaultToStringOptions = {
    indent: 1,
    children: true
  };
  var atRegExp = /@([\w-]+)/;
  var ConditionalRule = /* @__PURE__ */ function() {
    function ConditionalRule2(key, styles82, options) {
      this.type = "conditional";
      this.at = void 0;
      this.key = void 0;
      this.query = void 0;
      this.rules = void 0;
      this.options = void 0;
      this.isProcessed = false;
      this.renderable = void 0;
      this.key = key;
      var atMatch = key.match(atRegExp);
      this.at = atMatch ? atMatch[1] : "unknown";
      this.query = options.name || "@" + this.at;
      this.options = options;
      this.rules = new RuleList(_extends({}, options, {
        parent: this
      }));
      for (var name in styles82) {
        this.rules.add(name, styles82[name]);
      }
      this.rules.process();
    }
    var _proto = ConditionalRule2.prototype;
    _proto.getRule = function getRule(name) {
      return this.rules.get(name);
    };
    _proto.indexOf = function indexOf(rule) {
      return this.rules.indexOf(rule);
    };
    _proto.addRule = function addRule(name, style2, options) {
      var rule = this.rules.add(name, style2, options);
      if (!rule)
        return null;
      this.options.jss.plugins.onProcessRule(rule);
      return rule;
    };
    _proto.toString = function toString(options) {
      if (options === void 0) {
        options = defaultToStringOptions;
      }
      if (options.indent == null)
        options.indent = defaultToStringOptions.indent;
      if (options.children == null)
        options.children = defaultToStringOptions.children;
      if (options.children === false) {
        return this.query + " {}";
      }
      var children = this.rules.toString(options);
      return children ? this.query + " {\n" + children + "\n}" : "";
    };
    return ConditionalRule2;
  }();
  var keyRegExp = /@media|@supports\s+/;
  var pluginConditionalRule = {
    onCreateRule: function onCreateRule2(key, styles82, options) {
      return keyRegExp.test(key) ? new ConditionalRule(key, styles82, options) : null;
    }
  };
  var defaultToStringOptions$1 = {
    indent: 1,
    children: true
  };
  var nameRegExp = /@keyframes\s+([\w-]+)/;
  var KeyframesRule = /* @__PURE__ */ function() {
    function KeyframesRule2(key, frames, options) {
      this.type = "keyframes";
      this.at = "@keyframes";
      this.key = void 0;
      this.name = void 0;
      this.id = void 0;
      this.rules = void 0;
      this.options = void 0;
      this.isProcessed = false;
      this.renderable = void 0;
      var nameMatch = key.match(nameRegExp);
      if (nameMatch && nameMatch[1]) {
        this.name = nameMatch[1];
      } else {
        this.name = "noname";
        true ? tiny_warning_esm_default(false, "[JSS] Bad keyframes name " + key) : void 0;
      }
      this.key = this.type + "-" + this.name;
      this.options = options;
      var scoped = options.scoped, sheet = options.sheet, generateId = options.generateId;
      this.id = scoped === false ? this.name : escape(generateId(this, sheet));
      this.rules = new RuleList(_extends({}, options, {
        parent: this
      }));
      for (var name in frames) {
        this.rules.add(name, frames[name], _extends({}, options, {
          parent: this
        }));
      }
      this.rules.process();
    }
    var _proto = KeyframesRule2.prototype;
    _proto.toString = function toString(options) {
      if (options === void 0) {
        options = defaultToStringOptions$1;
      }
      if (options.indent == null)
        options.indent = defaultToStringOptions$1.indent;
      if (options.children == null)
        options.children = defaultToStringOptions$1.children;
      if (options.children === false) {
        return this.at + " " + this.id + " {}";
      }
      var children = this.rules.toString(options);
      if (children)
        children = "\n" + children + "\n";
      return this.at + " " + this.id + " {" + children + "}";
    };
    return KeyframesRule2;
  }();
  var keyRegExp$1 = /@keyframes\s+/;
  var refRegExp = /\$([\w-]+)/g;
  var findReferencedKeyframe = function findReferencedKeyframe2(val, keyframes) {
    if (typeof val === "string") {
      return val.replace(refRegExp, function(match, name) {
        if (name in keyframes) {
          return keyframes[name];
        }
        true ? tiny_warning_esm_default(false, '[JSS] Referenced keyframes rule "' + name + '" is not defined.') : void 0;
        return match;
      });
    }
    return val;
  };
  var replaceRef = function replaceRef2(style2, prop, keyframes) {
    var value = style2[prop];
    var refKeyframe = findReferencedKeyframe(value, keyframes);
    if (refKeyframe !== value) {
      style2[prop] = refKeyframe;
    }
  };
  var plugin = {
    onCreateRule: function onCreateRule3(key, frames, options) {
      return typeof key === "string" && keyRegExp$1.test(key) ? new KeyframesRule(key, frames, options) : null;
    },
    onProcessStyle: function onProcessStyle(style2, rule, sheet) {
      if (rule.type !== "style" || !sheet)
        return style2;
      if ("animation-name" in style2)
        replaceRef(style2, "animation-name", sheet.keyframes);
      if ("animation" in style2)
        replaceRef(style2, "animation", sheet.keyframes);
      return style2;
    },
    onChangeValue: function onChangeValue(val, prop, rule) {
      var sheet = rule.options.sheet;
      if (!sheet) {
        return val;
      }
      switch (prop) {
        case "animation":
          return findReferencedKeyframe(val, sheet.keyframes);
        case "animation-name":
          return findReferencedKeyframe(val, sheet.keyframes);
        default:
          return val;
      }
    }
  };
  var KeyframeRule = /* @__PURE__ */ function(_BaseStyleRule) {
    _inheritsLoose(KeyframeRule2, _BaseStyleRule);
    function KeyframeRule2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _BaseStyleRule.call.apply(_BaseStyleRule, [this].concat(args)) || this;
      _this.renderable = void 0;
      return _this;
    }
    var _proto = KeyframeRule2.prototype;
    _proto.toString = function toString(options) {
      var sheet = this.options.sheet;
      var link = sheet ? sheet.options.link : false;
      var opts = link ? _extends({}, options, {
        allowEmpty: true
      }) : options;
      return toCss(this.key, this.style, opts);
    };
    return KeyframeRule2;
  }(BaseStyleRule);
  var pluginKeyframeRule = {
    onCreateRule: function onCreateRule4(key, style2, options) {
      if (options.parent && options.parent.type === "keyframes") {
        return new KeyframeRule(key, style2, options);
      }
      return null;
    }
  };
  var FontFaceRule = /* @__PURE__ */ function() {
    function FontFaceRule2(key, style2, options) {
      this.type = "font-face";
      this.at = "@font-face";
      this.key = void 0;
      this.style = void 0;
      this.options = void 0;
      this.isProcessed = false;
      this.renderable = void 0;
      this.key = key;
      this.style = style2;
      this.options = options;
    }
    var _proto = FontFaceRule2.prototype;
    _proto.toString = function toString(options) {
      if (Array.isArray(this.style)) {
        var str = "";
        for (var index = 0; index < this.style.length; index++) {
          str += toCss(this.at, this.style[index]);
          if (this.style[index + 1])
            str += "\n";
        }
        return str;
      }
      return toCss(this.at, this.style, options);
    };
    return FontFaceRule2;
  }();
  var keyRegExp$2 = /@font-face/;
  var pluginFontFaceRule = {
    onCreateRule: function onCreateRule5(key, style2, options) {
      return keyRegExp$2.test(key) ? new FontFaceRule(key, style2, options) : null;
    }
  };
  var ViewportRule = /* @__PURE__ */ function() {
    function ViewportRule2(key, style2, options) {
      this.type = "viewport";
      this.at = "@viewport";
      this.key = void 0;
      this.style = void 0;
      this.options = void 0;
      this.isProcessed = false;
      this.renderable = void 0;
      this.key = key;
      this.style = style2;
      this.options = options;
    }
    var _proto = ViewportRule2.prototype;
    _proto.toString = function toString(options) {
      return toCss(this.key, this.style, options);
    };
    return ViewportRule2;
  }();
  var pluginViewportRule = {
    onCreateRule: function onCreateRule6(key, style2, options) {
      return key === "@viewport" || key === "@-ms-viewport" ? new ViewportRule(key, style2, options) : null;
    }
  };
  var SimpleRule = /* @__PURE__ */ function() {
    function SimpleRule2(key, value, options) {
      this.type = "simple";
      this.key = void 0;
      this.value = void 0;
      this.options = void 0;
      this.isProcessed = false;
      this.renderable = void 0;
      this.key = key;
      this.value = value;
      this.options = options;
    }
    var _proto = SimpleRule2.prototype;
    _proto.toString = function toString(options) {
      if (Array.isArray(this.value)) {
        var str = "";
        for (var index = 0; index < this.value.length; index++) {
          str += this.key + " " + this.value[index] + ";";
          if (this.value[index + 1])
            str += "\n";
        }
        return str;
      }
      return this.key + " " + this.value + ";";
    };
    return SimpleRule2;
  }();
  var keysMap = {
    "@charset": true,
    "@import": true,
    "@namespace": true
  };
  var pluginSimpleRule = {
    onCreateRule: function onCreateRule7(key, value, options) {
      return key in keysMap ? new SimpleRule(key, value, options) : null;
    }
  };
  var plugins = [pluginStyleRule, pluginConditionalRule, plugin, pluginKeyframeRule, pluginFontFaceRule, pluginViewportRule, pluginSimpleRule];
  var defaultUpdateOptions = {
    process: true
  };
  var forceUpdateOptions = {
    force: true,
    process: true
  };
  var RuleList = /* @__PURE__ */ function() {
    function RuleList2(options) {
      this.map = {};
      this.raw = {};
      this.index = [];
      this.counter = 0;
      this.options = void 0;
      this.classes = void 0;
      this.keyframes = void 0;
      this.options = options;
      this.classes = options.classes;
      this.keyframes = options.keyframes;
    }
    var _proto = RuleList2.prototype;
    _proto.add = function add(name, decl, ruleOptions) {
      var _this$options = this.options, parent = _this$options.parent, sheet = _this$options.sheet, jss3 = _this$options.jss, Renderer = _this$options.Renderer, generateId = _this$options.generateId, scoped = _this$options.scoped;
      var options = _extends({
        classes: this.classes,
        parent,
        sheet,
        jss: jss3,
        Renderer,
        generateId,
        scoped,
        name,
        keyframes: this.keyframes,
        selector: void 0
      }, ruleOptions);
      var key = name;
      if (name in this.raw) {
        key = name + "-d" + this.counter++;
      }
      this.raw[key] = decl;
      if (key in this.classes) {
        options.selector = "." + escape(this.classes[key]);
      }
      var rule = createRule(key, decl, options);
      if (!rule)
        return null;
      this.register(rule);
      var index = options.index === void 0 ? this.index.length : options.index;
      this.index.splice(index, 0, rule);
      return rule;
    };
    _proto.get = function get2(name) {
      return this.map[name];
    };
    _proto.remove = function remove(rule) {
      this.unregister(rule);
      delete this.raw[rule.key];
      this.index.splice(this.index.indexOf(rule), 1);
    };
    _proto.indexOf = function indexOf(rule) {
      return this.index.indexOf(rule);
    };
    _proto.process = function process2() {
      var plugins3 = this.options.jss.plugins;
      this.index.slice(0).forEach(plugins3.onProcessRule, plugins3);
    };
    _proto.register = function register(rule) {
      this.map[rule.key] = rule;
      if (rule instanceof StyleRule) {
        this.map[rule.selector] = rule;
        if (rule.id)
          this.classes[rule.key] = rule.id;
      } else if (rule instanceof KeyframesRule && this.keyframes) {
        this.keyframes[rule.name] = rule.id;
      }
    };
    _proto.unregister = function unregister(rule) {
      delete this.map[rule.key];
      if (rule instanceof StyleRule) {
        delete this.map[rule.selector];
        delete this.classes[rule.key];
      } else if (rule instanceof KeyframesRule) {
        delete this.keyframes[rule.name];
      }
    };
    _proto.update = function update3() {
      var name;
      var data;
      var options;
      if (typeof (arguments.length <= 0 ? void 0 : arguments[0]) === "string") {
        name = arguments.length <= 0 ? void 0 : arguments[0];
        data = arguments.length <= 1 ? void 0 : arguments[1];
        options = arguments.length <= 2 ? void 0 : arguments[2];
      } else {
        data = arguments.length <= 0 ? void 0 : arguments[0];
        options = arguments.length <= 1 ? void 0 : arguments[1];
        name = null;
      }
      if (name) {
        this.updateOne(this.map[name], data, options);
      } else {
        for (var index = 0; index < this.index.length; index++) {
          this.updateOne(this.index[index], data, options);
        }
      }
    };
    _proto.updateOne = function updateOne(rule, data, options) {
      if (options === void 0) {
        options = defaultUpdateOptions;
      }
      var _this$options2 = this.options, plugins3 = _this$options2.jss.plugins, sheet = _this$options2.sheet;
      if (rule.rules instanceof RuleList2) {
        rule.rules.update(data, options);
        return;
      }
      var styleRule = rule;
      var style2 = styleRule.style;
      plugins3.onUpdate(data, rule, sheet, options);
      if (options.process && style2 && style2 !== styleRule.style) {
        plugins3.onProcessStyle(styleRule.style, styleRule, sheet);
        for (var prop in styleRule.style) {
          var nextValue = styleRule.style[prop];
          var prevValue = style2[prop];
          if (nextValue !== prevValue) {
            styleRule.prop(prop, nextValue, forceUpdateOptions);
          }
        }
        for (var _prop in style2) {
          var _nextValue = styleRule.style[_prop];
          var _prevValue = style2[_prop];
          if (_nextValue == null && _nextValue !== _prevValue) {
            styleRule.prop(_prop, null, forceUpdateOptions);
          }
        }
      }
    };
    _proto.toString = function toString(options) {
      var str = "";
      var sheet = this.options.sheet;
      var link = sheet ? sheet.options.link : false;
      for (var index = 0; index < this.index.length; index++) {
        var rule = this.index[index];
        var css2 = rule.toString(options);
        if (!css2 && !link)
          continue;
        if (str)
          str += "\n";
        str += css2;
      }
      return str;
    };
    return RuleList2;
  }();
  var StyleSheet = /* @__PURE__ */ function() {
    function StyleSheet2(styles82, options) {
      this.options = void 0;
      this.deployed = void 0;
      this.attached = void 0;
      this.rules = void 0;
      this.renderer = void 0;
      this.classes = void 0;
      this.keyframes = void 0;
      this.queue = void 0;
      this.attached = false;
      this.deployed = false;
      this.classes = {};
      this.keyframes = {};
      this.options = _extends({}, options, {
        sheet: this,
        parent: this,
        classes: this.classes,
        keyframes: this.keyframes
      });
      if (options.Renderer) {
        this.renderer = new options.Renderer(this);
      }
      this.rules = new RuleList(this.options);
      for (var name in styles82) {
        this.rules.add(name, styles82[name]);
      }
      this.rules.process();
    }
    var _proto = StyleSheet2.prototype;
    _proto.attach = function attach2() {
      if (this.attached)
        return this;
      if (this.renderer)
        this.renderer.attach();
      this.attached = true;
      if (!this.deployed)
        this.deploy();
      return this;
    };
    _proto.detach = function detach2() {
      if (!this.attached)
        return this;
      if (this.renderer)
        this.renderer.detach();
      this.attached = false;
      return this;
    };
    _proto.addRule = function addRule(name, decl, options) {
      var queue = this.queue;
      if (this.attached && !queue)
        this.queue = [];
      var rule = this.rules.add(name, decl, options);
      if (!rule)
        return null;
      this.options.jss.plugins.onProcessRule(rule);
      if (this.attached) {
        if (!this.deployed)
          return rule;
        if (queue)
          queue.push(rule);
        else {
          this.insertRule(rule);
          if (this.queue) {
            this.queue.forEach(this.insertRule, this);
            this.queue = void 0;
          }
        }
        return rule;
      }
      this.deployed = false;
      return rule;
    };
    _proto.insertRule = function insertRule2(rule) {
      if (this.renderer) {
        this.renderer.insertRule(rule);
      }
    };
    _proto.addRules = function addRules(styles82, options) {
      var added = [];
      for (var name in styles82) {
        var rule = this.addRule(name, styles82[name], options);
        if (rule)
          added.push(rule);
      }
      return added;
    };
    _proto.getRule = function getRule(name) {
      return this.rules.get(name);
    };
    _proto.deleteRule = function deleteRule(name) {
      var rule = typeof name === "object" ? name : this.rules.get(name);
      if (!rule || this.attached && !rule.renderable) {
        return false;
      }
      this.rules.remove(rule);
      if (this.attached && rule.renderable && this.renderer) {
        return this.renderer.deleteRule(rule.renderable);
      }
      return true;
    };
    _proto.indexOf = function indexOf(rule) {
      return this.rules.indexOf(rule);
    };
    _proto.deploy = function deploy() {
      if (this.renderer)
        this.renderer.deploy();
      this.deployed = true;
      return this;
    };
    _proto.update = function update3() {
      var _this$rules;
      (_this$rules = this.rules).update.apply(_this$rules, arguments);
      return this;
    };
    _proto.updateOne = function updateOne(rule, data, options) {
      this.rules.updateOne(rule, data, options);
      return this;
    };
    _proto.toString = function toString(options) {
      return this.rules.toString(options);
    };
    return StyleSheet2;
  }();
  var PluginsRegistry = /* @__PURE__ */ function() {
    function PluginsRegistry2() {
      this.plugins = {
        internal: [],
        external: []
      };
      this.registry = void 0;
    }
    var _proto = PluginsRegistry2.prototype;
    _proto.onCreateRule = function onCreateRule8(name, decl, options) {
      for (var i = 0; i < this.registry.onCreateRule.length; i++) {
        var rule = this.registry.onCreateRule[i](name, decl, options);
        if (rule)
          return rule;
      }
      return null;
    };
    _proto.onProcessRule = function onProcessRule(rule) {
      if (rule.isProcessed)
        return;
      var sheet = rule.options.sheet;
      for (var i = 0; i < this.registry.onProcessRule.length; i++) {
        this.registry.onProcessRule[i](rule, sheet);
      }
      if (rule.style)
        this.onProcessStyle(rule.style, rule, sheet);
      rule.isProcessed = true;
    };
    _proto.onProcessStyle = function onProcessStyle2(style2, rule, sheet) {
      for (var i = 0; i < this.registry.onProcessStyle.length; i++) {
        rule.style = this.registry.onProcessStyle[i](rule.style, rule, sheet);
      }
    };
    _proto.onProcessSheet = function onProcessSheet(sheet) {
      for (var i = 0; i < this.registry.onProcessSheet.length; i++) {
        this.registry.onProcessSheet[i](sheet);
      }
    };
    _proto.onUpdate = function onUpdate2(data, rule, sheet, options) {
      for (var i = 0; i < this.registry.onUpdate.length; i++) {
        this.registry.onUpdate[i](data, rule, sheet, options);
      }
    };
    _proto.onChangeValue = function onChangeValue2(value, prop, rule) {
      var processedValue = value;
      for (var i = 0; i < this.registry.onChangeValue.length; i++) {
        processedValue = this.registry.onChangeValue[i](processedValue, prop, rule);
      }
      return processedValue;
    };
    _proto.use = function use(newPlugin, options) {
      if (options === void 0) {
        options = {
          queue: "external"
        };
      }
      var plugins3 = this.plugins[options.queue];
      if (plugins3.indexOf(newPlugin) !== -1) {
        return;
      }
      plugins3.push(newPlugin);
      this.registry = [].concat(this.plugins.external, this.plugins.internal).reduce(function(registry2, plugin2) {
        for (var name in plugin2) {
          if (name in registry2) {
            registry2[name].push(plugin2[name]);
          } else {
            true ? tiny_warning_esm_default(false, '[JSS] Unknown hook "' + name + '".') : void 0;
          }
        }
        return registry2;
      }, {
        onCreateRule: [],
        onProcessRule: [],
        onProcessStyle: [],
        onProcessSheet: [],
        onChangeValue: [],
        onUpdate: []
      });
    };
    return PluginsRegistry2;
  }();
  var SheetsRegistry = /* @__PURE__ */ function() {
    function SheetsRegistry2() {
      this.registry = [];
    }
    var _proto = SheetsRegistry2.prototype;
    _proto.add = function add(sheet) {
      var registry2 = this.registry;
      var index = sheet.options.index;
      if (registry2.indexOf(sheet) !== -1)
        return;
      if (registry2.length === 0 || index >= this.index) {
        registry2.push(sheet);
        return;
      }
      for (var i = 0; i < registry2.length; i++) {
        if (registry2[i].options.index > index) {
          registry2.splice(i, 0, sheet);
          return;
        }
      }
    };
    _proto.reset = function reset() {
      this.registry = [];
    };
    _proto.remove = function remove(sheet) {
      var index = this.registry.indexOf(sheet);
      this.registry.splice(index, 1);
    };
    _proto.toString = function toString(_temp) {
      var _ref3 = _temp === void 0 ? {} : _temp, attached = _ref3.attached, options = _objectWithoutPropertiesLoose(_ref3, ["attached"]);
      var css2 = "";
      for (var i = 0; i < this.registry.length; i++) {
        var sheet = this.registry[i];
        if (attached != null && sheet.attached !== attached) {
          continue;
        }
        if (css2)
          css2 += "\n";
        css2 += sheet.toString(options);
      }
      return css2;
    };
    _createClass(SheetsRegistry2, [{
      key: "index",
      get: function get2() {
        return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;
      }
    }]);
    return SheetsRegistry2;
  }();
  var registry = new SheetsRegistry();
  var globalThis$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" && window.Math === Math ? window : typeof self !== "undefined" && self.Math === Math ? self : Function("return this")();
  var ns = "2f1acc6c3a606b082e5eef5e54414ffb";
  if (globalThis$1[ns] == null)
    globalThis$1[ns] = 0;
  var moduleId = globalThis$1[ns]++;
  var maxRules = 1e10;
  var createGenerateId = function createGenerateId2(options) {
    if (options === void 0) {
      options = {};
    }
    var ruleCounter = 0;
    var generateId = function generateId2(rule, sheet) {
      ruleCounter += 1;
      if (ruleCounter > maxRules) {
        true ? tiny_warning_esm_default(false, "[JSS] You might have a memory leak. Rule counter is at " + ruleCounter + ".") : void 0;
      }
      var jssId = "";
      var prefix2 = "";
      if (sheet) {
        if (sheet.options.classNamePrefix) {
          prefix2 = sheet.options.classNamePrefix;
        }
        if (sheet.options.jss.id != null) {
          jssId = String(sheet.options.jss.id);
        }
      }
      if (options.minify) {
        return "" + (prefix2 || "c") + moduleId + jssId + ruleCounter;
      }
      return prefix2 + rule.key + "-" + moduleId + (jssId ? "-" + jssId : "") + "-" + ruleCounter;
    };
    return generateId;
  };
  var memoize2 = function memoize3(fn) {
    var value;
    return function() {
      if (!value)
        value = fn();
      return value;
    };
  };
  var getPropertyValue = function getPropertyValue2(cssRule, prop) {
    try {
      if (cssRule.attributeStyleMap) {
        return cssRule.attributeStyleMap.get(prop);
      }
      return cssRule.style.getPropertyValue(prop);
    } catch (err) {
      return "";
    }
  };
  var setProperty = function setProperty2(cssRule, prop, value) {
    try {
      var cssValue = value;
      if (Array.isArray(value)) {
        cssValue = toCssValue(value, true);
        if (value[value.length - 1] === "!important") {
          cssRule.style.setProperty(prop, cssValue, "important");
          return true;
        }
      }
      if (cssRule.attributeStyleMap) {
        cssRule.attributeStyleMap.set(prop, cssValue);
      } else {
        cssRule.style.setProperty(prop, cssValue);
      }
    } catch (err) {
      return false;
    }
    return true;
  };
  var removeProperty = function removeProperty2(cssRule, prop) {
    try {
      if (cssRule.attributeStyleMap) {
        cssRule.attributeStyleMap.delete(prop);
      } else {
        cssRule.style.removeProperty(prop);
      }
    } catch (err) {
      true ? tiny_warning_esm_default(false, '[JSS] DOMException "' + err.message + '" was thrown. Tried to remove property "' + prop + '".') : void 0;
    }
  };
  var setSelector = function setSelector2(cssRule, selectorText) {
    cssRule.selectorText = selectorText;
    return cssRule.selectorText === selectorText;
  };
  var getHead = memoize2(function() {
    return document.querySelector("head");
  });
  function findHigherSheet(registry2, options) {
    for (var i = 0; i < registry2.length; i++) {
      var sheet = registry2[i];
      if (sheet.attached && sheet.options.index > options.index && sheet.options.insertionPoint === options.insertionPoint) {
        return sheet;
      }
    }
    return null;
  }
  function findHighestSheet(registry2, options) {
    for (var i = registry2.length - 1; i >= 0; i--) {
      var sheet = registry2[i];
      if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) {
        return sheet;
      }
    }
    return null;
  }
  function findCommentNode(text) {
    var head = getHead();
    for (var i = 0; i < head.childNodes.length; i++) {
      var node = head.childNodes[i];
      if (node.nodeType === 8 && node.nodeValue.trim() === text) {
        return node;
      }
    }
    return null;
  }
  function findPrevNode(options) {
    var registry$1 = registry.registry;
    if (registry$1.length > 0) {
      var sheet = findHigherSheet(registry$1, options);
      if (sheet && sheet.renderer) {
        return {
          parent: sheet.renderer.element.parentNode,
          node: sheet.renderer.element
        };
      }
      sheet = findHighestSheet(registry$1, options);
      if (sheet && sheet.renderer) {
        return {
          parent: sheet.renderer.element.parentNode,
          node: sheet.renderer.element.nextSibling
        };
      }
    }
    var insertionPoint = options.insertionPoint;
    if (insertionPoint && typeof insertionPoint === "string") {
      var comment = findCommentNode(insertionPoint);
      if (comment) {
        return {
          parent: comment.parentNode,
          node: comment.nextSibling
        };
      }
      true ? tiny_warning_esm_default(false, '[JSS] Insertion point "' + insertionPoint + '" not found.') : void 0;
    }
    return false;
  }
  function insertStyle(style2, options) {
    var insertionPoint = options.insertionPoint;
    var nextNode = findPrevNode(options);
    if (nextNode !== false && nextNode.parent) {
      nextNode.parent.insertBefore(style2, nextNode.node);
      return;
    }
    if (insertionPoint && typeof insertionPoint.nodeType === "number") {
      var insertionPointElement = insertionPoint;
      var parentNode = insertionPointElement.parentNode;
      if (parentNode)
        parentNode.insertBefore(style2, insertionPointElement.nextSibling);
      else
        true ? tiny_warning_esm_default(false, "[JSS] Insertion point is not in the DOM.") : void 0;
      return;
    }
    getHead().appendChild(style2);
  }
  var getNonce = memoize2(function() {
    var node = document.querySelector('meta[property="csp-nonce"]');
    return node ? node.getAttribute("content") : null;
  });
  var _insertRule = function insertRule(container, rule, index) {
    try {
      if ("insertRule" in container) {
        var c = container;
        c.insertRule(rule, index);
      } else if ("appendRule" in container) {
        var _c = container;
        _c.appendRule(rule);
      }
    } catch (err) {
      true ? tiny_warning_esm_default(false, "[JSS] " + err.message) : void 0;
      return false;
    }
    return container.cssRules[index];
  };
  var getValidRuleInsertionIndex = function getValidRuleInsertionIndex2(container, index) {
    var maxIndex = container.cssRules.length;
    if (index === void 0 || index > maxIndex) {
      return maxIndex;
    }
    return index;
  };
  var createStyle = function createStyle2() {
    var el2 = document.createElement("style");
    el2.textContent = "\n";
    return el2;
  };
  var DomRenderer = /* @__PURE__ */ function() {
    function DomRenderer2(sheet) {
      this.getPropertyValue = getPropertyValue;
      this.setProperty = setProperty;
      this.removeProperty = removeProperty;
      this.setSelector = setSelector;
      this.element = void 0;
      this.sheet = void 0;
      this.hasInsertedRules = false;
      this.cssRules = [];
      if (sheet)
        registry.add(sheet);
      this.sheet = sheet;
      var _ref3 = this.sheet ? this.sheet.options : {}, media = _ref3.media, meta = _ref3.meta, element = _ref3.element;
      this.element = element || createStyle();
      this.element.setAttribute("data-jss", "");
      if (media)
        this.element.setAttribute("media", media);
      if (meta)
        this.element.setAttribute("data-meta", meta);
      var nonce = getNonce();
      if (nonce)
        this.element.setAttribute("nonce", nonce);
    }
    var _proto = DomRenderer2.prototype;
    _proto.attach = function attach2() {
      if (this.element.parentNode || !this.sheet)
        return;
      insertStyle(this.element, this.sheet.options);
      var deployed = Boolean(this.sheet && this.sheet.deployed);
      if (this.hasInsertedRules && deployed) {
        this.hasInsertedRules = false;
        this.deploy();
      }
    };
    _proto.detach = function detach2() {
      if (!this.sheet)
        return;
      var parentNode = this.element.parentNode;
      if (parentNode)
        parentNode.removeChild(this.element);
      if (this.sheet.options.link) {
        this.cssRules = [];
        this.element.textContent = "\n";
      }
    };
    _proto.deploy = function deploy() {
      var sheet = this.sheet;
      if (!sheet)
        return;
      if (sheet.options.link) {
        this.insertRules(sheet.rules);
        return;
      }
      this.element.textContent = "\n" + sheet.toString() + "\n";
    };
    _proto.insertRules = function insertRules(rules, nativeParent) {
      for (var i = 0; i < rules.index.length; i++) {
        this.insertRule(rules.index[i], i, nativeParent);
      }
    };
    _proto.insertRule = function insertRule2(rule, index, nativeParent) {
      if (nativeParent === void 0) {
        nativeParent = this.element.sheet;
      }
      if (rule.rules) {
        var parent = rule;
        var latestNativeParent = nativeParent;
        if (rule.type === "conditional" || rule.type === "keyframes") {
          var _insertionIndex = getValidRuleInsertionIndex(nativeParent, index);
          latestNativeParent = _insertRule(nativeParent, parent.toString({
            children: false
          }), _insertionIndex);
          if (latestNativeParent === false) {
            return false;
          }
          this.refCssRule(rule, _insertionIndex, latestNativeParent);
        }
        this.insertRules(parent.rules, latestNativeParent);
        return latestNativeParent;
      }
      var ruleStr = rule.toString();
      if (!ruleStr)
        return false;
      var insertionIndex = getValidRuleInsertionIndex(nativeParent, index);
      var nativeRule = _insertRule(nativeParent, ruleStr, insertionIndex);
      if (nativeRule === false) {
        return false;
      }
      this.hasInsertedRules = true;
      this.refCssRule(rule, insertionIndex, nativeRule);
      return nativeRule;
    };
    _proto.refCssRule = function refCssRule(rule, index, cssRule) {
      rule.renderable = cssRule;
      if (rule.options.parent instanceof StyleSheet) {
        this.cssRules[index] = cssRule;
      }
    };
    _proto.deleteRule = function deleteRule(cssRule) {
      var sheet = this.element.sheet;
      var index = this.indexOf(cssRule);
      if (index === -1)
        return false;
      sheet.deleteRule(index);
      this.cssRules.splice(index, 1);
      return true;
    };
    _proto.indexOf = function indexOf(cssRule) {
      return this.cssRules.indexOf(cssRule);
    };
    _proto.replaceRule = function replaceRule(cssRule, rule) {
      var index = this.indexOf(cssRule);
      if (index === -1)
        return false;
      this.element.sheet.deleteRule(index);
      this.cssRules.splice(index, 1);
      return this.insertRule(rule, index);
    };
    _proto.getRules = function getRules() {
      return this.element.sheet.cssRules;
    };
    return DomRenderer2;
  }();
  var instanceCounter = 0;
  var Jss = /* @__PURE__ */ function() {
    function Jss2(options) {
      this.id = instanceCounter++;
      this.version = "10.7.1";
      this.plugins = new PluginsRegistry();
      this.options = {
        id: {
          minify: false
        },
        createGenerateId,
        Renderer: module_default ? DomRenderer : null,
        plugins: []
      };
      this.generateId = createGenerateId({
        minify: false
      });
      for (var i = 0; i < plugins.length; i++) {
        this.plugins.use(plugins[i], {
          queue: "internal"
        });
      }
      this.setup(options);
    }
    var _proto = Jss2.prototype;
    _proto.setup = function setup(options) {
      if (options === void 0) {
        options = {};
      }
      if (options.createGenerateId) {
        this.options.createGenerateId = options.createGenerateId;
      }
      if (options.id) {
        this.options.id = _extends({}, this.options.id, options.id);
      }
      if (options.createGenerateId || options.id) {
        this.generateId = this.options.createGenerateId(this.options.id);
      }
      if (options.insertionPoint != null)
        this.options.insertionPoint = options.insertionPoint;
      if ("Renderer" in options) {
        this.options.Renderer = options.Renderer;
      }
      if (options.plugins)
        this.use.apply(this, options.plugins);
      return this;
    };
    _proto.createStyleSheet = function createStyleSheet(styles82, options) {
      if (options === void 0) {
        options = {};
      }
      var _options = options, index = _options.index;
      if (typeof index !== "number") {
        index = registry.index === 0 ? 0 : registry.index + 1;
      }
      var sheet = new StyleSheet(styles82, _extends({}, options, {
        jss: this,
        generateId: options.generateId || this.generateId,
        insertionPoint: this.options.insertionPoint,
        Renderer: this.options.Renderer,
        index
      }));
      this.plugins.onProcessSheet(sheet);
      return sheet;
    };
    _proto.removeStyleSheet = function removeStyleSheet(sheet) {
      sheet.detach();
      registry.remove(sheet);
      return this;
    };
    _proto.createRule = function createRule$1(name, style2, options) {
      if (style2 === void 0) {
        style2 = {};
      }
      if (options === void 0) {
        options = {};
      }
      if (typeof name === "object") {
        return this.createRule(void 0, name, style2);
      }
      var ruleOptions = _extends({}, options, {
        name,
        jss: this,
        Renderer: this.options.Renderer
      });
      if (!ruleOptions.generateId)
        ruleOptions.generateId = this.generateId;
      if (!ruleOptions.classes)
        ruleOptions.classes = {};
      if (!ruleOptions.keyframes)
        ruleOptions.keyframes = {};
      var rule = createRule(name, style2, ruleOptions);
      if (rule)
        this.plugins.onProcessRule(rule);
      return rule;
    };
    _proto.use = function use() {
      var _this = this;
      for (var _len = arguments.length, plugins3 = new Array(_len), _key = 0; _key < _len; _key++) {
        plugins3[_key] = arguments[_key];
      }
      plugins3.forEach(function(plugin2) {
        _this.plugins.use(plugin2);
      });
      return this;
    };
    return Jss2;
  }();
  function getDynamicStyles(styles82) {
    var to = null;
    for (var key in styles82) {
      var value = styles82[key];
      var type = typeof value;
      if (type === "function") {
        if (!to)
          to = {};
        to[key] = value;
      } else if (type === "object" && value !== null && !Array.isArray(value)) {
        var extracted = getDynamicStyles(value);
        if (extracted) {
          if (!to)
            to = {};
          to[key] = extracted;
        }
      }
    }
    return to;
  }
  var hasCSSTOMSupport = typeof CSS === "object" && CSS != null && "number" in CSS;
  var create2 = function create3(options) {
    return new Jss(options);
  };
  var jss = create2();

  // node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.esm.js
  var now = Date.now();
  var fnValuesNs = "fnValues" + now;
  var fnRuleNs = "fnStyle" + ++now;
  var functionPlugin = function functionPlugin2() {
    return {
      onCreateRule: function onCreateRule8(name, decl, options) {
        if (typeof decl !== "function")
          return null;
        var rule = createRule(name, {}, options);
        rule[fnRuleNs] = decl;
        return rule;
      },
      onProcessStyle: function onProcessStyle2(style2, rule) {
        if (fnValuesNs in rule || fnRuleNs in rule)
          return style2;
        var fnValues = {};
        for (var prop in style2) {
          var value = style2[prop];
          if (typeof value !== "function")
            continue;
          delete style2[prop];
          fnValues[prop] = value;
        }
        rule[fnValuesNs] = fnValues;
        return style2;
      },
      onUpdate: function onUpdate2(data, rule, sheet, options) {
        var styleRule = rule;
        var fnRule = styleRule[fnRuleNs];
        if (fnRule) {
          styleRule.style = fnRule(data) || {};
          if (true) {
            for (var prop in styleRule.style) {
              if (typeof styleRule.style[prop] === "function") {
                true ? tiny_warning_esm_default(false, "[JSS] Function values inside function rules are not supported.") : void 0;
                break;
              }
            }
          }
        }
        var fnValues = styleRule[fnValuesNs];
        if (fnValues) {
          for (var _prop in fnValues) {
            styleRule.prop(_prop, fnValues[_prop](data), options);
          }
        }
      }
    };
  };
  var jss_plugin_rule_value_function_esm_default = functionPlugin;

  // node_modules/jss-plugin-global/dist/jss-plugin-global.esm.js
  var at = "@global";
  var atPrefix = "@global ";
  var GlobalContainerRule = /* @__PURE__ */ function() {
    function GlobalContainerRule2(key, styles82, options) {
      this.type = "global";
      this.at = at;
      this.rules = void 0;
      this.options = void 0;
      this.key = void 0;
      this.isProcessed = false;
      this.key = key;
      this.options = options;
      this.rules = new RuleList(_extends({}, options, {
        parent: this
      }));
      for (var selector2 in styles82) {
        this.rules.add(selector2, styles82[selector2]);
      }
      this.rules.process();
    }
    var _proto = GlobalContainerRule2.prototype;
    _proto.getRule = function getRule(name) {
      return this.rules.get(name);
    };
    _proto.addRule = function addRule(name, style2, options) {
      var rule = this.rules.add(name, style2, options);
      if (rule)
        this.options.jss.plugins.onProcessRule(rule);
      return rule;
    };
    _proto.indexOf = function indexOf(rule) {
      return this.rules.indexOf(rule);
    };
    _proto.toString = function toString() {
      return this.rules.toString();
    };
    return GlobalContainerRule2;
  }();
  var GlobalPrefixedRule = /* @__PURE__ */ function() {
    function GlobalPrefixedRule2(key, style2, options) {
      this.type = "global";
      this.at = at;
      this.options = void 0;
      this.rule = void 0;
      this.isProcessed = false;
      this.key = void 0;
      this.key = key;
      this.options = options;
      var selector2 = key.substr(atPrefix.length);
      this.rule = options.jss.createRule(selector2, style2, _extends({}, options, {
        parent: this
      }));
    }
    var _proto2 = GlobalPrefixedRule2.prototype;
    _proto2.toString = function toString(options) {
      return this.rule ? this.rule.toString(options) : "";
    };
    return GlobalPrefixedRule2;
  }();
  var separatorRegExp = /\s*,\s*/g;
  function addScope(selector2, scope) {
    var parts = selector2.split(separatorRegExp);
    var scoped = "";
    for (var i = 0; i < parts.length; i++) {
      scoped += scope + " " + parts[i].trim();
      if (parts[i + 1])
        scoped += ", ";
    }
    return scoped;
  }
  function handleNestedGlobalContainerRule(rule, sheet) {
    var options = rule.options, style2 = rule.style;
    var rules = style2 ? style2[at] : null;
    if (!rules)
      return;
    for (var name in rules) {
      sheet.addRule(name, rules[name], _extends({}, options, {
        selector: addScope(name, rule.selector)
      }));
    }
    delete style2[at];
  }
  function handlePrefixedGlobalRule(rule, sheet) {
    var options = rule.options, style2 = rule.style;
    for (var prop in style2) {
      if (prop[0] !== "@" || prop.substr(0, at.length) !== at)
        continue;
      var selector2 = addScope(prop.substr(at.length), rule.selector);
      sheet.addRule(selector2, style2[prop], _extends({}, options, {
        selector: selector2
      }));
      delete style2[prop];
    }
  }
  function jssGlobal() {
    function onCreateRule8(name, styles82, options) {
      if (!name)
        return null;
      if (name === at) {
        return new GlobalContainerRule(name, styles82, options);
      }
      if (name[0] === "@" && name.substr(0, atPrefix.length) === atPrefix) {
        return new GlobalPrefixedRule(name, styles82, options);
      }
      var parent = options.parent;
      if (parent) {
        if (parent.type === "global" || parent.options.parent && parent.options.parent.type === "global") {
          options.scoped = false;
        }
      }
      if (options.scoped === false) {
        options.selector = name;
      }
      return null;
    }
    function onProcessRule(rule, sheet) {
      if (rule.type !== "style" || !sheet)
        return;
      handleNestedGlobalContainerRule(rule, sheet);
      handlePrefixedGlobalRule(rule, sheet);
    }
    return {
      onCreateRule: onCreateRule8,
      onProcessRule
    };
  }
  var jss_plugin_global_esm_default = jssGlobal;

  // node_modules/jss-plugin-nested/dist/jss-plugin-nested.esm.js
  var separatorRegExp2 = /\s*,\s*/g;
  var parentRegExp = /&/g;
  var refRegExp2 = /\$([\w-]+)/g;
  function jssNested() {
    function getReplaceRef(container, sheet) {
      return function(match, key) {
        var rule = container.getRule(key) || sheet && sheet.getRule(key);
        if (rule) {
          rule = rule;
          return rule.selector;
        }
        true ? tiny_warning_esm_default(false, '[JSS] Could not find the referenced rule "' + key + '" in "' + (container.options.meta || container.toString()) + '".') : void 0;
        return key;
      };
    }
    function replaceParentRefs(nestedProp, parentProp) {
      var parentSelectors = parentProp.split(separatorRegExp2);
      var nestedSelectors = nestedProp.split(separatorRegExp2);
      var result = "";
      for (var i = 0; i < parentSelectors.length; i++) {
        var parent = parentSelectors[i];
        for (var j = 0; j < nestedSelectors.length; j++) {
          var nested = nestedSelectors[j];
          if (result)
            result += ", ";
          result += nested.indexOf("&") !== -1 ? nested.replace(parentRegExp, parent) : parent + " " + nested;
        }
      }
      return result;
    }
    function getOptions(rule, container, prevOptions) {
      if (prevOptions)
        return _extends({}, prevOptions, {
          index: prevOptions.index + 1
        });
      var nestingLevel = rule.options.nestingLevel;
      nestingLevel = nestingLevel === void 0 ? 1 : nestingLevel + 1;
      var options = _extends({}, rule.options, {
        nestingLevel,
        index: container.indexOf(rule) + 1
      });
      delete options.name;
      return options;
    }
    function onProcessStyle2(style2, rule, sheet) {
      if (rule.type !== "style")
        return style2;
      var styleRule = rule;
      var container = styleRule.options.parent;
      var options;
      var replaceRef3;
      for (var prop in style2) {
        var isNested = prop.indexOf("&") !== -1;
        var isNestedConditional = prop[0] === "@";
        if (!isNested && !isNestedConditional)
          continue;
        options = getOptions(styleRule, container, options);
        if (isNested) {
          var selector2 = replaceParentRefs(prop, styleRule.selector);
          if (!replaceRef3)
            replaceRef3 = getReplaceRef(container, sheet);
          selector2 = selector2.replace(refRegExp2, replaceRef3);
          container.addRule(selector2, style2[prop], _extends({}, options, {
            selector: selector2
          }));
        } else if (isNestedConditional) {
          container.addRule(prop, {}, options).addRule(styleRule.key, style2[prop], {
            selector: styleRule.selector
          });
        }
        delete style2[prop];
      }
      return style2;
    }
    return {
      onProcessStyle: onProcessStyle2
    };
  }
  var jss_plugin_nested_esm_default = jssNested;

  // node_modules/hyphenate-style-name/index.js
  var uppercasePattern = /[A-Z]/g;
  var msPattern = /^ms-/;
  var cache = {};
  function toHyphenLower(match) {
    return "-" + match.toLowerCase();
  }
  function hyphenateStyleName(name) {
    if (cache.hasOwnProperty(name)) {
      return cache[name];
    }
    var hName = name.replace(uppercasePattern, toHyphenLower);
    return cache[name] = msPattern.test(hName) ? "-" + hName : hName;
  }
  var hyphenate_style_name_default = hyphenateStyleName;

  // node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.esm.js
  function convertCase(style2) {
    var converted = {};
    for (var prop in style2) {
      var key = prop.indexOf("--") === 0 ? prop : hyphenate_style_name_default(prop);
      converted[key] = style2[prop];
    }
    if (style2.fallbacks) {
      if (Array.isArray(style2.fallbacks))
        converted.fallbacks = style2.fallbacks.map(convertCase);
      else
        converted.fallbacks = convertCase(style2.fallbacks);
    }
    return converted;
  }
  function camelCase() {
    function onProcessStyle2(style2) {
      if (Array.isArray(style2)) {
        for (var index = 0; index < style2.length; index++) {
          style2[index] = convertCase(style2[index]);
        }
        return style2;
      }
      return convertCase(style2);
    }
    function onChangeValue2(value, prop, rule) {
      if (prop.indexOf("--") === 0) {
        return value;
      }
      var hyphenatedProp = hyphenate_style_name_default(prop);
      if (prop === hyphenatedProp)
        return value;
      rule.prop(hyphenatedProp, value);
      return null;
    }
    return {
      onProcessStyle: onProcessStyle2,
      onChangeValue: onChangeValue2
    };
  }
  var jss_plugin_camel_case_esm_default = camelCase;

  // node_modules/jss-plugin-default-unit/dist/jss-plugin-default-unit.esm.js
  var px = hasCSSTOMSupport && CSS ? CSS.px : "px";
  var ms = hasCSSTOMSupport && CSS ? CSS.ms : "ms";
  var percent = hasCSSTOMSupport && CSS ? CSS.percent : "%";
  var defaultUnits = {
    "animation-delay": ms,
    "animation-duration": ms,
    "background-position": px,
    "background-position-x": px,
    "background-position-y": px,
    "background-size": px,
    border: px,
    "border-bottom": px,
    "border-bottom-left-radius": px,
    "border-bottom-right-radius": px,
    "border-bottom-width": px,
    "border-left": px,
    "border-left-width": px,
    "border-radius": px,
    "border-right": px,
    "border-right-width": px,
    "border-top": px,
    "border-top-left-radius": px,
    "border-top-right-radius": px,
    "border-top-width": px,
    "border-width": px,
    "border-block": px,
    "border-block-end": px,
    "border-block-end-width": px,
    "border-block-start": px,
    "border-block-start-width": px,
    "border-block-width": px,
    "border-inline": px,
    "border-inline-end": px,
    "border-inline-end-width": px,
    "border-inline-start": px,
    "border-inline-start-width": px,
    "border-inline-width": px,
    "border-start-start-radius": px,
    "border-start-end-radius": px,
    "border-end-start-radius": px,
    "border-end-end-radius": px,
    margin: px,
    "margin-bottom": px,
    "margin-left": px,
    "margin-right": px,
    "margin-top": px,
    "margin-block": px,
    "margin-block-end": px,
    "margin-block-start": px,
    "margin-inline": px,
    "margin-inline-end": px,
    "margin-inline-start": px,
    padding: px,
    "padding-bottom": px,
    "padding-left": px,
    "padding-right": px,
    "padding-top": px,
    "padding-block": px,
    "padding-block-end": px,
    "padding-block-start": px,
    "padding-inline": px,
    "padding-inline-end": px,
    "padding-inline-start": px,
    "mask-position-x": px,
    "mask-position-y": px,
    "mask-size": px,
    height: px,
    width: px,
    "min-height": px,
    "max-height": px,
    "min-width": px,
    "max-width": px,
    bottom: px,
    left: px,
    top: px,
    right: px,
    inset: px,
    "inset-block": px,
    "inset-block-end": px,
    "inset-block-start": px,
    "inset-inline": px,
    "inset-inline-end": px,
    "inset-inline-start": px,
    "box-shadow": px,
    "text-shadow": px,
    "column-gap": px,
    "column-rule": px,
    "column-rule-width": px,
    "column-width": px,
    "font-size": px,
    "font-size-delta": px,
    "letter-spacing": px,
    "text-decoration-thickness": px,
    "text-indent": px,
    "text-stroke": px,
    "text-stroke-width": px,
    "word-spacing": px,
    motion: px,
    "motion-offset": px,
    outline: px,
    "outline-offset": px,
    "outline-width": px,
    perspective: px,
    "perspective-origin-x": percent,
    "perspective-origin-y": percent,
    "transform-origin": percent,
    "transform-origin-x": percent,
    "transform-origin-y": percent,
    "transform-origin-z": percent,
    "transition-delay": ms,
    "transition-duration": ms,
    "vertical-align": px,
    "flex-basis": px,
    "shape-margin": px,
    size: px,
    gap: px,
    grid: px,
    "grid-gap": px,
    "row-gap": px,
    "grid-row-gap": px,
    "grid-column-gap": px,
    "grid-template-rows": px,
    "grid-template-columns": px,
    "grid-auto-rows": px,
    "grid-auto-columns": px,
    "box-shadow-x": px,
    "box-shadow-y": px,
    "box-shadow-blur": px,
    "box-shadow-spread": px,
    "font-line-height": px,
    "text-shadow-x": px,
    "text-shadow-y": px,
    "text-shadow-blur": px
  };
  function addCamelCasedVersion(obj) {
    var regExp2 = /(-[a-z])/g;
    var replace = function replace2(str) {
      return str[1].toUpperCase();
    };
    var newObj = {};
    for (var _key in obj) {
      newObj[_key] = obj[_key];
      newObj[_key.replace(regExp2, replace)] = obj[_key];
    }
    return newObj;
  }
  var units = addCamelCasedVersion(defaultUnits);
  function iterate(prop, value, options) {
    if (value == null)
      return value;
    if (Array.isArray(value)) {
      for (var i = 0; i < value.length; i++) {
        value[i] = iterate(prop, value[i], options);
      }
    } else if (typeof value === "object") {
      if (prop === "fallbacks") {
        for (var innerProp in value) {
          value[innerProp] = iterate(innerProp, value[innerProp], options);
        }
      } else {
        for (var _innerProp in value) {
          value[_innerProp] = iterate(prop + "-" + _innerProp, value[_innerProp], options);
        }
      }
    } else if (typeof value === "number" && isNaN(value) === false) {
      var unit = options[prop] || units[prop];
      if (unit && !(value === 0 && unit === px)) {
        return typeof unit === "function" ? unit(value).toString() : "" + value + unit;
      }
      return value.toString();
    }
    return value;
  }
  function defaultUnit(options) {
    if (options === void 0) {
      options = {};
    }
    var camelCasedOptions = addCamelCasedVersion(options);
    function onProcessStyle2(style2, rule) {
      if (rule.type !== "style")
        return style2;
      for (var prop in style2) {
        style2[prop] = iterate(prop, style2[prop], camelCasedOptions);
      }
      return style2;
    }
    function onChangeValue2(value, prop) {
      return iterate(prop, value, camelCasedOptions);
    }
    return {
      onProcessStyle: onProcessStyle2,
      onChangeValue: onChangeValue2
    };
  }
  var jss_plugin_default_unit_esm_default = defaultUnit;

  // node_modules/css-vendor/dist/css-vendor.esm.js
  var js = "";
  var css = "";
  var vendor = "";
  var browser = "";
  var isTouch = module_default && "ontouchstart" in document.documentElement;
  if (module_default) {
    jsCssMap = {
      Moz: "-moz-",
      ms: "-ms-",
      O: "-o-",
      Webkit: "-webkit-"
    };
    _document$createEleme = document.createElement("p"), style2 = _document$createEleme.style;
    testProp = "Transform";
    for (key in jsCssMap) {
      if (key + testProp in style2) {
        js = key;
        css = jsCssMap[key];
        break;
      }
    }
    if (js === "Webkit" && "msHyphens" in style2) {
      js = "ms";
      css = jsCssMap.ms;
      browser = "edge";
    }
    if (js === "Webkit" && "-apple-trailing-word" in style2) {
      vendor = "apple";
    }
  }
  var jsCssMap;
  var _document$createEleme;
  var style2;
  var testProp;
  var key;
  var prefix = {
    js,
    css,
    vendor,
    browser,
    isTouch
  };
  function supportedKeyframes(key) {
    if (key[1] === "-")
      return key;
    if (prefix.js === "ms")
      return key;
    return "@" + prefix.css + "keyframes" + key.substr(10);
  }
  var appearence = {
    noPrefill: ["appearance"],
    supportedProperty: function supportedProperty(prop) {
      if (prop !== "appearance")
        return false;
      if (prefix.js === "ms")
        return "-webkit-" + prop;
      return prefix.css + prop;
    }
  };
  var colorAdjust = {
    noPrefill: ["color-adjust"],
    supportedProperty: function supportedProperty2(prop) {
      if (prop !== "color-adjust")
        return false;
      if (prefix.js === "Webkit")
        return prefix.css + "print-" + prop;
      return prop;
    }
  };
  var regExp = /[-\s]+(.)?/g;
  function toUpper(match, c) {
    return c ? c.toUpperCase() : "";
  }
  function camelize(str) {
    return str.replace(regExp, toUpper);
  }
  function pascalize(str) {
    return camelize("-" + str);
  }
  var mask = {
    noPrefill: ["mask"],
    supportedProperty: function supportedProperty3(prop, style2) {
      if (!/^mask/.test(prop))
        return false;
      if (prefix.js === "Webkit") {
        var longhand = "mask-image";
        if (camelize(longhand) in style2) {
          return prop;
        }
        if (prefix.js + pascalize(longhand) in style2) {
          return prefix.css + prop;
        }
      }
      return prop;
    }
  };
  var textOrientation = {
    noPrefill: ["text-orientation"],
    supportedProperty: function supportedProperty4(prop) {
      if (prop !== "text-orientation")
        return false;
      if (prefix.vendor === "apple" && !prefix.isTouch) {
        return prefix.css + prop;
      }
      return prop;
    }
  };
  var transform3 = {
    noPrefill: ["transform"],
    supportedProperty: function supportedProperty5(prop, style2, options) {
      if (prop !== "transform")
        return false;
      if (options.transform) {
        return prop;
      }
      return prefix.css + prop;
    }
  };
  var transition = {
    noPrefill: ["transition"],
    supportedProperty: function supportedProperty6(prop, style2, options) {
      if (prop !== "transition")
        return false;
      if (options.transition) {
        return prop;
      }
      return prefix.css + prop;
    }
  };
  var writingMode = {
    noPrefill: ["writing-mode"],
    supportedProperty: function supportedProperty7(prop) {
      if (prop !== "writing-mode")
        return false;
      if (prefix.js === "Webkit" || prefix.js === "ms" && prefix.browser !== "edge") {
        return prefix.css + prop;
      }
      return prop;
    }
  };
  var userSelect = {
    noPrefill: ["user-select"],
    supportedProperty: function supportedProperty8(prop) {
      if (prop !== "user-select")
        return false;
      if (prefix.js === "Moz" || prefix.js === "ms" || prefix.vendor === "apple") {
        return prefix.css + prop;
      }
      return prop;
    }
  };
  var breakPropsOld = {
    supportedProperty: function supportedProperty9(prop, style2) {
      if (!/^break-/.test(prop))
        return false;
      if (prefix.js === "Webkit") {
        var jsProp = "WebkitColumn" + pascalize(prop);
        return jsProp in style2 ? prefix.css + "column-" + prop : false;
      }
      if (prefix.js === "Moz") {
        var _jsProp = "page" + pascalize(prop);
        return _jsProp in style2 ? "page-" + prop : false;
      }
      return false;
    }
  };
  var inlineLogicalOld = {
    supportedProperty: function supportedProperty10(prop, style2) {
      if (!/^(border|margin|padding)-inline/.test(prop))
        return false;
      if (prefix.js === "Moz")
        return prop;
      var newProp = prop.replace("-inline", "");
      return prefix.js + pascalize(newProp) in style2 ? prefix.css + newProp : false;
    }
  };
  var unprefixed = {
    supportedProperty: function supportedProperty11(prop, style2) {
      return camelize(prop) in style2 ? prop : false;
    }
  };
  var prefixed = {
    supportedProperty: function supportedProperty12(prop, style2) {
      var pascalized = pascalize(prop);
      if (prop[0] === "-")
        return prop;
      if (prop[0] === "-" && prop[1] === "-")
        return prop;
      if (prefix.js + pascalized in style2)
        return prefix.css + prop;
      if (prefix.js !== "Webkit" && "Webkit" + pascalized in style2)
        return "-webkit-" + prop;
      return false;
    }
  };
  var scrollSnap = {
    supportedProperty: function supportedProperty13(prop) {
      if (prop.substring(0, 11) !== "scroll-snap")
        return false;
      if (prefix.js === "ms") {
        return "" + prefix.css + prop;
      }
      return prop;
    }
  };
  var overscrollBehavior = {
    supportedProperty: function supportedProperty14(prop) {
      if (prop !== "overscroll-behavior")
        return false;
      if (prefix.js === "ms") {
        return prefix.css + "scroll-chaining";
      }
      return prop;
    }
  };
  var propMap = {
    "flex-grow": "flex-positive",
    "flex-shrink": "flex-negative",
    "flex-basis": "flex-preferred-size",
    "justify-content": "flex-pack",
    order: "flex-order",
    "align-items": "flex-align",
    "align-content": "flex-line-pack"
  };
  var flex2012 = {
    supportedProperty: function supportedProperty15(prop, style2) {
      var newProp = propMap[prop];
      if (!newProp)
        return false;
      return prefix.js + pascalize(newProp) in style2 ? prefix.css + newProp : false;
    }
  };
  var propMap$1 = {
    flex: "box-flex",
    "flex-grow": "box-flex",
    "flex-direction": ["box-orient", "box-direction"],
    order: "box-ordinal-group",
    "align-items": "box-align",
    "flex-flow": ["box-orient", "box-direction"],
    "justify-content": "box-pack"
  };
  var propKeys = Object.keys(propMap$1);
  var prefixCss = function prefixCss2(p) {
    return prefix.css + p;
  };
  var flex2009 = {
    supportedProperty: function supportedProperty16(prop, style2, _ref3) {
      var multiple = _ref3.multiple;
      if (propKeys.indexOf(prop) > -1) {
        var newProp = propMap$1[prop];
        if (!Array.isArray(newProp)) {
          return prefix.js + pascalize(newProp) in style2 ? prefix.css + newProp : false;
        }
        if (!multiple)
          return false;
        for (var i = 0; i < newProp.length; i++) {
          if (!(prefix.js + pascalize(newProp[0]) in style2)) {
            return false;
          }
        }
        return newProp.map(prefixCss);
      }
      return false;
    }
  };
  var plugins2 = [appearence, colorAdjust, mask, textOrientation, transform3, transition, writingMode, userSelect, breakPropsOld, inlineLogicalOld, unprefixed, prefixed, scrollSnap, overscrollBehavior, flex2012, flex2009];
  var propertyDetectors = plugins2.filter(function(p) {
    return p.supportedProperty;
  }).map(function(p) {
    return p.supportedProperty;
  });
  var noPrefill = plugins2.filter(function(p) {
    return p.noPrefill;
  }).reduce(function(a, p) {
    a.push.apply(a, _toConsumableArray(p.noPrefill));
    return a;
  }, []);
  var el;
  var cache2 = {};
  if (module_default) {
    el = document.createElement("p");
    computed = window.getComputedStyle(document.documentElement, "");
    for (key$1 in computed) {
      if (!isNaN(key$1))
        cache2[computed[key$1]] = computed[key$1];
    }
    noPrefill.forEach(function(x) {
      return delete cache2[x];
    });
  }
  var computed;
  var key$1;
  function supportedProperty17(prop, options) {
    if (options === void 0) {
      options = {};
    }
    if (!el)
      return prop;
    if (cache2[prop] != null) {
      return cache2[prop];
    }
    if (prop === "transition" || prop === "transform") {
      options[prop] = prop in el.style;
    }
    for (var i = 0; i < propertyDetectors.length; i++) {
      cache2[prop] = propertyDetectors[i](prop, el.style, options);
      if (cache2[prop])
        break;
    }
    try {
      el.style[prop] = "";
    } catch (err) {
      return false;
    }
    return cache2[prop];
  }
  var cache$1 = {};
  var transitionProperties = {
    transition: 1,
    "transition-property": 1,
    "-webkit-transition": 1,
    "-webkit-transition-property": 1
  };
  var transPropsRegExp = /(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;
  var el$1;
  function prefixTransitionCallback(match, p1, p2) {
    if (p1 === "var")
      return "var";
    if (p1 === "all")
      return "all";
    if (p2 === "all")
      return ", all";
    var prefixedValue = p1 ? supportedProperty17(p1) : ", " + supportedProperty17(p2);
    if (!prefixedValue)
      return p1 || p2;
    return prefixedValue;
  }
  if (module_default)
    el$1 = document.createElement("p");
  function supportedValue(property, value) {
    var prefixedValue = value;
    if (!el$1 || property === "content")
      return value;
    if (typeof prefixedValue !== "string" || !isNaN(parseInt(prefixedValue, 10))) {
      return prefixedValue;
    }
    var cacheKey = property + prefixedValue;
    if (cache$1[cacheKey] != null) {
      return cache$1[cacheKey];
    }
    try {
      el$1.style[property] = prefixedValue;
    } catch (err) {
      cache$1[cacheKey] = false;
      return false;
    }
    if (transitionProperties[property]) {
      prefixedValue = prefixedValue.replace(transPropsRegExp, prefixTransitionCallback);
    } else if (el$1.style[property] === "") {
      prefixedValue = prefix.css + prefixedValue;
      if (prefixedValue === "-ms-flex")
        el$1.style[property] = "-ms-flexbox";
      el$1.style[property] = prefixedValue;
      if (el$1.style[property] === "") {
        cache$1[cacheKey] = false;
        return false;
      }
    }
    el$1.style[property] = "";
    cache$1[cacheKey] = prefixedValue;
    return cache$1[cacheKey];
  }

  // node_modules/jss-plugin-vendor-prefixer/dist/jss-plugin-vendor-prefixer.esm.js
  function jssVendorPrefixer() {
    function onProcessRule(rule) {
      if (rule.type === "keyframes") {
        var atRule = rule;
        atRule.at = supportedKeyframes(atRule.at);
      }
    }
    function prefixStyle(style2) {
      for (var prop in style2) {
        var value = style2[prop];
        if (prop === "fallbacks" && Array.isArray(value)) {
          style2[prop] = value.map(prefixStyle);
          continue;
        }
        var changeProp = false;
        var supportedProp = supportedProperty17(prop);
        if (supportedProp && supportedProp !== prop)
          changeProp = true;
        var changeValue = false;
        var supportedValue$1 = supportedValue(supportedProp, toCssValue(value));
        if (supportedValue$1 && supportedValue$1 !== value)
          changeValue = true;
        if (changeProp || changeValue) {
          if (changeProp)
            delete style2[prop];
          style2[supportedProp || prop] = supportedValue$1 || value;
        }
      }
      return style2;
    }
    function onProcessStyle2(style2, rule) {
      if (rule.type !== "style")
        return style2;
      return prefixStyle(style2);
    }
    function onChangeValue2(value, prop) {
      return supportedValue(prop, toCssValue(value)) || value;
    }
    return {
      onProcessRule,
      onProcessStyle: onProcessStyle2,
      onChangeValue: onChangeValue2
    };
  }
  var jss_plugin_vendor_prefixer_esm_default = jssVendorPrefixer;

  // node_modules/jss-plugin-props-sort/dist/jss-plugin-props-sort.esm.js
  function jssPropsSort() {
    var sort = function sort2(prop0, prop1) {
      if (prop0.length === prop1.length) {
        return prop0 > prop1 ? 1 : -1;
      }
      return prop0.length - prop1.length;
    };
    return {
      onProcessStyle: function onProcessStyle2(style2, rule) {
        if (rule.type !== "style")
          return style2;
        var newStyle = {};
        var props = Object.keys(style2).sort(sort);
        for (var i = 0; i < props.length; i++) {
          newStyle[props[i]] = style2[props[i]];
        }
        return newStyle;
      }
    };
  }
  var jss_plugin_props_sort_esm_default = jssPropsSort;

  // node_modules/@material-ui/styles/esm/jssPreset/jssPreset.js
  function jssPreset() {
    return {
      plugins: [
        jss_plugin_rule_value_function_esm_default(),
        jss_plugin_global_esm_default(),
        jss_plugin_nested_esm_default(),
        jss_plugin_camel_case_esm_default(),
        jss_plugin_default_unit_esm_default(),
        typeof window === "undefined" ? null : jss_plugin_vendor_prefixer_esm_default(),
        jss_plugin_props_sort_esm_default()
      ]
    };
  }

  // node_modules/@material-ui/styles/esm/makeStyles/makeStyles.js
  var import_react5 = __toModule(require_react());

  // node_modules/@material-ui/styles/esm/mergeClasses/mergeClasses.js
  function mergeClasses() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var baseClasses = options.baseClasses, newClasses = options.newClasses, Component5 = options.Component;
    if (!newClasses) {
      return baseClasses;
    }
    var nextClasses = _extends({}, baseClasses);
    if (true) {
      if (typeof newClasses === "string") {
        console.error(["Material-UI: The value `".concat(newClasses, "` ") + "provided to the classes prop of ".concat(getDisplayName(Component5), " is incorrect."), "You might want to use the className prop instead."].join("\n"));
        return baseClasses;
      }
    }
    Object.keys(newClasses).forEach(function(key) {
      if (true) {
        if (!baseClasses[key] && newClasses[key]) {
          console.error(["Material-UI: The key `".concat(key, "` ") + "provided to the classes prop is not implemented in ".concat(getDisplayName(Component5), "."), "You can only override one of the following: ".concat(Object.keys(baseClasses).join(","), ".")].join("\n"));
        }
        if (newClasses[key] && typeof newClasses[key] !== "string") {
          console.error(["Material-UI: The key `".concat(key, "` ") + "provided to the classes prop is not valid for ".concat(getDisplayName(Component5), "."), "You need to provide a non empty string instead of: ".concat(newClasses[key], ".")].join("\n"));
        }
      }
      if (newClasses[key]) {
        nextClasses[key] = "".concat(baseClasses[key], " ").concat(newClasses[key]);
      }
    });
    return nextClasses;
  }

  // node_modules/@material-ui/styles/esm/makeStyles/multiKeyStore.js
  var multiKeyStore = {
    set: function set(cache3, key1, key2, value) {
      var subCache = cache3.get(key1);
      if (!subCache) {
        subCache = new Map();
        cache3.set(key1, subCache);
      }
      subCache.set(key2, value);
    },
    get: function get(cache3, key1, key2) {
      var subCache = cache3.get(key1);
      return subCache ? subCache.get(key2) : void 0;
    },
    delete: function _delete(cache3, key1, key2) {
      var subCache = cache3.get(key1);
      subCache.delete(key2);
    }
  };
  var multiKeyStore_default = multiKeyStore;

  // node_modules/@material-ui/styles/esm/useTheme/useTheme.js
  var import_react3 = __toModule(require_react());

  // node_modules/@material-ui/styles/esm/useTheme/ThemeContext.js
  var import_react2 = __toModule(require_react());
  var ThemeContext = import_react2.default.createContext(null);
  if (true) {
    ThemeContext.displayName = "ThemeContext";
  }
  var ThemeContext_default = ThemeContext;

  // node_modules/@material-ui/styles/esm/useTheme/useTheme.js
  function useTheme() {
    var theme2 = import_react3.default.useContext(ThemeContext_default);
    if (true) {
      import_react3.default.useDebugValue(theme2);
    }
    return theme2;
  }

  // node_modules/@material-ui/styles/esm/StylesProvider/StylesProvider.js
  var import_react4 = __toModule(require_react());
  var import_prop_types6 = __toModule(require_prop_types());
  var jss2 = create2(jssPreset());
  var generateClassName = createGenerateClassName();
  var sheetsManager = new Map();
  var defaultOptions = {
    disableGeneration: false,
    generateClassName,
    jss: jss2,
    sheetsCache: null,
    sheetsManager,
    sheetsRegistry: null
  };
  var StylesContext = import_react4.default.createContext(defaultOptions);
  if (true) {
    StylesContext.displayName = "StylesContext";
  }
  var injectFirstNode;
  function StylesProvider(props) {
    var children = props.children, _props$injectFirst = props.injectFirst, injectFirst = _props$injectFirst === void 0 ? false : _props$injectFirst, _props$disableGenerat = props.disableGeneration, disableGeneration = _props$disableGenerat === void 0 ? false : _props$disableGenerat, localOptions = _objectWithoutProperties(props, ["children", "injectFirst", "disableGeneration"]);
    var outerOptions = import_react4.default.useContext(StylesContext);
    var context = _extends({}, outerOptions, {
      disableGeneration
    }, localOptions);
    if (true) {
      if (typeof window === "undefined" && !context.sheetsManager) {
        console.error("Material-UI: You need to use the ServerStyleSheets API when rendering on the server.");
      }
    }
    if (true) {
      if (context.jss.options.insertionPoint && injectFirst) {
        console.error("Material-UI: You cannot use a custom insertionPoint and <StylesContext injectFirst> at the same time.");
      }
    }
    if (true) {
      if (injectFirst && localOptions.jss) {
        console.error("Material-UI: You cannot use the jss and injectFirst props at the same time.");
      }
    }
    if (!context.jss.options.insertionPoint && injectFirst && typeof window !== "undefined") {
      if (!injectFirstNode) {
        var head = document.head;
        injectFirstNode = document.createComment("mui-inject-first");
        head.insertBefore(injectFirstNode, head.firstChild);
      }
      context.jss = create2({
        plugins: jssPreset().plugins,
        insertionPoint: injectFirstNode
      });
    }
    return /* @__PURE__ */ import_react4.default.createElement(StylesContext.Provider, {
      value: context
    }, children);
  }
  true ? StylesProvider.propTypes = {
    children: import_prop_types6.default.node.isRequired,
    disableGeneration: import_prop_types6.default.bool,
    generateClassName: import_prop_types6.default.func,
    injectFirst: import_prop_types6.default.bool,
    jss: import_prop_types6.default.object,
    serverGenerateClassName: import_prop_types6.default.func,
    sheetsCache: import_prop_types6.default.object,
    sheetsManager: import_prop_types6.default.object,
    sheetsRegistry: import_prop_types6.default.object
  } : void 0;
  if (true) {
    true ? StylesProvider.propTypes = exactProp(StylesProvider.propTypes) : void 0;
  }

  // node_modules/@material-ui/styles/esm/makeStyles/indexCounter.js
  var indexCounter = -1e9;
  function increment() {
    indexCounter += 1;
    if (true) {
      if (indexCounter >= 0) {
        console.warn(["Material-UI: You might have a memory leak.", "The indexCounter is not supposed to grow that much."].join("\n"));
      }
    }
    return indexCounter;
  }

  // node_modules/@material-ui/styles/esm/getStylesCreator/noopTheme.js
  var noopTheme = {};
  var noopTheme_default = noopTheme;

  // node_modules/@material-ui/styles/esm/getStylesCreator/getStylesCreator.js
  function getStylesCreator(stylesOrCreator) {
    var themingEnabled = typeof stylesOrCreator === "function";
    if (true) {
      if (_typeof(stylesOrCreator) !== "object" && !themingEnabled) {
        console.error(["Material-UI: The `styles` argument provided is invalid.", "You need to provide a function generating the styles or a styles object."].join("\n"));
      }
    }
    return {
      create: function create4(theme2, name) {
        var styles82;
        try {
          styles82 = themingEnabled ? stylesOrCreator(theme2) : stylesOrCreator;
        } catch (err) {
          if (true) {
            if (themingEnabled === true && theme2 === noopTheme_default) {
              console.error(["Material-UI: The `styles` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join("\n"));
            }
          }
          throw err;
        }
        if (!name || !theme2.overrides || !theme2.overrides[name]) {
          return styles82;
        }
        var overrides = theme2.overrides[name];
        var stylesWithOverrides = _extends({}, styles82);
        Object.keys(overrides).forEach(function(key) {
          if (true) {
            if (!stylesWithOverrides[key]) {
              console.warn(["Material-UI: You are trying to override a style that does not exist.", "Fix the `".concat(key, "` key of `theme.overrides.").concat(name, "`.")].join("\n"));
            }
          }
          stylesWithOverrides[key] = deepmerge(stylesWithOverrides[key], overrides[key]);
        });
        return stylesWithOverrides;
      },
      options: {}
    };
  }

  // node_modules/@material-ui/styles/esm/makeStyles/makeStyles.js
  function getClasses(_ref3, classes, Component5) {
    var state = _ref3.state, stylesOptions = _ref3.stylesOptions;
    if (stylesOptions.disableGeneration) {
      return classes || {};
    }
    if (!state.cacheClasses) {
      state.cacheClasses = {
        value: null,
        lastProp: null,
        lastJSS: {}
      };
    }
    var generate = false;
    if (state.classes !== state.cacheClasses.lastJSS) {
      state.cacheClasses.lastJSS = state.classes;
      generate = true;
    }
    if (classes !== state.cacheClasses.lastProp) {
      state.cacheClasses.lastProp = classes;
      generate = true;
    }
    if (generate) {
      state.cacheClasses.value = mergeClasses({
        baseClasses: state.cacheClasses.lastJSS,
        newClasses: classes,
        Component: Component5
      });
    }
    return state.cacheClasses.value;
  }
  function attach(_ref22, props) {
    var state = _ref22.state, theme2 = _ref22.theme, stylesOptions = _ref22.stylesOptions, stylesCreator = _ref22.stylesCreator, name = _ref22.name;
    if (stylesOptions.disableGeneration) {
      return;
    }
    var sheetManager = multiKeyStore_default.get(stylesOptions.sheetsManager, stylesCreator, theme2);
    if (!sheetManager) {
      sheetManager = {
        refs: 0,
        staticSheet: null,
        dynamicStyles: null
      };
      multiKeyStore_default.set(stylesOptions.sheetsManager, stylesCreator, theme2, sheetManager);
    }
    var options = _extends({}, stylesCreator.options, stylesOptions, {
      theme: theme2,
      flip: typeof stylesOptions.flip === "boolean" ? stylesOptions.flip : theme2.direction === "rtl"
    });
    options.generateId = options.serverGenerateClassName || options.generateClassName;
    var sheetsRegistry = stylesOptions.sheetsRegistry;
    if (sheetManager.refs === 0) {
      var staticSheet;
      if (stylesOptions.sheetsCache) {
        staticSheet = multiKeyStore_default.get(stylesOptions.sheetsCache, stylesCreator, theme2);
      }
      var styles82 = stylesCreator.create(theme2, name);
      if (!staticSheet) {
        staticSheet = stylesOptions.jss.createStyleSheet(styles82, _extends({
          link: false
        }, options));
        staticSheet.attach();
        if (stylesOptions.sheetsCache) {
          multiKeyStore_default.set(stylesOptions.sheetsCache, stylesCreator, theme2, staticSheet);
        }
      }
      if (sheetsRegistry) {
        sheetsRegistry.add(staticSheet);
      }
      sheetManager.staticSheet = staticSheet;
      sheetManager.dynamicStyles = getDynamicStyles(styles82);
    }
    if (sheetManager.dynamicStyles) {
      var dynamicSheet = stylesOptions.jss.createStyleSheet(sheetManager.dynamicStyles, _extends({
        link: true
      }, options));
      dynamicSheet.update(props);
      dynamicSheet.attach();
      state.dynamicSheet = dynamicSheet;
      state.classes = mergeClasses({
        baseClasses: sheetManager.staticSheet.classes,
        newClasses: dynamicSheet.classes
      });
      if (sheetsRegistry) {
        sheetsRegistry.add(dynamicSheet);
      }
    } else {
      state.classes = sheetManager.staticSheet.classes;
    }
    sheetManager.refs += 1;
  }
  function update(_ref3, props) {
    var state = _ref3.state;
    if (state.dynamicSheet) {
      state.dynamicSheet.update(props);
    }
  }
  function detach(_ref4) {
    var state = _ref4.state, theme2 = _ref4.theme, stylesOptions = _ref4.stylesOptions, stylesCreator = _ref4.stylesCreator;
    if (stylesOptions.disableGeneration) {
      return;
    }
    var sheetManager = multiKeyStore_default.get(stylesOptions.sheetsManager, stylesCreator, theme2);
    sheetManager.refs -= 1;
    var sheetsRegistry = stylesOptions.sheetsRegistry;
    if (sheetManager.refs === 0) {
      multiKeyStore_default.delete(stylesOptions.sheetsManager, stylesCreator, theme2);
      stylesOptions.jss.removeStyleSheet(sheetManager.staticSheet);
      if (sheetsRegistry) {
        sheetsRegistry.remove(sheetManager.staticSheet);
      }
    }
    if (state.dynamicSheet) {
      stylesOptions.jss.removeStyleSheet(state.dynamicSheet);
      if (sheetsRegistry) {
        sheetsRegistry.remove(state.dynamicSheet);
      }
    }
  }
  function useSynchronousEffect(func, values3) {
    var key = import_react5.default.useRef([]);
    var output;
    var currentKey = import_react5.default.useMemo(function() {
      return {};
    }, values3);
    if (key.current !== currentKey) {
      key.current = currentKey;
      output = func();
    }
    import_react5.default.useEffect(function() {
      return function() {
        if (output) {
          output();
        }
      };
    }, [currentKey]);
  }
  function makeStyles(stylesOrCreator) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var name = options.name, classNamePrefixOption = options.classNamePrefix, Component5 = options.Component, _options$defaultTheme = options.defaultTheme, defaultTheme2 = _options$defaultTheme === void 0 ? noopTheme_default : _options$defaultTheme, stylesOptions2 = _objectWithoutProperties(options, ["name", "classNamePrefix", "Component", "defaultTheme"]);
    var stylesCreator = getStylesCreator(stylesOrCreator);
    var classNamePrefix = name || classNamePrefixOption || "makeStyles";
    stylesCreator.options = {
      index: increment(),
      name,
      meta: classNamePrefix,
      classNamePrefix
    };
    var useStyles9 = function useStyles10() {
      var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var theme2 = useTheme() || defaultTheme2;
      var stylesOptions = _extends({}, import_react5.default.useContext(StylesContext), stylesOptions2);
      var instance = import_react5.default.useRef();
      var shouldUpdate = import_react5.default.useRef();
      useSynchronousEffect(function() {
        var current = {
          name,
          state: {},
          stylesCreator,
          stylesOptions,
          theme: theme2
        };
        attach(current, props);
        shouldUpdate.current = false;
        instance.current = current;
        return function() {
          detach(current);
        };
      }, [theme2, stylesCreator]);
      import_react5.default.useEffect(function() {
        if (shouldUpdate.current) {
          update(instance.current, props);
        }
        shouldUpdate.current = true;
      });
      var classes = getClasses(instance.current, props.classes, Component5);
      if (true) {
        import_react5.default.useDebugValue(classes);
      }
      return classes;
    };
    return useStyles9;
  }

  // node_modules/@babel/runtime/helpers/esm/classCallCheck.js
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  // node_modules/@material-ui/styles/esm/styled/styled.js
  var import_react6 = __toModule(require_react());

  // node_modules/clsx/dist/clsx.m.js
  function toVal(mix) {
    var k, y, str = "";
    if (typeof mix === "string" || typeof mix === "number") {
      str += mix;
    } else if (typeof mix === "object") {
      if (Array.isArray(mix)) {
        for (k = 0; k < mix.length; k++) {
          if (mix[k]) {
            if (y = toVal(mix[k])) {
              str && (str += " ");
              str += y;
            }
          }
        }
      } else {
        for (k in mix) {
          if (mix[k]) {
            str && (str += " ");
            str += k;
          }
        }
      }
    }
    return str;
  }
  function clsx_m_default() {
    var i = 0, tmp, x, str = "";
    while (i < arguments.length) {
      if (tmp = arguments[i++]) {
        if (x = toVal(tmp)) {
          str && (str += " ");
          str += x;
        }
      }
    }
    return str;
  }

  // node_modules/@material-ui/styles/esm/styled/styled.js
  var import_prop_types7 = __toModule(require_prop_types());
  var import_hoist_non_react_statics = __toModule(require_hoist_non_react_statics_cjs());
  function omit2(input, fields) {
    var output = {};
    Object.keys(input).forEach(function(prop) {
      if (fields.indexOf(prop) === -1) {
        output[prop] = input[prop];
      }
    });
    return output;
  }
  function styled(Component5) {
    var componentCreator = function componentCreator2(style2) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var name = options.name, stylesOptions = _objectWithoutProperties(options, ["name"]);
      if (Component5 === void 0) {
        throw new Error(["You are calling styled(Component)(style) with an undefined component.", "You may have forgotten to import it."].join("\n"));
      }
      var classNamePrefix = name;
      if (true) {
        if (!name) {
          var displayName = getDisplayName(Component5);
          if (displayName !== void 0) {
            classNamePrefix = displayName;
          }
        }
      }
      var stylesOrCreator = typeof style2 === "function" ? function(theme2) {
        return {
          root: function root(props) {
            return style2(_extends({
              theme: theme2
            }, props));
          }
        };
      } : {
        root: style2
      };
      var useStyles9 = makeStyles(stylesOrCreator, _extends({
        Component: Component5,
        name: name || Component5.displayName,
        classNamePrefix
      }, stylesOptions));
      var filterProps;
      var propTypes = {};
      if (style2.filterProps) {
        filterProps = style2.filterProps;
        delete style2.filterProps;
      }
      if (style2.propTypes) {
        propTypes = style2.propTypes;
        delete style2.propTypes;
      }
      var StyledComponent = /* @__PURE__ */ import_react6.default.forwardRef(function StyledComponent2(props, ref) {
        var children = props.children, classNameProp = props.className, clone = props.clone, ComponentProp = props.component, other = _objectWithoutProperties(props, ["children", "className", "clone", "component"]);
        var classes = useStyles9(props);
        var className = clsx_m_default(classes.root, classNameProp);
        var spread = other;
        if (filterProps) {
          spread = omit2(spread, filterProps);
        }
        if (clone) {
          return /* @__PURE__ */ import_react6.default.cloneElement(children, _extends({
            className: clsx_m_default(children.props.className, className)
          }, spread));
        }
        if (typeof children === "function") {
          return children(_extends({
            className
          }, spread));
        }
        var FinalComponent = ComponentProp || Component5;
        return /* @__PURE__ */ import_react6.default.createElement(FinalComponent, _extends({
          ref,
          className
        }, spread), children);
      });
      true ? StyledComponent.propTypes = _extends({
        children: import_prop_types7.default.oneOfType([import_prop_types7.default.node, import_prop_types7.default.func]),
        className: import_prop_types7.default.string,
        clone: chainPropTypes(import_prop_types7.default.bool, function(props) {
          if (props.clone && props.component) {
            return new Error("You can not use the clone and component prop at the same time.");
          }
          return null;
        }),
        component: import_prop_types7.default.elementType
      }, propTypes) : void 0;
      if (true) {
        StyledComponent.displayName = "Styled(".concat(classNamePrefix, ")");
      }
      (0, import_hoist_non_react_statics.default)(StyledComponent, Component5);
      return StyledComponent;
    };
    return componentCreator;
  }

  // node_modules/@material-ui/styles/esm/ThemeProvider/ThemeProvider.js
  var import_react7 = __toModule(require_react());
  var import_prop_types8 = __toModule(require_prop_types());
  function mergeOuterLocalTheme(outerTheme, localTheme) {
    if (typeof localTheme === "function") {
      var mergedTheme = localTheme(outerTheme);
      if (true) {
        if (!mergedTheme) {
          console.error(["Material-UI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
        }
      }
      return mergedTheme;
    }
    return _extends({}, outerTheme, localTheme);
  }
  function ThemeProvider(props) {
    var children = props.children, localTheme = props.theme;
    var outerTheme = useTheme();
    if (true) {
      if (outerTheme === null && typeof localTheme === "function") {
        console.error(["Material-UI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
      }
    }
    var theme2 = import_react7.default.useMemo(function() {
      var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
      if (output != null) {
        output[nested_default] = outerTheme !== null;
      }
      return output;
    }, [localTheme, outerTheme]);
    return /* @__PURE__ */ import_react7.default.createElement(ThemeContext_default.Provider, {
      value: theme2
    }, children);
  }
  true ? ThemeProvider.propTypes = {
    children: import_prop_types8.default.node.isRequired,
    theme: import_prop_types8.default.oneOfType([import_prop_types8.default.object, import_prop_types8.default.func]).isRequired
  } : void 0;
  if (true) {
    true ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;
  }
  var ThemeProvider_default = ThemeProvider;

  // node_modules/@material-ui/styles/esm/withStyles/withStyles.js
  var import_react8 = __toModule(require_react());
  var import_prop_types9 = __toModule(require_prop_types());
  var import_hoist_non_react_statics2 = __toModule(require_hoist_non_react_statics_cjs());
  var withStyles = function withStyles2(stylesOrCreator) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return function(Component5) {
      var defaultTheme2 = options.defaultTheme, _options$withTheme = options.withTheme, withTheme = _options$withTheme === void 0 ? false : _options$withTheme, name = options.name, stylesOptions = _objectWithoutProperties(options, ["defaultTheme", "withTheme", "name"]);
      if (true) {
        if (Component5 === void 0) {
          throw new Error(["You are calling withStyles(styles)(Component) with an undefined component.", "You may have forgotten to import it."].join("\n"));
        }
      }
      var classNamePrefix = name;
      if (true) {
        if (!name) {
          var displayName = getDisplayName(Component5);
          if (displayName !== void 0) {
            classNamePrefix = displayName;
          }
        }
      }
      var useStyles9 = makeStyles(stylesOrCreator, _extends({
        defaultTheme: defaultTheme2,
        Component: Component5,
        name: name || Component5.displayName,
        classNamePrefix
      }, stylesOptions));
      var WithStyles = /* @__PURE__ */ import_react8.default.forwardRef(function WithStyles2(props, ref) {
        var classesProp = props.classes, innerRef = props.innerRef, other = _objectWithoutProperties(props, ["classes", "innerRef"]);
        var classes = useStyles9(_extends({}, Component5.defaultProps, props));
        var theme2;
        var more = other;
        if (typeof name === "string" || withTheme) {
          theme2 = useTheme() || defaultTheme2;
          if (name) {
            more = getThemeProps({
              theme: theme2,
              name,
              props: other
            });
          }
          if (withTheme && !more.theme) {
            more.theme = theme2;
          }
        }
        return /* @__PURE__ */ import_react8.default.createElement(Component5, _extends({
          ref: innerRef || ref,
          classes
        }, more));
      });
      true ? WithStyles.propTypes = {
        classes: import_prop_types9.default.object,
        innerRef: chainPropTypes(import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object]), function(props) {
          if (props.innerRef == null) {
            return null;
          }
          return null;
        })
      } : void 0;
      if (true) {
        WithStyles.displayName = "WithStyles(".concat(getDisplayName(Component5), ")");
      }
      (0, import_hoist_non_react_statics2.default)(WithStyles, Component5);
      if (true) {
        WithStyles.Naked = Component5;
        WithStyles.options = options;
        WithStyles.useStyles = useStyles9;
      }
      return WithStyles;
    };
  };
  var withStyles_default = withStyles;

  // node_modules/@material-ui/styles/esm/index.js
  if (typeof window !== "undefined") {
    ponyfillGlobal_default["__@material-ui/styles-init__"] = ponyfillGlobal_default["__@material-ui/styles-init__"] || 0;
    if (ponyfillGlobal_default["__@material-ui/styles-init__"] === 1) {
      console.warn(["It looks like there are several instances of `@material-ui/styles` initialized in this application.", "This may cause theme propagation issues, broken class names, specificity issues, and makes your application bigger without a good reason.", "", "See https://material-ui.com/r/styles-instance-warning for more info."].join("\n"));
    }
    ponyfillGlobal_default["__@material-ui/styles-init__"] += 1;
  }

  // node_modules/@material-ui/core/esm/styles/defaultTheme.js
  var defaultTheme = createTheme_default();
  var defaultTheme_default = defaultTheme;

  // node_modules/@material-ui/core/esm/styles/makeStyles.js
  function makeStyles2(stylesOrCreator) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return makeStyles(stylesOrCreator, _extends({
      defaultTheme: defaultTheme_default
    }, options));
  }
  var makeStyles_default = makeStyles2;

  // node_modules/@material-ui/core/esm/styles/styled.js
  var styled2 = function styled3(Component5) {
    var componentCreator = styled(Component5);
    return function(style2, options) {
      return componentCreator(style2, _extends({
        defaultTheme: defaultTheme_default
      }, options));
    };
  };
  var styled_default = styled2;

  // node_modules/@material-ui/core/esm/styles/useTheme.js
  var import_react9 = __toModule(require_react());
  function useTheme2() {
    var theme2 = useTheme() || defaultTheme_default;
    if (true) {
      import_react9.default.useDebugValue(theme2);
    }
    return theme2;
  }

  // node_modules/@material-ui/core/esm/styles/withStyles.js
  function withStyles3(stylesOrCreator, options) {
    return withStyles_default(stylesOrCreator, _extends({
      defaultTheme: defaultTheme_default
    }, options));
  }
  var withStyles_default2 = withStyles3;

  // node_modules/@material-ui/core/esm/utils/capitalize.js
  function capitalize(string) {
    if (typeof string !== "string") {
      throw new Error(true ? "Material-UI: capitalize(string) expects a string argument." : formatMuiErrorMessage(7));
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  // node_modules/@material-ui/core/esm/utils/createChainedFunction.js
  function createChainedFunction() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }
    return funcs.reduce(function(acc, func) {
      if (func == null) {
        return acc;
      }
      if (true) {
        if (typeof func !== "function") {
          console.error("Material-UI: Invalid Argument Type, must only provide functions, undefined, or null.");
        }
      }
      return function chainedFunction() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        acc.apply(this, args);
        func.apply(this, args);
      };
    }, function() {
    });
  }

  // node_modules/@material-ui/core/esm/utils/createSvgIcon.js
  var import_react10 = __toModule(require_react());

  // node_modules/@material-ui/core/esm/SvgIcon/SvgIcon.js
  var React9 = __toModule(require_react());
  var import_prop_types10 = __toModule(require_prop_types());
  var styles = function styles2(theme2) {
    return {
      root: {
        userSelect: "none",
        width: "1em",
        height: "1em",
        display: "inline-block",
        fill: "currentColor",
        flexShrink: 0,
        fontSize: theme2.typography.pxToRem(24),
        transition: theme2.transitions.create("fill", {
          duration: theme2.transitions.duration.shorter
        })
      },
      colorPrimary: {
        color: theme2.palette.primary.main
      },
      colorSecondary: {
        color: theme2.palette.secondary.main
      },
      colorAction: {
        color: theme2.palette.action.active
      },
      colorError: {
        color: theme2.palette.error.main
      },
      colorDisabled: {
        color: theme2.palette.action.disabled
      },
      fontSizeInherit: {
        fontSize: "inherit"
      },
      fontSizeSmall: {
        fontSize: theme2.typography.pxToRem(20)
      },
      fontSizeLarge: {
        fontSize: theme2.typography.pxToRem(35)
      }
    };
  };
  var SvgIcon = /* @__PURE__ */ React9.forwardRef(function SvgIcon2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "inherit" : _props$color, _props$component = props.component, Component5 = _props$component === void 0 ? "svg" : _props$component, _props$fontSize = props.fontSize, fontSize2 = _props$fontSize === void 0 ? "medium" : _props$fontSize, htmlColor = props.htmlColor, titleAccess = props.titleAccess, _props$viewBox = props.viewBox, viewBox = _props$viewBox === void 0 ? "0 0 24 24" : _props$viewBox, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "fontSize", "htmlColor", "titleAccess", "viewBox"]);
    return /* @__PURE__ */ React9.createElement(Component5, _extends({
      className: clsx_m_default(classes.root, className, color2 !== "inherit" && classes["color".concat(capitalize(color2))], fontSize2 !== "default" && fontSize2 !== "medium" && classes["fontSize".concat(capitalize(fontSize2))]),
      focusable: "false",
      viewBox,
      color: htmlColor,
      "aria-hidden": titleAccess ? void 0 : true,
      role: titleAccess ? "img" : void 0,
      ref
    }, other), children, titleAccess ? /* @__PURE__ */ React9.createElement("title", null, titleAccess) : null);
  });
  true ? SvgIcon.propTypes = {
    children: import_prop_types10.default.node,
    classes: import_prop_types10.default.object,
    className: import_prop_types10.default.string,
    color: import_prop_types10.default.oneOf(["action", "disabled", "error", "inherit", "primary", "secondary"]),
    component: import_prop_types10.default.elementType,
    fontSize: chainPropTypes(import_prop_types10.default.oneOf(["default", "inherit", "large", "medium", "small"]), function(props) {
      var fontSize2 = props.fontSize;
      if (fontSize2 === "default") {
        throw new Error('Material-UI: `fontSize="default"` is deprecated. Use `fontSize="medium"` instead.');
      }
      return null;
    }),
    htmlColor: import_prop_types10.default.string,
    shapeRendering: import_prop_types10.default.string,
    titleAccess: import_prop_types10.default.string,
    viewBox: import_prop_types10.default.string
  } : void 0;
  SvgIcon.muiName = "SvgIcon";
  var SvgIcon_default = withStyles_default2(styles, {
    name: "MuiSvgIcon"
  })(SvgIcon);

  // node_modules/@material-ui/core/esm/utils/createSvgIcon.js
  function createSvgIcon(path, displayName) {
    var Component5 = function Component6(props, ref) {
      return /* @__PURE__ */ import_react10.default.createElement(SvgIcon_default, _extends({
        ref
      }, props), path);
    };
    if (true) {
      Component5.displayName = "".concat(displayName, "Icon");
    }
    Component5.muiName = SvgIcon_default.muiName;
    return /* @__PURE__ */ import_react10.default.memo(/* @__PURE__ */ import_react10.default.forwardRef(Component5));
  }

  // node_modules/@material-ui/core/esm/utils/debounce.js
  function debounce(func) {
    var wait = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 166;
    var timeout2;
    function debounced() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var that = this;
      var later = function later2() {
        func.apply(that, args);
      };
      clearTimeout(timeout2);
      timeout2 = setTimeout(later, wait);
    }
    debounced.clear = function() {
      clearTimeout(timeout2);
    };
    return debounced;
  }

  // node_modules/@material-ui/core/esm/utils/deprecatedPropType.js
  function deprecatedPropType(validator, reason) {
    if (false) {
      return function() {
        return null;
      };
    }
    return function(props, propName, componentName, location, propFullName) {
      var componentNameSafe = componentName || "<<anonymous>>";
      var propFullNameSafe = propFullName || propName;
      if (typeof props[propName] !== "undefined") {
        return new Error("The ".concat(location, " `").concat(propFullNameSafe, "` of ") + "`".concat(componentNameSafe, "` is deprecated. ").concat(reason));
      }
      return null;
    };
  }

  // node_modules/@material-ui/core/esm/utils/isMuiElement.js
  var React11 = __toModule(require_react());
  function isMuiElement(element, muiNames) {
    return /* @__PURE__ */ React11.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
  }

  // node_modules/@material-ui/core/esm/utils/ownerDocument.js
  function ownerDocument(node) {
    return node && node.ownerDocument || document;
  }

  // node_modules/@material-ui/core/esm/utils/ownerWindow.js
  function ownerWindow(node) {
    var doc = ownerDocument(node);
    return doc.defaultView || window;
  }

  // node_modules/@material-ui/core/esm/utils/requirePropFactory.js
  function requirePropFactory(componentNameInError) {
    if (false) {
      return function() {
        return null;
      };
    }
    var requireProp = function requireProp2(requiredProp) {
      return function(props, propName, componentName, location, propFullName) {
        var propFullNameSafe = propFullName || propName;
        if (typeof props[propName] !== "undefined" && !props[requiredProp]) {
          return new Error("The prop `".concat(propFullNameSafe, "` of ") + "`".concat(componentNameInError, "` must be used on `").concat(requiredProp, "`."));
        }
        return null;
      };
    };
    return requireProp;
  }

  // node_modules/@material-ui/core/esm/utils/setRef.js
  function setRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }

  // node_modules/@material-ui/core/esm/utils/useControlled.js
  var React12 = __toModule(require_react());
  function useControlled(_ref3) {
    var controlled = _ref3.controlled, defaultProp = _ref3.default, name = _ref3.name, _ref$state = _ref3.state, state = _ref$state === void 0 ? "value" : _ref$state;
    var _React$useRef = React12.useRef(controlled !== void 0), isControlled = _React$useRef.current;
    var _React$useState = React12.useState(defaultProp), valueState = _React$useState[0], setValue = _React$useState[1];
    var value = isControlled ? controlled : valueState;
    if (true) {
      React12.useEffect(function() {
        if (isControlled !== (controlled !== void 0)) {
          console.error(["Material-UI: A component is changing the ".concat(isControlled ? "" : "un", "controlled ").concat(state, " state of ").concat(name, " to be ").concat(isControlled ? "un" : "", "controlled."), "Elements should not switch from uncontrolled to controlled (or vice versa).", "Decide between using a controlled or uncontrolled ".concat(name, " ") + "element for the lifetime of the component.", "The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
        }
      }, [controlled]);
      var _React$useRef2 = React12.useRef(defaultProp), defaultValue = _React$useRef2.current;
      React12.useEffect(function() {
        if (!isControlled && defaultValue !== defaultProp) {
          console.error(["Material-UI: A component is changing the default ".concat(state, " state of an uncontrolled ").concat(name, " after being initialized. ") + "To suppress this warning opt to use a controlled ".concat(name, ".")].join("\n"));
        }
      }, [JSON.stringify(defaultProp)]);
    }
    var setValueIfUncontrolled = React12.useCallback(function(newValue) {
      if (!isControlled) {
        setValue(newValue);
      }
    }, []);
    return [value, setValueIfUncontrolled];
  }

  // node_modules/@material-ui/core/esm/utils/useEventCallback.js
  var React13 = __toModule(require_react());
  var useEnhancedEffect = typeof window !== "undefined" ? React13.useLayoutEffect : React13.useEffect;
  function useEventCallback(fn) {
    var ref = React13.useRef(fn);
    useEnhancedEffect(function() {
      ref.current = fn;
    });
    return React13.useCallback(function() {
      return (0, ref.current).apply(void 0, arguments);
    }, []);
  }

  // node_modules/@material-ui/core/esm/utils/useForkRef.js
  var React14 = __toModule(require_react());
  function useForkRef(refA, refB) {
    return React14.useMemo(function() {
      if (refA == null && refB == null) {
        return null;
      }
      return function(refValue) {
        setRef(refA, refValue);
        setRef(refB, refValue);
      };
    }, [refA, refB]);
  }

  // node_modules/@material-ui/core/esm/utils/unstable_useId.js
  var React15 = __toModule(require_react());
  function useId(idOverride) {
    var _React$useState = React15.useState(idOverride), defaultId = _React$useState[0], setDefaultId = _React$useState[1];
    var id = idOverride || defaultId;
    React15.useEffect(function() {
      if (defaultId == null) {
        setDefaultId("mui-".concat(Math.round(Math.random() * 1e5)));
      }
    }, [defaultId]);
    return id;
  }

  // node_modules/@material-ui/core/esm/utils/useIsFocusVisible.js
  var React16 = __toModule(require_react());
  var ReactDOM = __toModule(require_react_dom());
  var hadKeyboardEvent = true;
  var hadFocusVisibleRecently = false;
  var hadFocusVisibleRecentlyTimeout = null;
  var inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    "datetime-local": true
  };
  function focusTriggersKeyboardModality(node) {
    var type = node.type, tagName = node.tagName;
    if (tagName === "INPUT" && inputTypesWhitelist[type] && !node.readOnly) {
      return true;
    }
    if (tagName === "TEXTAREA" && !node.readOnly) {
      return true;
    }
    if (node.isContentEditable) {
      return true;
    }
    return false;
  }
  function handleKeyDown(event) {
    if (event.metaKey || event.altKey || event.ctrlKey) {
      return;
    }
    hadKeyboardEvent = true;
  }
  function handlePointerDown() {
    hadKeyboardEvent = false;
  }
  function handleVisibilityChange() {
    if (this.visibilityState === "hidden") {
      if (hadFocusVisibleRecently) {
        hadKeyboardEvent = true;
      }
    }
  }
  function prepare(doc) {
    doc.addEventListener("keydown", handleKeyDown, true);
    doc.addEventListener("mousedown", handlePointerDown, true);
    doc.addEventListener("pointerdown", handlePointerDown, true);
    doc.addEventListener("touchstart", handlePointerDown, true);
    doc.addEventListener("visibilitychange", handleVisibilityChange, true);
  }
  function isFocusVisible(event) {
    var target = event.target;
    try {
      return target.matches(":focus-visible");
    } catch (error) {
    }
    return hadKeyboardEvent || focusTriggersKeyboardModality(target);
  }
  function handleBlurVisible() {
    hadFocusVisibleRecently = true;
    window.clearTimeout(hadFocusVisibleRecentlyTimeout);
    hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {
      hadFocusVisibleRecently = false;
    }, 100);
  }
  function useIsFocusVisible() {
    var ref = React16.useCallback(function(instance) {
      var node = ReactDOM.findDOMNode(instance);
      if (node != null) {
        prepare(node.ownerDocument);
      }
    }, []);
    if (true) {
      React16.useDebugValue(isFocusVisible);
    }
    return {
      isFocusVisible,
      onBlurVisible: handleBlurVisible,
      ref
    };
  }

  // node_modules/@material-ui/core/esm/Collapse/Collapse.js
  var React20 = __toModule(require_react());
  var import_prop_types14 = __toModule(require_prop_types());

  // node_modules/react-transition-group/esm/Transition.js
  var import_prop_types12 = __toModule(require_prop_types());
  var import_react12 = __toModule(require_react());
  var import_react_dom2 = __toModule(require_react_dom());

  // node_modules/react-transition-group/esm/config.js
  var config_default = {
    disabled: false
  };

  // node_modules/react-transition-group/esm/utils/PropTypes.js
  var import_prop_types11 = __toModule(require_prop_types());
  var timeoutsShape = true ? import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.shape({
    enter: import_prop_types11.default.number,
    exit: import_prop_types11.default.number,
    appear: import_prop_types11.default.number
  }).isRequired]) : null;
  var classNamesShape = true ? import_prop_types11.default.oneOfType([import_prop_types11.default.string, import_prop_types11.default.shape({
    enter: import_prop_types11.default.string,
    exit: import_prop_types11.default.string,
    active: import_prop_types11.default.string
  }), import_prop_types11.default.shape({
    enter: import_prop_types11.default.string,
    enterDone: import_prop_types11.default.string,
    enterActive: import_prop_types11.default.string,
    exit: import_prop_types11.default.string,
    exitDone: import_prop_types11.default.string,
    exitActive: import_prop_types11.default.string
  })]) : null;

  // node_modules/react-transition-group/esm/TransitionGroupContext.js
  var import_react11 = __toModule(require_react());
  var TransitionGroupContext_default = import_react11.default.createContext(null);

  // node_modules/react-transition-group/esm/Transition.js
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition12, _React$Component);
    function Transition12(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition12.getDerivedStateFromProps = function getDerivedStateFromProps(_ref3, prevState) {
      var nextIn = _ref3.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition12.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout2 = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout2;
      if (timeout2 != null && typeof timeout2 !== "number") {
        exit = timeout2.exit;
        enter = timeout2.enter;
        appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref22 = this.props.nodeRef ? [appearing] : [import_react_dom2.default.findDOMNode(this), appearing], maybeNode = _ref22[0], maybeAppearing = _ref22[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config_default.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : import_react_dom2.default.findDOMNode(this);
      if (!exit || config_default.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
      this.setNextCallback(handler);
      var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom2.default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
      if (!node || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout2 != null) {
        setTimeout(this.nextCallback, timeout2);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return /* @__PURE__ */ import_react12.default.createElement(TransitionGroupContext_default.Provider, {
        value: null
      }, typeof children === "function" ? children(status, childProps) : import_react12.default.cloneElement(import_react12.default.Children.only(children), childProps));
    };
    return Transition12;
  }(import_react12.default.Component);
  Transition.contextType = TransitionGroupContext_default;
  Transition.propTypes = true ? {
    nodeRef: import_prop_types12.default.shape({
      current: typeof Element === "undefined" ? import_prop_types12.default.any : function(propValue, key, componentName, location, propFullName, secret) {
        var value = propValue[key];
        return import_prop_types12.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
      }
    }),
    children: import_prop_types12.default.oneOfType([import_prop_types12.default.func.isRequired, import_prop_types12.default.element.isRequired]).isRequired,
    in: import_prop_types12.default.bool,
    mountOnEnter: import_prop_types12.default.bool,
    unmountOnExit: import_prop_types12.default.bool,
    appear: import_prop_types12.default.bool,
    enter: import_prop_types12.default.bool,
    exit: import_prop_types12.default.bool,
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener)
        pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    addEndListener: import_prop_types12.default.func,
    onEnter: import_prop_types12.default.func,
    onEntering: import_prop_types12.default.func,
    onEntered: import_prop_types12.default.func,
    onExit: import_prop_types12.default.func,
    onExiting: import_prop_types12.default.func,
    onExited: import_prop_types12.default.func
  } : {};
  function noop() {
  }
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition_default = Transition;

  // node_modules/react-transition-group/esm/TransitionGroup.js
  var import_prop_types13 = __toModule(require_prop_types());
  var import_react14 = __toModule(require_react());

  // node_modules/react-transition-group/esm/utils/ChildMapping.js
  var import_react13 = __toModule(require_react());
  function getChildMapping(children, mapFn) {
    var mapper = function mapper2(child) {
      return mapFn && (0, import_react13.isValidElement)(child) ? mapFn(child) : child;
    };
    var result = Object.create(null);
    if (children)
      import_react13.Children.map(children, function(c) {
        return c;
      }).forEach(function(child) {
        result[child.key] = mapper(child);
      });
    return result;
  }
  function mergeChildMappings(prev, next) {
    prev = prev || {};
    next = next || {};
    function getValueForKey(key) {
      return key in next ? next[key] : prev[key];
    }
    var nextKeysPending = Object.create(null);
    var pendingKeys = [];
    for (var prevKey in prev) {
      if (prevKey in next) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }
    var i;
    var childMapping = {};
    for (var nextKey in next) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }
    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }
    return childMapping;
  }
  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }
  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
      return (0, import_react13.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, "appear", props),
        enter: getProp(child, "enter", props),
        exit: getProp(child, "exit", props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
      var child = children[key];
      if (!(0, import_react13.isValidElement)(child))
        return;
      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;
      var prevChild = prevChildMapping[key];
      var isLeaving = (0, import_react13.isValidElement)(prevChild) && !prevChild.props.in;
      if (hasNext && (!hasPrev || isLeaving)) {
        children[key] = (0, import_react13.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        children[key] = (0, import_react13.cloneElement)(child, {
          in: false
        });
      } else if (hasNext && hasPrev && (0, import_react13.isValidElement)(prevChild)) {
        children[key] = (0, import_react13.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      }
    });
    return children;
  }

  // node_modules/react-transition-group/esm/TransitionGroup.js
  var values2 = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
      return obj[k];
    });
  };
  var defaultProps = {
    component: "div",
    childFactory: function childFactory(child) {
      return child;
    }
  };
  var TransitionGroup = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(TransitionGroup2, _React$Component);
    function TransitionGroup2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited,
        firstRender: true
      };
      return _this;
    }
    var _proto = TransitionGroup2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };
    TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref3) {
      var prevChildMapping = _ref3.children, handleExited = _ref3.handleExited, firstRender = _ref3.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    };
    _proto.handleExited = function handleExited(child, node) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping)
        return;
      if (child.props.onExited) {
        child.props.onExited(node);
      }
      if (this.mounted) {
        this.setState(function(state) {
          var children = _extends({}, state.children);
          delete children[child.key];
          return {
            children
          };
        });
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, Component5 = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
      var contextValue = this.state.contextValue;
      var children = values2(this.state.children).map(childFactory2);
      delete props.appear;
      delete props.enter;
      delete props.exit;
      if (Component5 === null) {
        return /* @__PURE__ */ import_react14.default.createElement(TransitionGroupContext_default.Provider, {
          value: contextValue
        }, children);
      }
      return /* @__PURE__ */ import_react14.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, /* @__PURE__ */ import_react14.default.createElement(Component5, props, children));
    };
    return TransitionGroup2;
  }(import_react14.default.Component);
  TransitionGroup.propTypes = true ? {
    component: import_prop_types13.default.any,
    children: import_prop_types13.default.node,
    appear: import_prop_types13.default.bool,
    enter: import_prop_types13.default.bool,
    exit: import_prop_types13.default.bool,
    childFactory: import_prop_types13.default.func
  } : {};
  TransitionGroup.defaultProps = defaultProps;
  var TransitionGroup_default = TransitionGroup;

  // node_modules/@material-ui/core/esm/transitions/utils.js
  var reflow = function reflow2(node) {
    return node.scrollTop;
  };
  function getTransitionProps(props, options) {
    var timeout2 = props.timeout, _props$style = props.style, style2 = _props$style === void 0 ? {} : _props$style;
    return {
      duration: style2.transitionDuration || typeof timeout2 === "number" ? timeout2 : timeout2[options.mode] || 0,
      delay: style2.transitionDelay
    };
  }

  // node_modules/@material-ui/core/esm/Collapse/Collapse.js
  var styles3 = function styles4(theme2) {
    return {
      root: {
        height: 0,
        overflow: "hidden",
        transition: theme2.transitions.create("height")
      },
      entered: {
        height: "auto",
        overflow: "visible"
      },
      hidden: {
        visibility: "hidden"
      },
      wrapper: {
        display: "flex"
      },
      wrapperInner: {
        width: "100%"
      }
    };
  };
  var Collapse = /* @__PURE__ */ React20.forwardRef(function Collapse2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, collapsedHeight = props.collapsedHeight, _props$collapsedSize = props.collapsedSize, collapsedSizeProp = _props$collapsedSize === void 0 ? "0px" : _props$collapsedSize, _props$component = props.component, Component5 = _props$component === void 0 ? "div" : _props$component, _props$disableStrictM = props.disableStrictModeCompat, disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style2 = props.style, _props$timeout = props.timeout, timeout2 = _props$timeout === void 0 ? duration.standard : _props$timeout, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Transition_default : _props$TransitionComp, other = _objectWithoutProperties(props, ["children", "classes", "className", "collapsedHeight", "collapsedSize", "component", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);
    var theme2 = useTheme2();
    var timer = React20.useRef();
    var wrapperRef = React20.useRef(null);
    var autoTransitionDuration = React20.useRef();
    var collapsedSize = typeof (collapsedHeight || collapsedSizeProp) === "number" ? "".concat(collapsedHeight || collapsedSizeProp, "px") : collapsedHeight || collapsedSizeProp;
    React20.useEffect(function() {
      return function() {
        clearTimeout(timer.current);
      };
    }, []);
    var enableStrictModeCompat = theme2.unstable_strictMode && !disableStrictModeCompat;
    var nodeRef = React20.useRef(null);
    var handleRef = useForkRef(ref, enableStrictModeCompat ? nodeRef : void 0);
    var normalizedTransitionCallback = function normalizedTransitionCallback2(callback) {
      return function(nodeOrAppearing, maybeAppearing) {
        if (callback) {
          var _ref3 = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing], _ref22 = _slicedToArray(_ref3, 2), node = _ref22[0], isAppearing = _ref22[1];
          if (isAppearing === void 0) {
            callback(node);
          } else {
            callback(node, isAppearing);
          }
        }
      };
    };
    var handleEnter = normalizedTransitionCallback(function(node, isAppearing) {
      node.style.height = collapsedSize;
      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    var handleEntering = normalizedTransitionCallback(function(node, isAppearing) {
      var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;
      var _getTransitionProps = getTransitionProps({
        style: style2,
        timeout: timeout2
      }, {
        mode: "enter"
      }), transitionDuration = _getTransitionProps.duration;
      if (timeout2 === "auto") {
        var duration2 = theme2.transitions.getAutoHeightDuration(wrapperHeight);
        node.style.transitionDuration = "".concat(duration2, "ms");
        autoTransitionDuration.current = duration2;
      } else {
        node.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : "".concat(transitionDuration, "ms");
      }
      node.style.height = "".concat(wrapperHeight, "px");
      if (onEntering) {
        onEntering(node, isAppearing);
      }
    });
    var handleEntered = normalizedTransitionCallback(function(node, isAppearing) {
      node.style.height = "auto";
      if (onEntered) {
        onEntered(node, isAppearing);
      }
    });
    var handleExit = normalizedTransitionCallback(function(node) {
      var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;
      node.style.height = "".concat(wrapperHeight, "px");
      if (onExit) {
        onExit(node);
      }
    });
    var handleExited = normalizedTransitionCallback(onExited);
    var handleExiting = normalizedTransitionCallback(function(node) {
      var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;
      var _getTransitionProps2 = getTransitionProps({
        style: style2,
        timeout: timeout2
      }, {
        mode: "exit"
      }), transitionDuration = _getTransitionProps2.duration;
      if (timeout2 === "auto") {
        var duration2 = theme2.transitions.getAutoHeightDuration(wrapperHeight);
        node.style.transitionDuration = "".concat(duration2, "ms");
        autoTransitionDuration.current = duration2;
      } else {
        node.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : "".concat(transitionDuration, "ms");
      }
      node.style.height = collapsedSize;
      if (onExiting) {
        onExiting(node);
      }
    });
    var addEndListener = function addEndListener2(nodeOrNext, maybeNext) {
      var next = enableStrictModeCompat ? nodeOrNext : maybeNext;
      if (timeout2 === "auto") {
        timer.current = setTimeout(next, autoTransitionDuration.current || 0);
      }
    };
    return /* @__PURE__ */ React20.createElement(TransitionComponent, _extends({
      in: inProp,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      timeout: timeout2 === "auto" ? null : timeout2
    }, other), function(state, childProps) {
      return /* @__PURE__ */ React20.createElement(Component5, _extends({
        className: clsx_m_default(classes.root, classes.container, className, {
          "entered": classes.entered,
          "exited": !inProp && collapsedSize === "0px" && classes.hidden
        }[state]),
        style: _extends({
          minHeight: collapsedSize
        }, style2),
        ref: handleRef
      }, childProps), /* @__PURE__ */ React20.createElement("div", {
        className: classes.wrapper,
        ref: wrapperRef
      }, /* @__PURE__ */ React20.createElement("div", {
        className: classes.wrapperInner
      }, children)));
    });
  });
  true ? Collapse.propTypes = {
    children: import_prop_types14.default.node,
    classes: chainPropTypes(import_prop_types14.default.object, function(props) {
      if (props.classes && props.classes.container) {
        throw new Error(["Material-UI: the classes.container key is deprecated.", "Use `classes.root` instead", "The name of the pseudo-class was changed for consistency."].join("\n"));
      }
      return null;
    }),
    className: import_prop_types14.default.string,
    collapsedHeight: deprecatedPropType(import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string]), "The prop was renamed to support the vertical orientation, use `collapsedSize` instead"),
    collapsedSize: import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string]),
    component: import_prop_types14.default.elementType,
    disableStrictModeCompat: import_prop_types14.default.bool,
    in: import_prop_types14.default.bool,
    onEnter: import_prop_types14.default.func,
    onEntered: import_prop_types14.default.func,
    onEntering: import_prop_types14.default.func,
    onExit: import_prop_types14.default.func,
    onExited: import_prop_types14.default.func,
    onExiting: import_prop_types14.default.func,
    style: import_prop_types14.default.object,
    timeout: import_prop_types14.default.oneOfType([import_prop_types14.default.oneOf(["auto"]), import_prop_types14.default.number, import_prop_types14.default.shape({
      appear: import_prop_types14.default.number,
      enter: import_prop_types14.default.number,
      exit: import_prop_types14.default.number
    })])
  } : void 0;
  Collapse.muiSupportAuto = true;
  var Collapse_default = withStyles_default2(styles3, {
    name: "MuiCollapse"
  })(Collapse);

  // node_modules/@material-ui/core/esm/Paper/Paper.js
  var React21 = __toModule(require_react());
  var import_prop_types15 = __toModule(require_prop_types());
  var styles5 = function styles6(theme2) {
    var elevations = {};
    theme2.shadows.forEach(function(shadow, index) {
      elevations["elevation".concat(index)] = {
        boxShadow: shadow
      };
    });
    return _extends({
      root: {
        backgroundColor: theme2.palette.background.paper,
        color: theme2.palette.text.primary,
        transition: theme2.transitions.create("box-shadow")
      },
      rounded: {
        borderRadius: theme2.shape.borderRadius
      },
      outlined: {
        border: "1px solid ".concat(theme2.palette.divider)
      }
    }, elevations);
  };
  var Paper = /* @__PURE__ */ React21.forwardRef(function Paper2(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component5 = _props$component === void 0 ? "div" : _props$component, _props$square = props.square, square = _props$square === void 0 ? false : _props$square, _props$elevation = props.elevation, elevation = _props$elevation === void 0 ? 1 : _props$elevation, _props$variant = props.variant, variant = _props$variant === void 0 ? "elevation" : _props$variant, other = _objectWithoutProperties(props, ["classes", "className", "component", "square", "elevation", "variant"]);
    return /* @__PURE__ */ React21.createElement(Component5, _extends({
      className: clsx_m_default(classes.root, className, variant === "outlined" ? classes.outlined : classes["elevation".concat(elevation)], !square && classes.rounded),
      ref
    }, other));
  });
  true ? Paper.propTypes = {
    children: import_prop_types15.default.node,
    classes: import_prop_types15.default.object,
    className: import_prop_types15.default.string,
    component: import_prop_types15.default.elementType,
    elevation: chainPropTypes(import_prop_types15.default.number, function(props) {
      var classes = props.classes, elevation = props.elevation;
      if (classes === void 0) {
        return null;
      }
      if (elevation != null && classes["elevation".concat(elevation)] === void 0) {
        return new Error("Material-UI: This elevation `".concat(elevation, "` is not implemented."));
      }
      return null;
    }),
    square: import_prop_types15.default.bool,
    variant: import_prop_types15.default.oneOf(["elevation", "outlined"])
  } : void 0;
  var Paper_default = withStyles_default2(styles5, {
    name: "MuiPaper"
  })(Paper);

  // node_modules/@material-ui/core/esm/ButtonBase/ButtonBase.js
  var React24 = __toModule(require_react());
  var import_prop_types18 = __toModule(require_prop_types());
  var ReactDOM3 = __toModule(require_react_dom());

  // node_modules/@material-ui/core/esm/ButtonBase/TouchRipple.js
  var React23 = __toModule(require_react());
  var import_prop_types17 = __toModule(require_prop_types());

  // node_modules/@material-ui/core/esm/ButtonBase/Ripple.js
  var React22 = __toModule(require_react());
  var import_prop_types16 = __toModule(require_prop_types());
  var useEnhancedEffect2 = typeof window === "undefined" ? React22.useEffect : React22.useLayoutEffect;
  function Ripple(props) {
    var classes = props.classes, _props$pulsate = props.pulsate, pulsate = _props$pulsate === void 0 ? false : _props$pulsate, rippleX = props.rippleX, rippleY = props.rippleY, rippleSize = props.rippleSize, inProp = props.in, _props$onExited = props.onExited, onExited = _props$onExited === void 0 ? function() {
    } : _props$onExited, timeout2 = props.timeout;
    var _React$useState = React22.useState(false), leaving = _React$useState[0], setLeaving = _React$useState[1];
    var rippleClassName = clsx_m_default(classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    var rippleStyles = {
      width: rippleSize,
      height: rippleSize,
      top: -(rippleSize / 2) + rippleY,
      left: -(rippleSize / 2) + rippleX
    };
    var childClassName = clsx_m_default(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    var handleExited = useEventCallback(onExited);
    useEnhancedEffect2(function() {
      if (!inProp) {
        setLeaving(true);
        var timeoutId = setTimeout(handleExited, timeout2);
        return function() {
          clearTimeout(timeoutId);
        };
      }
      return void 0;
    }, [handleExited, inProp, timeout2]);
    return /* @__PURE__ */ React22.createElement("span", {
      className: rippleClassName,
      style: rippleStyles
    }, /* @__PURE__ */ React22.createElement("span", {
      className: childClassName
    }));
  }
  true ? Ripple.propTypes = {
    classes: import_prop_types16.default.object.isRequired,
    in: import_prop_types16.default.bool,
    onExited: import_prop_types16.default.func,
    pulsate: import_prop_types16.default.bool,
    rippleSize: import_prop_types16.default.number,
    rippleX: import_prop_types16.default.number,
    rippleY: import_prop_types16.default.number,
    timeout: import_prop_types16.default.number.isRequired
  } : void 0;
  var Ripple_default = Ripple;

  // node_modules/@material-ui/core/esm/ButtonBase/TouchRipple.js
  var DURATION = 550;
  var DELAY_RIPPLE = 80;
  var styles7 = function styles8(theme2) {
    return {
      root: {
        overflow: "hidden",
        pointerEvents: "none",
        position: "absolute",
        zIndex: 0,
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        borderRadius: "inherit"
      },
      ripple: {
        opacity: 0,
        position: "absolute"
      },
      rippleVisible: {
        opacity: 0.3,
        transform: "scale(1)",
        animation: "$enter ".concat(DURATION, "ms ").concat(theme2.transitions.easing.easeInOut)
      },
      ripplePulsate: {
        animationDuration: "".concat(theme2.transitions.duration.shorter, "ms")
      },
      child: {
        opacity: 1,
        display: "block",
        width: "100%",
        height: "100%",
        borderRadius: "50%",
        backgroundColor: "currentColor"
      },
      childLeaving: {
        opacity: 0,
        animation: "$exit ".concat(DURATION, "ms ").concat(theme2.transitions.easing.easeInOut)
      },
      childPulsate: {
        position: "absolute",
        left: 0,
        top: 0,
        animation: "$pulsate 2500ms ".concat(theme2.transitions.easing.easeInOut, " 200ms infinite")
      },
      "@keyframes enter": {
        "0%": {
          transform: "scale(0)",
          opacity: 0.1
        },
        "100%": {
          transform: "scale(1)",
          opacity: 0.3
        }
      },
      "@keyframes exit": {
        "0%": {
          opacity: 1
        },
        "100%": {
          opacity: 0
        }
      },
      "@keyframes pulsate": {
        "0%": {
          transform: "scale(1)"
        },
        "50%": {
          transform: "scale(0.92)"
        },
        "100%": {
          transform: "scale(1)"
        }
      }
    };
  };
  var TouchRipple = /* @__PURE__ */ React23.forwardRef(function TouchRipple2(props, ref) {
    var _props$center = props.center, centerProp = _props$center === void 0 ? false : _props$center, classes = props.classes, className = props.className, other = _objectWithoutProperties(props, ["center", "classes", "className"]);
    var _React$useState = React23.useState([]), ripples = _React$useState[0], setRipples = _React$useState[1];
    var nextKey = React23.useRef(0);
    var rippleCallback = React23.useRef(null);
    React23.useEffect(function() {
      if (rippleCallback.current) {
        rippleCallback.current();
        rippleCallback.current = null;
      }
    }, [ripples]);
    var ignoringMouseDown = React23.useRef(false);
    var startTimer = React23.useRef(null);
    var startTimerCommit = React23.useRef(null);
    var container = React23.useRef(null);
    React23.useEffect(function() {
      return function() {
        clearTimeout(startTimer.current);
      };
    }, []);
    var startCommit = React23.useCallback(function(params) {
      var pulsate2 = params.pulsate, rippleX = params.rippleX, rippleY = params.rippleY, rippleSize = params.rippleSize, cb = params.cb;
      setRipples(function(oldRipples) {
        return [].concat(_toConsumableArray(oldRipples), [/* @__PURE__ */ React23.createElement(Ripple_default, {
          key: nextKey.current,
          classes,
          timeout: DURATION,
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize
        })]);
      });
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes]);
    var start = React23.useCallback(function() {
      var event = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var cb = arguments.length > 2 ? arguments[2] : void 0;
      var _options$pulsate = options.pulsate, pulsate2 = _options$pulsate === void 0 ? false : _options$pulsate, _options$center = options.center, center = _options$center === void 0 ? centerProp || options.pulsate : _options$center, _options$fakeElement = options.fakeElement, fakeElement = _options$fakeElement === void 0 ? false : _options$fakeElement;
      if (event.type === "mousedown" && ignoringMouseDown.current) {
        ignoringMouseDown.current = false;
        return;
      }
      if (event.type === "touchstart") {
        ignoringMouseDown.current = true;
      }
      var element = fakeElement ? null : container.current;
      var rect = element ? element.getBoundingClientRect() : {
        width: 0,
        height: 0,
        left: 0,
        top: 0
      };
      var rippleX;
      var rippleY;
      var rippleSize;
      if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        var _ref3 = event.touches ? event.touches[0] : event, clientX = _ref3.clientX, clientY = _ref3.clientY;
        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }
      if (center) {
        rippleSize = Math.sqrt((2 * Math.pow(rect.width, 2) + Math.pow(rect.height, 2)) / 3);
        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        var sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        var sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(Math.pow(sizeX, 2) + Math.pow(sizeY, 2));
      }
      if (event.touches) {
        if (startTimerCommit.current === null) {
          startTimerCommit.current = function() {
            startCommit({
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize,
              cb
            });
          };
          startTimer.current = setTimeout(function() {
            if (startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
            }
          }, DELAY_RIPPLE);
        }
      } else {
        startCommit({
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb
        });
      }
    }, [centerProp, startCommit]);
    var pulsate = React23.useCallback(function() {
      start({}, {
        pulsate: true
      });
    }, [start]);
    var stop = React23.useCallback(function(event, cb) {
      clearTimeout(startTimer.current);
      if (event.type === "touchend" && startTimerCommit.current) {
        event.persist();
        startTimerCommit.current();
        startTimerCommit.current = null;
        startTimer.current = setTimeout(function() {
          stop(event, cb);
        });
        return;
      }
      startTimerCommit.current = null;
      setRipples(function(oldRipples) {
        if (oldRipples.length > 0) {
          return oldRipples.slice(1);
        }
        return oldRipples;
      });
      rippleCallback.current = cb;
    }, []);
    React23.useImperativeHandle(ref, function() {
      return {
        pulsate,
        start,
        stop
      };
    }, [pulsate, start, stop]);
    return /* @__PURE__ */ React23.createElement("span", _extends({
      className: clsx_m_default(classes.root, className),
      ref: container
    }, other), /* @__PURE__ */ React23.createElement(TransitionGroup_default, {
      component: null,
      exit: true
    }, ripples));
  });
  true ? TouchRipple.propTypes = {
    center: import_prop_types17.default.bool,
    classes: import_prop_types17.default.object.isRequired,
    className: import_prop_types17.default.string
  } : void 0;
  var TouchRipple_default = withStyles_default2(styles7, {
    flip: false,
    name: "MuiTouchRipple"
  })(/* @__PURE__ */ React23.memo(TouchRipple));

  // node_modules/@material-ui/core/esm/ButtonBase/ButtonBase.js
  var styles9 = {
    root: {
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      position: "relative",
      WebkitTapHighlightColor: "transparent",
      backgroundColor: "transparent",
      outline: 0,
      border: 0,
      margin: 0,
      borderRadius: 0,
      padding: 0,
      cursor: "pointer",
      userSelect: "none",
      verticalAlign: "middle",
      "-moz-appearance": "none",
      "-webkit-appearance": "none",
      textDecoration: "none",
      color: "inherit",
      "&::-moz-focus-inner": {
        borderStyle: "none"
      },
      "&$disabled": {
        pointerEvents: "none",
        cursor: "default"
      },
      "@media print": {
        colorAdjust: "exact"
      }
    },
    disabled: {},
    focusVisible: {}
  };
  var ButtonBase = /* @__PURE__ */ React24.forwardRef(function ButtonBase2(props, ref) {
    var action = props.action, buttonRefProp = props.buttonRef, _props$centerRipple = props.centerRipple, centerRipple = _props$centerRipple === void 0 ? false : _props$centerRipple, children = props.children, classes = props.classes, className = props.className, _props$component = props.component, component = _props$component === void 0 ? "button" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableRipple = props.disableRipple, disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple, _props$disableTouchRi = props.disableTouchRipple, disableTouchRipple = _props$disableTouchRi === void 0 ? false : _props$disableTouchRi, _props$focusRipple = props.focusRipple, focusRipple = _props$focusRipple === void 0 ? false : _props$focusRipple, focusVisibleClassName = props.focusVisibleClassName, onBlur = props.onBlur, onClick = props.onClick, onFocus = props.onFocus, onFocusVisible = props.onFocusVisible, onKeyDown = props.onKeyDown, onKeyUp = props.onKeyUp, onMouseDown = props.onMouseDown, onMouseLeave = props.onMouseLeave, onMouseUp = props.onMouseUp, onTouchEnd = props.onTouchEnd, onTouchMove = props.onTouchMove, onTouchStart = props.onTouchStart, onDragLeave = props.onDragLeave, _props$tabIndex = props.tabIndex, tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex, TouchRippleProps = props.TouchRippleProps, _props$type = props.type, type = _props$type === void 0 ? "button" : _props$type, other = _objectWithoutProperties(props, ["action", "buttonRef", "centerRipple", "children", "classes", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "onDragLeave", "tabIndex", "TouchRippleProps", "type"]);
    var buttonRef = React24.useRef(null);
    function getButtonNode() {
      return ReactDOM3.findDOMNode(buttonRef.current);
    }
    var rippleRef = React24.useRef(null);
    var _React$useState = React24.useState(false), focusVisible = _React$useState[0], setFocusVisible = _React$useState[1];
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    var _useIsFocusVisible = useIsFocusVisible(), isFocusVisible2 = _useIsFocusVisible.isFocusVisible, onBlurVisible = _useIsFocusVisible.onBlurVisible, focusVisibleRef = _useIsFocusVisible.ref;
    React24.useImperativeHandle(action, function() {
      return {
        focusVisible: function focusVisible2() {
          setFocusVisible(true);
          buttonRef.current.focus();
        }
      };
    }, []);
    React24.useEffect(function() {
      if (focusVisible && focusRipple && !disableRipple) {
        rippleRef.current.pulsate();
      }
    }, [disableRipple, focusRipple, focusVisible]);
    function useRippleHandler(rippleAction, eventCallback) {
      var skipRippleAction = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : disableTouchRipple;
      return useEventCallback(function(event) {
        if (eventCallback) {
          eventCallback(event);
        }
        var ignore = skipRippleAction;
        if (!ignore && rippleRef.current) {
          rippleRef.current[rippleAction](event);
        }
        return true;
      });
    }
    var handleMouseDown = useRippleHandler("start", onMouseDown);
    var handleDragLeave = useRippleHandler("stop", onDragLeave);
    var handleMouseUp = useRippleHandler("stop", onMouseUp);
    var handleMouseLeave = useRippleHandler("stop", function(event) {
      if (focusVisible) {
        event.preventDefault();
      }
      if (onMouseLeave) {
        onMouseLeave(event);
      }
    });
    var handleTouchStart = useRippleHandler("start", onTouchStart);
    var handleTouchEnd = useRippleHandler("stop", onTouchEnd);
    var handleTouchMove = useRippleHandler("stop", onTouchMove);
    var handleBlur = useRippleHandler("stop", function(event) {
      if (focusVisible) {
        onBlurVisible(event);
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    }, false);
    var handleFocus = useEventCallback(function(event) {
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }
      if (isFocusVisible2(event)) {
        setFocusVisible(true);
        if (onFocusVisible) {
          onFocusVisible(event);
        }
      }
      if (onFocus) {
        onFocus(event);
      }
    });
    var isNonNativeButton = function isNonNativeButton2() {
      var button = getButtonNode();
      return component && component !== "button" && !(button.tagName === "A" && button.href);
    };
    var keydownRef = React24.useRef(false);
    var handleKeyDown2 = useEventCallback(function(event) {
      if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
        keydownRef.current = true;
        event.persist();
        rippleRef.current.stop(event, function() {
          rippleRef.current.start(event);
        });
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
        event.preventDefault();
        if (onClick) {
          onClick(event);
        }
      }
    });
    var handleKeyUp = useEventCallback(function(event) {
      if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
        keydownRef.current = false;
        event.persist();
        rippleRef.current.stop(event, function() {
          rippleRef.current.pulsate(event);
        });
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
      if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
        onClick(event);
      }
    });
    var ComponentProp = component;
    if (ComponentProp === "button" && other.href) {
      ComponentProp = "a";
    }
    var buttonProps = {};
    if (ComponentProp === "button") {
      buttonProps.type = type;
      buttonProps.disabled = disabled;
    } else {
      if (ComponentProp !== "a" || !other.href) {
        buttonProps.role = "button";
      }
      buttonProps["aria-disabled"] = disabled;
    }
    var handleUserRef = useForkRef(buttonRefProp, ref);
    var handleOwnRef = useForkRef(focusVisibleRef, buttonRef);
    var handleRef = useForkRef(handleUserRef, handleOwnRef);
    var _React$useState2 = React24.useState(false), mountedState = _React$useState2[0], setMountedState = _React$useState2[1];
    React24.useEffect(function() {
      setMountedState(true);
    }, []);
    var enableTouchRipple = mountedState && !disableRipple && !disabled;
    if (true) {
      React24.useEffect(function() {
        if (enableTouchRipple && !rippleRef.current) {
          console.error(["Material-UI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join("\n"));
        }
      }, [enableTouchRipple]);
    }
    return /* @__PURE__ */ React24.createElement(ComponentProp, _extends({
      className: clsx_m_default(classes.root, className, focusVisible && [classes.focusVisible, focusVisibleClassName], disabled && classes.disabled),
      onBlur: handleBlur,
      onClick,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex
    }, buttonProps, other), children, enableTouchRipple ? /* @__PURE__ */ React24.createElement(TouchRipple_default, _extends({
      ref: rippleRef,
      center: centerRipple
    }, TouchRippleProps)) : null);
  });
  true ? ButtonBase.propTypes = {
    action: refType_default,
    buttonRef: deprecatedPropType(refType_default, "Use `ref` instead."),
    centerRipple: import_prop_types18.default.bool,
    children: import_prop_types18.default.node,
    classes: import_prop_types18.default.object,
    className: import_prop_types18.default.string,
    component: elementTypeAcceptingRef_default,
    disabled: import_prop_types18.default.bool,
    disableRipple: import_prop_types18.default.bool,
    disableTouchRipple: import_prop_types18.default.bool,
    focusRipple: import_prop_types18.default.bool,
    focusVisibleClassName: import_prop_types18.default.string,
    href: import_prop_types18.default.string,
    onBlur: import_prop_types18.default.func,
    onClick: import_prop_types18.default.func,
    onDragLeave: import_prop_types18.default.func,
    onFocus: import_prop_types18.default.func,
    onFocusVisible: import_prop_types18.default.func,
    onKeyDown: import_prop_types18.default.func,
    onKeyUp: import_prop_types18.default.func,
    onMouseDown: import_prop_types18.default.func,
    onMouseLeave: import_prop_types18.default.func,
    onMouseUp: import_prop_types18.default.func,
    onTouchEnd: import_prop_types18.default.func,
    onTouchMove: import_prop_types18.default.func,
    onTouchStart: import_prop_types18.default.func,
    tabIndex: import_prop_types18.default.oneOfType([import_prop_types18.default.number, import_prop_types18.default.string]),
    TouchRippleProps: import_prop_types18.default.object,
    type: import_prop_types18.default.oneOfType([import_prop_types18.default.oneOf(["button", "reset", "submit"]), import_prop_types18.default.string])
  } : void 0;
  var ButtonBase_default = withStyles_default2(styles9, {
    name: "MuiButtonBase"
  })(ButtonBase);

  // node_modules/@material-ui/core/esm/IconButton/IconButton.js
  var React25 = __toModule(require_react());
  var import_prop_types19 = __toModule(require_prop_types());
  var styles10 = function styles11(theme2) {
    return {
      root: {
        textAlign: "center",
        flex: "0 0 auto",
        fontSize: theme2.typography.pxToRem(24),
        padding: 12,
        borderRadius: "50%",
        overflow: "visible",
        color: theme2.palette.action.active,
        transition: theme2.transitions.create("background-color", {
          duration: theme2.transitions.duration.shortest
        }),
        "&:hover": {
          backgroundColor: alpha(theme2.palette.action.active, theme2.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        "&$disabled": {
          backgroundColor: "transparent",
          color: theme2.palette.action.disabled
        }
      },
      edgeStart: {
        marginLeft: -12,
        "$sizeSmall&": {
          marginLeft: -3
        }
      },
      edgeEnd: {
        marginRight: -12,
        "$sizeSmall&": {
          marginRight: -3
        }
      },
      colorInherit: {
        color: "inherit"
      },
      colorPrimary: {
        color: theme2.palette.primary.main,
        "&:hover": {
          backgroundColor: alpha(theme2.palette.primary.main, theme2.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      colorSecondary: {
        color: theme2.palette.secondary.main,
        "&:hover": {
          backgroundColor: alpha(theme2.palette.secondary.main, theme2.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      disabled: {},
      sizeSmall: {
        padding: 3,
        fontSize: theme2.typography.pxToRem(18)
      },
      label: {
        width: "100%",
        display: "flex",
        alignItems: "inherit",
        justifyContent: "inherit"
      }
    };
  };
  var IconButton = /* @__PURE__ */ React25.forwardRef(function IconButton2(props, ref) {
    var _props$edge = props.edge, edge = _props$edge === void 0 ? false : _props$edge, children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "default" : _props$color, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, other = _objectWithoutProperties(props, ["edge", "children", "classes", "className", "color", "disabled", "disableFocusRipple", "size"]);
    return /* @__PURE__ */ React25.createElement(ButtonBase_default, _extends({
      className: clsx_m_default(classes.root, className, color2 !== "default" && classes["color".concat(capitalize(color2))], disabled && classes.disabled, size === "small" && classes["size".concat(capitalize(size))], {
        "start": classes.edgeStart,
        "end": classes.edgeEnd
      }[edge]),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      ref
    }, other), /* @__PURE__ */ React25.createElement("span", {
      className: classes.label
    }, children));
  });
  true ? IconButton.propTypes = {
    children: chainPropTypes(import_prop_types19.default.node, function(props) {
      var found = React25.Children.toArray(props.children).some(function(child) {
        return /* @__PURE__ */ React25.isValidElement(child) && child.props.onClick;
      });
      if (found) {
        return new Error(["Material-UI: You are providing an onClick event listener to a child of a button element.", "Firefox will never trigger the event.", "You should move the onClick listener to the parent button element.", "https://github.com/mui-org/material-ui/issues/13957"].join("\n"));
      }
      return null;
    }),
    classes: import_prop_types19.default.object.isRequired,
    className: import_prop_types19.default.string,
    color: import_prop_types19.default.oneOf(["default", "inherit", "primary", "secondary"]),
    disabled: import_prop_types19.default.bool,
    disableFocusRipple: import_prop_types19.default.bool,
    disableRipple: import_prop_types19.default.bool,
    edge: import_prop_types19.default.oneOf(["start", "end", false]),
    size: import_prop_types19.default.oneOf(["small", "medium"])
  } : void 0;
  var IconButton_default = withStyles_default2(styles10, {
    name: "MuiIconButton"
  })(IconButton);

  // node_modules/@material-ui/core/esm/Avatar/Avatar.js
  var React27 = __toModule(require_react());
  var import_prop_types20 = __toModule(require_prop_types());

  // node_modules/@material-ui/core/esm/internal/svg-icons/Person.js
  var React26 = __toModule(require_react());
  var Person_default = createSvgIcon(/* @__PURE__ */ React26.createElement("path", {
    d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
  }), "Person");

  // node_modules/@material-ui/core/esm/Avatar/Avatar.js
  var styles12 = function styles13(theme2) {
    return {
      root: {
        position: "relative",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        flexShrink: 0,
        width: 40,
        height: 40,
        fontFamily: theme2.typography.fontFamily,
        fontSize: theme2.typography.pxToRem(20),
        lineHeight: 1,
        borderRadius: "50%",
        overflow: "hidden",
        userSelect: "none"
      },
      colorDefault: {
        color: theme2.palette.background.default,
        backgroundColor: theme2.palette.type === "light" ? theme2.palette.grey[400] : theme2.palette.grey[600]
      },
      circle: {},
      circular: {},
      rounded: {
        borderRadius: theme2.shape.borderRadius
      },
      square: {
        borderRadius: 0
      },
      img: {
        width: "100%",
        height: "100%",
        textAlign: "center",
        objectFit: "cover",
        color: "transparent",
        textIndent: 1e4
      },
      fallback: {
        width: "75%",
        height: "75%"
      }
    };
  };
  function useLoaded(_ref3) {
    var src = _ref3.src, srcSet = _ref3.srcSet;
    var _React$useState = React27.useState(false), loaded = _React$useState[0], setLoaded = _React$useState[1];
    React27.useEffect(function() {
      if (!src && !srcSet) {
        return void 0;
      }
      setLoaded(false);
      var active = true;
      var image = new Image();
      image.src = src;
      image.srcSet = srcSet;
      image.onload = function() {
        if (!active) {
          return;
        }
        setLoaded("loaded");
      };
      image.onerror = function() {
        if (!active) {
          return;
        }
        setLoaded("error");
      };
      return function() {
        active = false;
      };
    }, [src, srcSet]);
    return loaded;
  }
  var Avatar = /* @__PURE__ */ React27.forwardRef(function Avatar2(props, ref) {
    var alt = props.alt, childrenProp = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component5 = _props$component === void 0 ? "div" : _props$component, imgProps = props.imgProps, sizes = props.sizes, src = props.src, srcSet = props.srcSet, _props$variant = props.variant, variant = _props$variant === void 0 ? "circular" : _props$variant, other = _objectWithoutProperties(props, ["alt", "children", "classes", "className", "component", "imgProps", "sizes", "src", "srcSet", "variant"]);
    var children = null;
    var loaded = useLoaded({
      src,
      srcSet
    });
    var hasImg = src || srcSet;
    var hasImgNotFailing = hasImg && loaded !== "error";
    if (hasImgNotFailing) {
      children = /* @__PURE__ */ React27.createElement("img", _extends({
        alt,
        src,
        srcSet,
        sizes,
        className: classes.img
      }, imgProps));
    } else if (childrenProp != null) {
      children = childrenProp;
    } else if (hasImg && alt) {
      children = alt[0];
    } else {
      children = /* @__PURE__ */ React27.createElement(Person_default, {
        className: classes.fallback
      });
    }
    return /* @__PURE__ */ React27.createElement(Component5, _extends({
      className: clsx_m_default(classes.root, classes.system, classes[variant], className, !hasImgNotFailing && classes.colorDefault),
      ref
    }, other), children);
  });
  true ? Avatar.propTypes = {
    alt: import_prop_types20.default.string,
    children: import_prop_types20.default.node,
    classes: chainPropTypes(import_prop_types20.default.object, function(props) {
      var classes = props.classes;
      if (classes == null) {
        return null;
      }
      if (classes.circle != null && classes.circle.split(" ").length > 1) {
        throw new Error("Material-UI: The `circle` class is deprecated. Use `circular` instead.");
      }
      return null;
    }),
    className: import_prop_types20.default.string,
    component: import_prop_types20.default.elementType,
    imgProps: import_prop_types20.default.object,
    sizes: import_prop_types20.default.string,
    src: import_prop_types20.default.string,
    srcSet: import_prop_types20.default.string,
    variant: chainPropTypes(import_prop_types20.default.oneOf(["circle", "circular", "rounded", "square"]), function(props) {
      var variant = props.variant;
      if (variant === "circle") {
        throw new Error('Material-UI: `variant="circle"` is deprecated. Use `variant="circular"` instead.');
      }
      return null;
    })
  } : void 0;
  var Avatar_default = withStyles_default2(styles12, {
    name: "MuiAvatar"
  })(Avatar);

  // node_modules/@material-ui/core/esm/Backdrop/Backdrop.js
  var React29 = __toModule(require_react());
  var import_prop_types22 = __toModule(require_prop_types());

  // node_modules/@material-ui/core/esm/Fade/Fade.js
  var React28 = __toModule(require_react());
  var import_prop_types21 = __toModule(require_prop_types());
  var styles14 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  var defaultTimeout = {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen
  };
  var Fade = /* @__PURE__ */ React28.forwardRef(function Fade2(props, ref) {
    var children = props.children, _props$disableStrictM = props.disableStrictModeCompat, disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style2 = props.style, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Transition_default : _props$TransitionComp, _props$timeout = props.timeout, timeout2 = _props$timeout === void 0 ? defaultTimeout : _props$timeout, other = _objectWithoutProperties(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "TransitionComponent", "timeout"]);
    var theme2 = useTheme2();
    var enableStrictModeCompat = theme2.unstable_strictMode && !disableStrictModeCompat;
    var nodeRef = React28.useRef(null);
    var foreignRef = useForkRef(children.ref, ref);
    var handleRef = useForkRef(enableStrictModeCompat ? nodeRef : void 0, foreignRef);
    var normalizedTransitionCallback = function normalizedTransitionCallback2(callback) {
      return function(nodeOrAppearing, maybeAppearing) {
        if (callback) {
          var _ref3 = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing], _ref22 = _slicedToArray(_ref3, 2), node = _ref22[0], isAppearing = _ref22[1];
          if (isAppearing === void 0) {
            callback(node);
          } else {
            callback(node, isAppearing);
          }
        }
      };
    };
    var handleEntering = normalizedTransitionCallback(onEntering);
    var handleEnter = normalizedTransitionCallback(function(node, isAppearing) {
      reflow(node);
      var transitionProps = getTransitionProps({
        style: style2,
        timeout: timeout2
      }, {
        mode: "enter"
      });
      node.style.webkitTransition = theme2.transitions.create("opacity", transitionProps);
      node.style.transition = theme2.transitions.create("opacity", transitionProps);
      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    var handleEntered = normalizedTransitionCallback(onEntered);
    var handleExiting = normalizedTransitionCallback(onExiting);
    var handleExit = normalizedTransitionCallback(function(node) {
      var transitionProps = getTransitionProps({
        style: style2,
        timeout: timeout2
      }, {
        mode: "exit"
      });
      node.style.webkitTransition = theme2.transitions.create("opacity", transitionProps);
      node.style.transition = theme2.transitions.create("opacity", transitionProps);
      if (onExit) {
        onExit(node);
      }
    });
    var handleExited = normalizedTransitionCallback(onExited);
    return /* @__PURE__ */ React28.createElement(TransitionComponent, _extends({
      appear: true,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      timeout: timeout2
    }, other), function(state, childProps) {
      return /* @__PURE__ */ React28.cloneElement(children, _extends({
        style: _extends({
          opacity: 0,
          visibility: state === "exited" && !inProp ? "hidden" : void 0
        }, styles14[state], style2, children.props.style),
        ref: handleRef
      }, childProps));
    });
  });
  true ? Fade.propTypes = {
    children: import_prop_types21.default.element,
    disableStrictModeCompat: import_prop_types21.default.bool,
    in: import_prop_types21.default.bool,
    onEnter: import_prop_types21.default.func,
    onEntered: import_prop_types21.default.func,
    onEntering: import_prop_types21.default.func,
    onExit: import_prop_types21.default.func,
    onExited: import_prop_types21.default.func,
    onExiting: import_prop_types21.default.func,
    style: import_prop_types21.default.object,
    timeout: import_prop_types21.default.oneOfType([import_prop_types21.default.number, import_prop_types21.default.shape({
      appear: import_prop_types21.default.number,
      enter: import_prop_types21.default.number,
      exit: import_prop_types21.default.number
    })])
  } : void 0;
  var Fade_default = Fade;

  // node_modules/@material-ui/core/esm/Backdrop/Backdrop.js
  var styles15 = {
    root: {
      zIndex: -1,
      position: "fixed",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      right: 0,
      bottom: 0,
      top: 0,
      left: 0,
      backgroundColor: "rgba(0, 0, 0, 0.5)",
      WebkitTapHighlightColor: "transparent"
    },
    invisible: {
      backgroundColor: "transparent"
    }
  };
  var Backdrop = /* @__PURE__ */ React29.forwardRef(function Backdrop2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$invisible = props.invisible, invisible = _props$invisible === void 0 ? false : _props$invisible, open = props.open, transitionDuration = props.transitionDuration, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Fade_default : _props$TransitionComp, other = _objectWithoutProperties(props, ["children", "classes", "className", "invisible", "open", "transitionDuration", "TransitionComponent"]);
    return /* @__PURE__ */ React29.createElement(TransitionComponent, _extends({
      in: open,
      timeout: transitionDuration
    }, other), /* @__PURE__ */ React29.createElement("div", {
      className: clsx_m_default(classes.root, className, invisible && classes.invisible),
      "aria-hidden": true,
      ref
    }, children));
  });
  true ? Backdrop.propTypes = {
    children: import_prop_types22.default.node,
    classes: import_prop_types22.default.object,
    className: import_prop_types22.default.string,
    invisible: import_prop_types22.default.bool,
    open: import_prop_types22.default.bool.isRequired,
    transitionDuration: import_prop_types22.default.oneOfType([import_prop_types22.default.number, import_prop_types22.default.shape({
      appear: import_prop_types22.default.number,
      enter: import_prop_types22.default.number,
      exit: import_prop_types22.default.number
    })])
  } : void 0;
  var Backdrop_default = withStyles_default2(styles15, {
    name: "MuiBackdrop"
  })(Backdrop);

  // node_modules/@material-ui/core/esm/Box/Box.js
  var styleFunction = styleFunctionSx_default(compose_default(borders_default, display_default, flexbox_default, grid_default, positions_default, palette_default, shadows_default2, sizing_default, spacing_default, typography_default));
  var Box = styled_default("div")(styleFunction, {
    name: "MuiBox"
  });
  var Box_default = Box;

  // node_modules/@material-ui/core/esm/Typography/Typography.js
  var React30 = __toModule(require_react());
  var import_prop_types23 = __toModule(require_prop_types());
  var styles16 = function styles17(theme2) {
    return {
      root: {
        margin: 0
      },
      body2: theme2.typography.body2,
      body1: theme2.typography.body1,
      caption: theme2.typography.caption,
      button: theme2.typography.button,
      h1: theme2.typography.h1,
      h2: theme2.typography.h2,
      h3: theme2.typography.h3,
      h4: theme2.typography.h4,
      h5: theme2.typography.h5,
      h6: theme2.typography.h6,
      subtitle1: theme2.typography.subtitle1,
      subtitle2: theme2.typography.subtitle2,
      overline: theme2.typography.overline,
      srOnly: {
        position: "absolute",
        height: 1,
        width: 1,
        overflow: "hidden"
      },
      alignLeft: {
        textAlign: "left"
      },
      alignCenter: {
        textAlign: "center"
      },
      alignRight: {
        textAlign: "right"
      },
      alignJustify: {
        textAlign: "justify"
      },
      noWrap: {
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      },
      gutterBottom: {
        marginBottom: "0.35em"
      },
      paragraph: {
        marginBottom: 16
      },
      colorInherit: {
        color: "inherit"
      },
      colorPrimary: {
        color: theme2.palette.primary.main
      },
      colorSecondary: {
        color: theme2.palette.secondary.main
      },
      colorTextPrimary: {
        color: theme2.palette.text.primary
      },
      colorTextSecondary: {
        color: theme2.palette.text.secondary
      },
      colorError: {
        color: theme2.palette.error.main
      },
      displayInline: {
        display: "inline"
      },
      displayBlock: {
        display: "block"
      }
    };
  };
  var defaultVariantMapping = {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6",
    subtitle1: "h6",
    subtitle2: "h6",
    body1: "p",
    body2: "p"
  };
  var Typography = /* @__PURE__ */ React30.forwardRef(function Typography2(props, ref) {
    var _props$align = props.align, align = _props$align === void 0 ? "inherit" : _props$align, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "initial" : _props$color, component = props.component, _props$display = props.display, display = _props$display === void 0 ? "initial" : _props$display, _props$gutterBottom = props.gutterBottom, gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom, _props$noWrap = props.noWrap, noWrap = _props$noWrap === void 0 ? false : _props$noWrap, _props$paragraph = props.paragraph, paragraph = _props$paragraph === void 0 ? false : _props$paragraph, _props$variant = props.variant, variant = _props$variant === void 0 ? "body1" : _props$variant, _props$variantMapping = props.variantMapping, variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping, other = _objectWithoutProperties(props, ["align", "classes", "className", "color", "component", "display", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"]);
    var Component5 = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
    return /* @__PURE__ */ React30.createElement(Component5, _extends({
      className: clsx_m_default(classes.root, className, variant !== "inherit" && classes[variant], color2 !== "initial" && classes["color".concat(capitalize(color2))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== "inherit" && classes["align".concat(capitalize(align))], display !== "initial" && classes["display".concat(capitalize(display))]),
      ref
    }, other));
  });
  true ? Typography.propTypes = {
    align: import_prop_types23.default.oneOf(["inherit", "left", "center", "right", "justify"]),
    children: import_prop_types23.default.node,
    classes: import_prop_types23.default.object.isRequired,
    className: import_prop_types23.default.string,
    color: import_prop_types23.default.oneOf(["initial", "inherit", "primary", "secondary", "textPrimary", "textSecondary", "error"]),
    component: import_prop_types23.default.elementType,
    display: import_prop_types23.default.oneOf(["initial", "block", "inline"]),
    gutterBottom: import_prop_types23.default.bool,
    noWrap: import_prop_types23.default.bool,
    paragraph: import_prop_types23.default.bool,
    variant: import_prop_types23.default.oneOf(["h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "caption", "button", "overline", "srOnly", "inherit"]),
    variantMapping: import_prop_types23.default.object
  } : void 0;
  var Typography_default = withStyles_default2(styles16, {
    name: "MuiTypography"
  })(Typography);

  // node_modules/@material-ui/core/esm/Button/Button.js
  var React31 = __toModule(require_react());
  var import_prop_types24 = __toModule(require_prop_types());
  var styles18 = function styles19(theme2) {
    return {
      root: _extends({}, theme2.typography.button, {
        boxSizing: "border-box",
        minWidth: 64,
        padding: "6px 16px",
        borderRadius: theme2.shape.borderRadius,
        color: theme2.palette.text.primary,
        transition: theme2.transitions.create(["background-color", "box-shadow", "border"], {
          duration: theme2.transitions.duration.short
        }),
        "&:hover": {
          textDecoration: "none",
          backgroundColor: alpha(theme2.palette.text.primary, theme2.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          },
          "&$disabled": {
            backgroundColor: "transparent"
          }
        },
        "&$disabled": {
          color: theme2.palette.action.disabled
        }
      }),
      label: {
        width: "100%",
        display: "inherit",
        alignItems: "inherit",
        justifyContent: "inherit"
      },
      text: {
        padding: "6px 8px"
      },
      textPrimary: {
        color: theme2.palette.primary.main,
        "&:hover": {
          backgroundColor: alpha(theme2.palette.primary.main, theme2.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      textSecondary: {
        color: theme2.palette.secondary.main,
        "&:hover": {
          backgroundColor: alpha(theme2.palette.secondary.main, theme2.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      outlined: {
        padding: "5px 15px",
        border: "1px solid ".concat(theme2.palette.type === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"),
        "&$disabled": {
          border: "1px solid ".concat(theme2.palette.action.disabledBackground)
        }
      },
      outlinedPrimary: {
        color: theme2.palette.primary.main,
        border: "1px solid ".concat(alpha(theme2.palette.primary.main, 0.5)),
        "&:hover": {
          border: "1px solid ".concat(theme2.palette.primary.main),
          backgroundColor: alpha(theme2.palette.primary.main, theme2.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      outlinedSecondary: {
        color: theme2.palette.secondary.main,
        border: "1px solid ".concat(alpha(theme2.palette.secondary.main, 0.5)),
        "&:hover": {
          border: "1px solid ".concat(theme2.palette.secondary.main),
          backgroundColor: alpha(theme2.palette.secondary.main, theme2.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        "&$disabled": {
          border: "1px solid ".concat(theme2.palette.action.disabled)
        }
      },
      contained: {
        color: theme2.palette.getContrastText(theme2.palette.grey[300]),
        backgroundColor: theme2.palette.grey[300],
        boxShadow: theme2.shadows[2],
        "&:hover": {
          backgroundColor: theme2.palette.grey.A100,
          boxShadow: theme2.shadows[4],
          "@media (hover: none)": {
            boxShadow: theme2.shadows[2],
            backgroundColor: theme2.palette.grey[300]
          },
          "&$disabled": {
            backgroundColor: theme2.palette.action.disabledBackground
          }
        },
        "&$focusVisible": {
          boxShadow: theme2.shadows[6]
        },
        "&:active": {
          boxShadow: theme2.shadows[8]
        },
        "&$disabled": {
          color: theme2.palette.action.disabled,
          boxShadow: theme2.shadows[0],
          backgroundColor: theme2.palette.action.disabledBackground
        }
      },
      containedPrimary: {
        color: theme2.palette.primary.contrastText,
        backgroundColor: theme2.palette.primary.main,
        "&:hover": {
          backgroundColor: theme2.palette.primary.dark,
          "@media (hover: none)": {
            backgroundColor: theme2.palette.primary.main
          }
        }
      },
      containedSecondary: {
        color: theme2.palette.secondary.contrastText,
        backgroundColor: theme2.palette.secondary.main,
        "&:hover": {
          backgroundColor: theme2.palette.secondary.dark,
          "@media (hover: none)": {
            backgroundColor: theme2.palette.secondary.main
          }
        }
      },
      disableElevation: {
        boxShadow: "none",
        "&:hover": {
          boxShadow: "none"
        },
        "&$focusVisible": {
          boxShadow: "none"
        },
        "&:active": {
          boxShadow: "none"
        },
        "&$disabled": {
          boxShadow: "none"
        }
      },
      focusVisible: {},
      disabled: {},
      colorInherit: {
        color: "inherit",
        borderColor: "currentColor"
      },
      textSizeSmall: {
        padding: "4px 5px",
        fontSize: theme2.typography.pxToRem(13)
      },
      textSizeLarge: {
        padding: "8px 11px",
        fontSize: theme2.typography.pxToRem(15)
      },
      outlinedSizeSmall: {
        padding: "3px 9px",
        fontSize: theme2.typography.pxToRem(13)
      },
      outlinedSizeLarge: {
        padding: "7px 21px",
        fontSize: theme2.typography.pxToRem(15)
      },
      containedSizeSmall: {
        padding: "4px 10px",
        fontSize: theme2.typography.pxToRem(13)
      },
      containedSizeLarge: {
        padding: "8px 22px",
        fontSize: theme2.typography.pxToRem(15)
      },
      sizeSmall: {},
      sizeLarge: {},
      fullWidth: {
        width: "100%"
      },
      startIcon: {
        display: "inherit",
        marginRight: 8,
        marginLeft: -4,
        "&$iconSizeSmall": {
          marginLeft: -2
        }
      },
      endIcon: {
        display: "inherit",
        marginRight: -4,
        marginLeft: 8,
        "&$iconSizeSmall": {
          marginRight: -2
        }
      },
      iconSizeSmall: {
        "& > *:first-child": {
          fontSize: 18
        }
      },
      iconSizeMedium: {
        "& > *:first-child": {
          fontSize: 20
        }
      },
      iconSizeLarge: {
        "& > *:first-child": {
          fontSize: 22
        }
      }
    };
  };
  var Button = /* @__PURE__ */ React31.forwardRef(function Button2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "default" : _props$color, _props$component = props.component, component = _props$component === void 0 ? "button" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableElevati = props.disableElevation, disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, endIconProp = props.endIcon, focusVisibleClassName = props.focusVisibleClassName, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, startIconProp = props.startIcon, _props$type = props.type, type = _props$type === void 0 ? "button" : _props$type, _props$variant = props.variant, variant = _props$variant === void 0 ? "text" : _props$variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"]);
    var startIcon = startIconProp && /* @__PURE__ */ React31.createElement("span", {
      className: clsx_m_default(classes.startIcon, classes["iconSize".concat(capitalize(size))])
    }, startIconProp);
    var endIcon = endIconProp && /* @__PURE__ */ React31.createElement("span", {
      className: clsx_m_default(classes.endIcon, classes["iconSize".concat(capitalize(size))])
    }, endIconProp);
    return /* @__PURE__ */ React31.createElement(ButtonBase_default, _extends({
      className: clsx_m_default(classes.root, classes[variant], className, color2 === "inherit" ? classes.colorInherit : color2 !== "default" && classes["".concat(variant).concat(capitalize(color2))], size !== "medium" && [classes["".concat(variant, "Size").concat(capitalize(size))], classes["size".concat(capitalize(size))]], disableElevation && classes.disableElevation, disabled && classes.disabled, fullWidth && classes.fullWidth),
      component,
      disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx_m_default(classes.focusVisible, focusVisibleClassName),
      ref,
      type
    }, other), /* @__PURE__ */ React31.createElement("span", {
      className: classes.label
    }, startIcon, children, endIcon));
  });
  true ? Button.propTypes = {
    children: import_prop_types24.default.node,
    classes: import_prop_types24.default.object,
    className: import_prop_types24.default.string,
    color: import_prop_types24.default.oneOf(["default", "inherit", "primary", "secondary"]),
    component: import_prop_types24.default.elementType,
    disabled: import_prop_types24.default.bool,
    disableElevation: import_prop_types24.default.bool,
    disableFocusRipple: import_prop_types24.default.bool,
    disableRipple: import_prop_types24.default.bool,
    endIcon: import_prop_types24.default.node,
    focusVisibleClassName: import_prop_types24.default.string,
    fullWidth: import_prop_types24.default.bool,
    href: import_prop_types24.default.string,
    size: import_prop_types24.default.oneOf(["large", "medium", "small"]),
    startIcon: import_prop_types24.default.node,
    type: import_prop_types24.default.oneOfType([import_prop_types24.default.oneOf(["button", "reset", "submit"]), import_prop_types24.default.string]),
    variant: import_prop_types24.default.oneOf(["contained", "outlined", "text"])
  } : void 0;
  var Button_default = withStyles_default2(styles18, {
    name: "MuiButton"
  })(Button);

  // node_modules/@material-ui/core/esm/FormControl/useFormControl.js
  var React33 = __toModule(require_react());

  // node_modules/@material-ui/core/esm/FormControl/FormControlContext.js
  var React32 = __toModule(require_react());
  var FormControlContext = React32.createContext();
  if (true) {
    FormControlContext.displayName = "FormControlContext";
  }
  function useFormControl() {
    return React32.useContext(FormControlContext);
  }
  var FormControlContext_default = FormControlContext;

  // node_modules/@material-ui/core/esm/FormControl/useFormControl.js
  function useFormControl2() {
    return React33.useContext(FormControlContext_default);
  }

  // node_modules/@material-ui/core/esm/Container/Container.js
  var React34 = __toModule(require_react());
  var import_prop_types25 = __toModule(require_prop_types());
  var styles20 = function styles21(theme2) {
    return {
      root: _defineProperty2({
        width: "100%",
        marginLeft: "auto",
        boxSizing: "border-box",
        marginRight: "auto",
        paddingLeft: theme2.spacing(2),
        paddingRight: theme2.spacing(2),
        display: "block"
      }, theme2.breakpoints.up("sm"), {
        paddingLeft: theme2.spacing(3),
        paddingRight: theme2.spacing(3)
      }),
      disableGutters: {
        paddingLeft: 0,
        paddingRight: 0
      },
      fixed: Object.keys(theme2.breakpoints.values).reduce(function(acc, breakpoint) {
        var value = theme2.breakpoints.values[breakpoint];
        if (value !== 0) {
          acc[theme2.breakpoints.up(breakpoint)] = {
            maxWidth: value
          };
        }
        return acc;
      }, {}),
      maxWidthXs: _defineProperty2({}, theme2.breakpoints.up("xs"), {
        maxWidth: Math.max(theme2.breakpoints.values.xs, 444)
      }),
      maxWidthSm: _defineProperty2({}, theme2.breakpoints.up("sm"), {
        maxWidth: theme2.breakpoints.values.sm
      }),
      maxWidthMd: _defineProperty2({}, theme2.breakpoints.up("md"), {
        maxWidth: theme2.breakpoints.values.md
      }),
      maxWidthLg: _defineProperty2({}, theme2.breakpoints.up("lg"), {
        maxWidth: theme2.breakpoints.values.lg
      }),
      maxWidthXl: _defineProperty2({}, theme2.breakpoints.up("xl"), {
        maxWidth: theme2.breakpoints.values.xl
      })
    };
  };
  var Container = /* @__PURE__ */ React34.forwardRef(function Container2(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component5 = _props$component === void 0 ? "div" : _props$component, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, _props$fixed = props.fixed, fixed = _props$fixed === void 0 ? false : _props$fixed, _props$maxWidth = props.maxWidth, maxWidth2 = _props$maxWidth === void 0 ? "lg" : _props$maxWidth, other = _objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "fixed", "maxWidth"]);
    return /* @__PURE__ */ React34.createElement(Component5, _extends({
      className: clsx_m_default(classes.root, className, fixed && classes.fixed, disableGutters && classes.disableGutters, maxWidth2 !== false && classes["maxWidth".concat(capitalize(String(maxWidth2)))]),
      ref
    }, other));
  });
  true ? Container.propTypes = {
    children: import_prop_types25.default.node.isRequired,
    classes: import_prop_types25.default.object,
    className: import_prop_types25.default.string,
    component: import_prop_types25.default.elementType,
    disableGutters: import_prop_types25.default.bool,
    fixed: import_prop_types25.default.bool,
    maxWidth: import_prop_types25.default.oneOf(["lg", "md", "sm", "xl", "xs", false])
  } : void 0;
  var Container_default = withStyles_default2(styles20, {
    name: "MuiContainer"
  })(Container);

  // node_modules/@material-ui/core/esm/CssBaseline/CssBaseline.js
  var React35 = __toModule(require_react());
  var import_prop_types26 = __toModule(require_prop_types());
  var html = {
    WebkitFontSmoothing: "antialiased",
    MozOsxFontSmoothing: "grayscale",
    boxSizing: "border-box"
  };
  var body = function body2(theme2) {
    return _extends({
      color: theme2.palette.text.primary
    }, theme2.typography.body2, {
      backgroundColor: theme2.palette.background.default,
      "@media print": {
        backgroundColor: theme2.palette.common.white
      }
    });
  };
  var styles22 = function styles23(theme2) {
    return {
      "@global": {
        html,
        "*, *::before, *::after": {
          boxSizing: "inherit"
        },
        "strong, b": {
          fontWeight: theme2.typography.fontWeightBold
        },
        body: _extends({
          margin: 0
        }, body(theme2), {
          "&::backdrop": {
            backgroundColor: theme2.palette.background.default
          }
        })
      }
    };
  };
  function CssBaseline(props) {
    var _props$children = props.children, children = _props$children === void 0 ? null : _props$children, classes = props.classes;
    return /* @__PURE__ */ React35.createElement(React35.Fragment, null, children);
  }
  true ? CssBaseline.propTypes = {
    children: import_prop_types26.default.node,
    classes: import_prop_types26.default.object
  } : void 0;
  if (true) {
    CssBaseline["propTypes"] = exactProp(CssBaseline.propTypes);
  }
  var CssBaseline_default = withStyles_default2(styles22, {
    name: "MuiCssBaseline"
  })(CssBaseline);

  // node_modules/@material-ui/core/esm/Dialog/Dialog.js
  var React40 = __toModule(require_react());
  var import_prop_types31 = __toModule(require_prop_types());

  // node_modules/@material-ui/core/esm/Modal/Modal.js
  var React39 = __toModule(require_react());
  var ReactDOM6 = __toModule(require_react_dom());
  var import_prop_types30 = __toModule(require_prop_types());

  // node_modules/@material-ui/core/esm/Portal/Portal.js
  var React36 = __toModule(require_react());
  var ReactDOM4 = __toModule(require_react_dom());
  var import_prop_types27 = __toModule(require_prop_types());
  function getContainer(container) {
    container = typeof container === "function" ? container() : container;
    return ReactDOM4.findDOMNode(container);
  }
  var useEnhancedEffect3 = typeof window !== "undefined" ? React36.useLayoutEffect : React36.useEffect;
  var Portal = /* @__PURE__ */ React36.forwardRef(function Portal2(props, ref) {
    var children = props.children, container = props.container, _props$disablePortal = props.disablePortal, disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal, onRendered = props.onRendered;
    var _React$useState = React36.useState(null), mountNode = _React$useState[0], setMountNode = _React$useState[1];
    var handleRef = useForkRef(/* @__PURE__ */ React36.isValidElement(children) ? children.ref : null, ref);
    useEnhancedEffect3(function() {
      if (!disablePortal) {
        setMountNode(getContainer(container) || document.body);
      }
    }, [container, disablePortal]);
    useEnhancedEffect3(function() {
      if (mountNode && !disablePortal) {
        setRef(ref, mountNode);
        return function() {
          setRef(ref, null);
        };
      }
      return void 0;
    }, [ref, mountNode, disablePortal]);
    useEnhancedEffect3(function() {
      if (onRendered && (mountNode || disablePortal)) {
        onRendered();
      }
    }, [onRendered, mountNode, disablePortal]);
    if (disablePortal) {
      if (/* @__PURE__ */ React36.isValidElement(children)) {
        return /* @__PURE__ */ React36.cloneElement(children, {
          ref: handleRef
        });
      }
      return children;
    }
    return mountNode ? /* @__PURE__ */ ReactDOM4.createPortal(children, mountNode) : mountNode;
  });
  true ? Portal.propTypes = {
    children: import_prop_types27.default.node,
    container: import_prop_types27.default.oneOfType([HTMLElementType, import_prop_types27.default.instanceOf(React36.Component), import_prop_types27.default.func]),
    disablePortal: import_prop_types27.default.bool,
    onRendered: deprecatedPropType(import_prop_types27.default.func, "Use the ref instead.")
  } : void 0;
  if (true) {
    Portal["propTypes"] = exactProp(Portal.propTypes);
  }
  var Portal_default = Portal;

  // node_modules/@material-ui/core/esm/utils/getScrollbarSize.js
  function getScrollbarSize() {
    var scrollDiv = document.createElement("div");
    scrollDiv.style.width = "99px";
    scrollDiv.style.height = "99px";
    scrollDiv.style.position = "absolute";
    scrollDiv.style.top = "-9999px";
    scrollDiv.style.overflow = "scroll";
    document.body.appendChild(scrollDiv);
    var scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollbarSize;
  }

  // node_modules/@material-ui/core/esm/Modal/ModalManager.js
  function isOverflowing(container) {
    var doc = ownerDocument(container);
    if (doc.body === container) {
      return ownerWindow(doc).innerWidth > doc.documentElement.clientWidth;
    }
    return container.scrollHeight > container.clientHeight;
  }
  function ariaHidden(node, show) {
    if (show) {
      node.setAttribute("aria-hidden", "true");
    } else {
      node.removeAttribute("aria-hidden");
    }
  }
  function getPaddingRight(node) {
    return parseInt(window.getComputedStyle(node)["padding-right"], 10) || 0;
  }
  function ariaHiddenSiblings(container, mountNode, currentNode) {
    var nodesToExclude = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];
    var show = arguments.length > 4 ? arguments[4] : void 0;
    var blacklist = [mountNode, currentNode].concat(_toConsumableArray(nodesToExclude));
    var blacklistTagNames = ["TEMPLATE", "SCRIPT", "STYLE"];
    [].forEach.call(container.children, function(node) {
      if (node.nodeType === 1 && blacklist.indexOf(node) === -1 && blacklistTagNames.indexOf(node.tagName) === -1) {
        ariaHidden(node, show);
      }
    });
  }
  function findIndexOf(containerInfo, callback) {
    var idx = -1;
    containerInfo.some(function(item, index) {
      if (callback(item)) {
        idx = index;
        return true;
      }
      return false;
    });
    return idx;
  }
  function handleContainer(containerInfo, props) {
    var restoreStyle = [];
    var restorePaddings = [];
    var container = containerInfo.container;
    var fixedNodes;
    if (!props.disableScrollLock) {
      if (isOverflowing(container)) {
        var scrollbarSize = getScrollbarSize();
        restoreStyle.push({
          value: container.style.paddingRight,
          key: "padding-right",
          el: container
        });
        container.style["padding-right"] = "".concat(getPaddingRight(container) + scrollbarSize, "px");
        fixedNodes = ownerDocument(container).querySelectorAll(".mui-fixed");
        [].forEach.call(fixedNodes, function(node) {
          restorePaddings.push(node.style.paddingRight);
          node.style.paddingRight = "".concat(getPaddingRight(node) + scrollbarSize, "px");
        });
      }
      var parent = container.parentElement;
      var scrollContainer = parent.nodeName === "HTML" && window.getComputedStyle(parent)["overflow-y"] === "scroll" ? parent : container;
      restoreStyle.push({
        value: scrollContainer.style.overflow,
        key: "overflow",
        el: scrollContainer
      });
      scrollContainer.style.overflow = "hidden";
    }
    var restore = function restore2() {
      if (fixedNodes) {
        [].forEach.call(fixedNodes, function(node, i) {
          if (restorePaddings[i]) {
            node.style.paddingRight = restorePaddings[i];
          } else {
            node.style.removeProperty("padding-right");
          }
        });
      }
      restoreStyle.forEach(function(_ref3) {
        var value = _ref3.value, el2 = _ref3.el, key = _ref3.key;
        if (value) {
          el2.style.setProperty(key, value);
        } else {
          el2.style.removeProperty(key);
        }
      });
    };
    return restore;
  }
  function getHiddenSiblings(container) {
    var hiddenSiblings = [];
    [].forEach.call(container.children, function(node) {
      if (node.getAttribute && node.getAttribute("aria-hidden") === "true") {
        hiddenSiblings.push(node);
      }
    });
    return hiddenSiblings;
  }
  var ModalManager = /* @__PURE__ */ function() {
    function ModalManager2() {
      _classCallCheck(this, ModalManager2);
      this.modals = [];
      this.containers = [];
    }
    _createClass(ModalManager2, [{
      key: "add",
      value: function add(modal, container) {
        var modalIndex = this.modals.indexOf(modal);
        if (modalIndex !== -1) {
          return modalIndex;
        }
        modalIndex = this.modals.length;
        this.modals.push(modal);
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, false);
        }
        var hiddenSiblingNodes = getHiddenSiblings(container);
        ariaHiddenSiblings(container, modal.mountNode, modal.modalRef, hiddenSiblingNodes, true);
        var containerIndex = findIndexOf(this.containers, function(item) {
          return item.container === container;
        });
        if (containerIndex !== -1) {
          this.containers[containerIndex].modals.push(modal);
          return modalIndex;
        }
        this.containers.push({
          modals: [modal],
          container,
          restore: null,
          hiddenSiblingNodes
        });
        return modalIndex;
      }
    }, {
      key: "mount",
      value: function mount(modal, props) {
        var containerIndex = findIndexOf(this.containers, function(item) {
          return item.modals.indexOf(modal) !== -1;
        });
        var containerInfo = this.containers[containerIndex];
        if (!containerInfo.restore) {
          containerInfo.restore = handleContainer(containerInfo, props);
        }
      }
    }, {
      key: "remove",
      value: function remove(modal) {
        var modalIndex = this.modals.indexOf(modal);
        if (modalIndex === -1) {
          return modalIndex;
        }
        var containerIndex = findIndexOf(this.containers, function(item) {
          return item.modals.indexOf(modal) !== -1;
        });
        var containerInfo = this.containers[containerIndex];
        containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
        this.modals.splice(modalIndex, 1);
        if (containerInfo.modals.length === 0) {
          if (containerInfo.restore) {
            containerInfo.restore();
          }
          if (modal.modalRef) {
            ariaHidden(modal.modalRef, true);
          }
          ariaHiddenSiblings(containerInfo.container, modal.mountNode, modal.modalRef, containerInfo.hiddenSiblingNodes, false);
          this.containers.splice(containerIndex, 1);
        } else {
          var nextTop = containerInfo.modals[containerInfo.modals.length - 1];
          if (nextTop.modalRef) {
            ariaHidden(nextTop.modalRef, false);
          }
        }
        return modalIndex;
      }
    }, {
      key: "isTopModal",
      value: function isTopModal(modal) {
        return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
      }
    }]);
    return ModalManager2;
  }();

  // node_modules/@material-ui/core/esm/Unstable_TrapFocus/Unstable_TrapFocus.js
  var React37 = __toModule(require_react());
  var ReactDOM5 = __toModule(require_react_dom());
  var import_prop_types28 = __toModule(require_prop_types());
  function Unstable_TrapFocus(props) {
    var children = props.children, _props$disableAutoFoc = props.disableAutoFocus, disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc, _props$disableEnforce = props.disableEnforceFocus, disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce, _props$disableRestore = props.disableRestoreFocus, disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore, getDoc = props.getDoc, isEnabled = props.isEnabled, open = props.open;
    var ignoreNextEnforceFocus = React37.useRef();
    var sentinelStart = React37.useRef(null);
    var sentinelEnd = React37.useRef(null);
    var nodeToRestore = React37.useRef();
    var rootRef = React37.useRef(null);
    var handleOwnRef = React37.useCallback(function(instance) {
      rootRef.current = ReactDOM5.findDOMNode(instance);
    }, []);
    var handleRef = useForkRef(children.ref, handleOwnRef);
    var prevOpenRef = React37.useRef();
    React37.useEffect(function() {
      prevOpenRef.current = open;
    }, [open]);
    if (!prevOpenRef.current && open && typeof window !== "undefined") {
      nodeToRestore.current = getDoc().activeElement;
    }
    React37.useEffect(function() {
      if (!open) {
        return;
      }
      var doc = ownerDocument(rootRef.current);
      if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {
        if (!rootRef.current.hasAttribute("tabIndex")) {
          if (true) {
            console.error(["Material-UI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
          }
          rootRef.current.setAttribute("tabIndex", -1);
        }
        rootRef.current.focus();
      }
      var contain = function contain2() {
        var rootElement = rootRef.current;
        if (rootElement === null) {
          return;
        }
        if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
          ignoreNextEnforceFocus.current = false;
          return;
        }
        if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {
          rootRef.current.focus();
        }
      };
      var loopFocus = function loopFocus2(event) {
        if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) {
          return;
        }
        if (doc.activeElement === rootRef.current) {
          ignoreNextEnforceFocus.current = true;
          if (event.shiftKey) {
            sentinelEnd.current.focus();
          } else {
            sentinelStart.current.focus();
          }
        }
      };
      doc.addEventListener("focus", contain, true);
      doc.addEventListener("keydown", loopFocus, true);
      var interval = setInterval(function() {
        contain();
      }, 50);
      return function() {
        clearInterval(interval);
        doc.removeEventListener("focus", contain, true);
        doc.removeEventListener("keydown", loopFocus, true);
        if (!disableRestoreFocus) {
          if (nodeToRestore.current && nodeToRestore.current.focus) {
            nodeToRestore.current.focus();
          }
          nodeToRestore.current = null;
        }
      };
    }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);
    return /* @__PURE__ */ React37.createElement(React37.Fragment, null, /* @__PURE__ */ React37.createElement("div", {
      tabIndex: 0,
      ref: sentinelStart,
      "data-test": "sentinelStart"
    }), /* @__PURE__ */ React37.cloneElement(children, {
      ref: handleRef
    }), /* @__PURE__ */ React37.createElement("div", {
      tabIndex: 0,
      ref: sentinelEnd,
      "data-test": "sentinelEnd"
    }));
  }
  true ? Unstable_TrapFocus.propTypes = {
    children: import_prop_types28.default.node,
    disableAutoFocus: import_prop_types28.default.bool,
    disableEnforceFocus: import_prop_types28.default.bool,
    disableRestoreFocus: import_prop_types28.default.bool,
    getDoc: import_prop_types28.default.func.isRequired,
    isEnabled: import_prop_types28.default.func.isRequired,
    open: import_prop_types28.default.bool.isRequired
  } : void 0;
  if (true) {
    Unstable_TrapFocus["propTypes"] = exactProp(Unstable_TrapFocus.propTypes);
  }
  var Unstable_TrapFocus_default = Unstable_TrapFocus;

  // node_modules/@material-ui/core/esm/Modal/SimpleBackdrop.js
  var React38 = __toModule(require_react());
  var import_prop_types29 = __toModule(require_prop_types());
  var styles24 = {
    root: {
      zIndex: -1,
      position: "fixed",
      right: 0,
      bottom: 0,
      top: 0,
      left: 0,
      backgroundColor: "rgba(0, 0, 0, 0.5)",
      WebkitTapHighlightColor: "transparent"
    },
    invisible: {
      backgroundColor: "transparent"
    }
  };
  var SimpleBackdrop = /* @__PURE__ */ React38.forwardRef(function SimpleBackdrop2(props, ref) {
    var _props$invisible = props.invisible, invisible = _props$invisible === void 0 ? false : _props$invisible, open = props.open, other = _objectWithoutProperties(props, ["invisible", "open"]);
    return open ? /* @__PURE__ */ React38.createElement("div", _extends({
      "aria-hidden": true,
      ref
    }, other, {
      style: _extends({}, styles24.root, invisible ? styles24.invisible : {}, other.style)
    })) : null;
  });
  true ? SimpleBackdrop.propTypes = {
    invisible: import_prop_types29.default.bool,
    open: import_prop_types29.default.bool.isRequired
  } : void 0;
  var SimpleBackdrop_default = SimpleBackdrop;

  // node_modules/@material-ui/core/esm/Modal/Modal.js
  function getContainer2(container) {
    container = typeof container === "function" ? container() : container;
    return ReactDOM6.findDOMNode(container);
  }
  function getHasTransition(props) {
    return props.children ? props.children.props.hasOwnProperty("in") : false;
  }
  var defaultManager = new ModalManager();
  var styles25 = function styles26(theme2) {
    return {
      root: {
        position: "fixed",
        zIndex: theme2.zIndex.modal,
        right: 0,
        bottom: 0,
        top: 0,
        left: 0
      },
      hidden: {
        visibility: "hidden"
      }
    };
  };
  var Modal = /* @__PURE__ */ React39.forwardRef(function Modal2(inProps, ref) {
    var theme2 = useTheme();
    var props = getThemeProps({
      name: "MuiModal",
      props: _extends({}, inProps),
      theme: theme2
    });
    var _props$BackdropCompon = props.BackdropComponent, BackdropComponent = _props$BackdropCompon === void 0 ? SimpleBackdrop_default : _props$BackdropCompon, BackdropProps = props.BackdropProps, children = props.children, _props$closeAfterTran = props.closeAfterTransition, closeAfterTransition = _props$closeAfterTran === void 0 ? false : _props$closeAfterTran, container = props.container, _props$disableAutoFoc = props.disableAutoFocus, disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc, _props$disableBackdro = props.disableBackdropClick, disableBackdropClick = _props$disableBackdro === void 0 ? false : _props$disableBackdro, _props$disableEnforce = props.disableEnforceFocus, disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce, _props$disableEscapeK = props.disableEscapeKeyDown, disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK, _props$disablePortal = props.disablePortal, disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal, _props$disableRestore = props.disableRestoreFocus, disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore, _props$disableScrollL = props.disableScrollLock, disableScrollLock = _props$disableScrollL === void 0 ? false : _props$disableScrollL, _props$hideBackdrop = props.hideBackdrop, hideBackdrop = _props$hideBackdrop === void 0 ? false : _props$hideBackdrop, _props$keepMounted = props.keepMounted, keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted, _props$manager = props.manager, manager = _props$manager === void 0 ? defaultManager : _props$manager, onBackdropClick = props.onBackdropClick, onClose = props.onClose, onEscapeKeyDown = props.onEscapeKeyDown, onRendered = props.onRendered, open = props.open, other = _objectWithoutProperties(props, ["BackdropComponent", "BackdropProps", "children", "closeAfterTransition", "container", "disableAutoFocus", "disableBackdropClick", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onEscapeKeyDown", "onRendered", "open"]);
    var _React$useState = React39.useState(true), exited = _React$useState[0], setExited = _React$useState[1];
    var modal = React39.useRef({});
    var mountNodeRef = React39.useRef(null);
    var modalRef = React39.useRef(null);
    var handleRef = useForkRef(modalRef, ref);
    var hasTransition = getHasTransition(props);
    var getDoc = function getDoc2() {
      return ownerDocument(mountNodeRef.current);
    };
    var getModal = function getModal2() {
      modal.current.modalRef = modalRef.current;
      modal.current.mountNode = mountNodeRef.current;
      return modal.current;
    };
    var handleMounted = function handleMounted2() {
      manager.mount(getModal(), {
        disableScrollLock
      });
      modalRef.current.scrollTop = 0;
    };
    var handleOpen = useEventCallback(function() {
      var resolvedContainer = getContainer2(container) || getDoc().body;
      manager.add(getModal(), resolvedContainer);
      if (modalRef.current) {
        handleMounted();
      }
    });
    var isTopModal = React39.useCallback(function() {
      return manager.isTopModal(getModal());
    }, [manager]);
    var handlePortalRef = useEventCallback(function(node) {
      mountNodeRef.current = node;
      if (!node) {
        return;
      }
      if (onRendered) {
        onRendered();
      }
      if (open && isTopModal()) {
        handleMounted();
      } else {
        ariaHidden(modalRef.current, true);
      }
    });
    var handleClose = React39.useCallback(function() {
      manager.remove(getModal());
    }, [manager]);
    React39.useEffect(function() {
      return function() {
        handleClose();
      };
    }, [handleClose]);
    React39.useEffect(function() {
      if (open) {
        handleOpen();
      } else if (!hasTransition || !closeAfterTransition) {
        handleClose();
      }
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }
    var handleEnter = function handleEnter2() {
      setExited(false);
    };
    var handleExited = function handleExited2() {
      setExited(true);
      if (closeAfterTransition) {
        handleClose();
      }
    };
    var handleBackdropClick = function handleBackdropClick2(event) {
      if (event.target !== event.currentTarget) {
        return;
      }
      if (onBackdropClick) {
        onBackdropClick(event);
      }
      if (!disableBackdropClick && onClose) {
        onClose(event, "backdropClick");
      }
    };
    var handleKeyDown2 = function handleKeyDown3(event) {
      if (event.key !== "Escape" || !isTopModal()) {
        return;
      }
      if (onEscapeKeyDown) {
        onEscapeKeyDown(event);
      }
      if (!disableEscapeKeyDown) {
        event.stopPropagation();
        if (onClose) {
          onClose(event, "escapeKeyDown");
        }
      }
    };
    var inlineStyle = styles25(theme2 || {
      zIndex: zIndex_default
    });
    var childProps = {};
    if (children.props.tabIndex === void 0) {
      childProps.tabIndex = children.props.tabIndex || "-1";
    }
    if (hasTransition) {
      childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
      childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
    }
    return /* @__PURE__ */ React39.createElement(Portal_default, {
      ref: handlePortalRef,
      container,
      disablePortal
    }, /* @__PURE__ */ React39.createElement("div", _extends({
      ref: handleRef,
      onKeyDown: handleKeyDown2,
      role: "presentation"
    }, other, {
      style: _extends({}, inlineStyle.root, !open && exited ? inlineStyle.hidden : {}, other.style)
    }), hideBackdrop ? null : /* @__PURE__ */ React39.createElement(BackdropComponent, _extends({
      open,
      onClick: handleBackdropClick
    }, BackdropProps)), /* @__PURE__ */ React39.createElement(Unstable_TrapFocus_default, {
      disableEnforceFocus,
      disableAutoFocus,
      disableRestoreFocus,
      getDoc,
      isEnabled: isTopModal,
      open
    }, /* @__PURE__ */ React39.cloneElement(children, childProps))));
  });
  true ? Modal.propTypes = {
    BackdropComponent: import_prop_types30.default.elementType,
    BackdropProps: import_prop_types30.default.object,
    children: elementAcceptingRef_default.isRequired,
    closeAfterTransition: import_prop_types30.default.bool,
    container: import_prop_types30.default.oneOfType([HTMLElementType, import_prop_types30.default.instanceOf(React39.Component), import_prop_types30.default.func]),
    disableAutoFocus: import_prop_types30.default.bool,
    disableBackdropClick: deprecatedPropType(import_prop_types30.default.bool, "Use the onClose prop with the `reason` argument to filter the `backdropClick` events."),
    disableEnforceFocus: import_prop_types30.default.bool,
    disableEscapeKeyDown: import_prop_types30.default.bool,
    disablePortal: import_prop_types30.default.bool,
    disableRestoreFocus: import_prop_types30.default.bool,
    disableScrollLock: import_prop_types30.default.bool,
    hideBackdrop: import_prop_types30.default.bool,
    keepMounted: import_prop_types30.default.bool,
    manager: import_prop_types30.default.object,
    onBackdropClick: deprecatedPropType(import_prop_types30.default.func, "Use the onClose prop with the `reason` argument to handle the `backdropClick` events."),
    onClose: import_prop_types30.default.func,
    onEscapeKeyDown: deprecatedPropType(import_prop_types30.default.func, "Use the onClose prop with the `reason` argument to handle the `escapeKeyDown` events."),
    onRendered: deprecatedPropType(import_prop_types30.default.func, "Use the ref instead."),
    open: import_prop_types30.default.bool.isRequired
  } : void 0;
  var Modal_default = Modal;

  // node_modules/@material-ui/core/esm/Dialog/Dialog.js
  var styles27 = function styles28(theme2) {
    return {
      root: {
        "@media print": {
          position: "absolute !important"
        }
      },
      scrollPaper: {
        display: "flex",
        justifyContent: "center",
        alignItems: "center"
      },
      scrollBody: {
        overflowY: "auto",
        overflowX: "hidden",
        textAlign: "center",
        "&:after": {
          content: '""',
          display: "inline-block",
          verticalAlign: "middle",
          height: "100%",
          width: "0"
        }
      },
      container: {
        height: "100%",
        "@media print": {
          height: "auto"
        },
        outline: 0
      },
      paper: {
        margin: 32,
        position: "relative",
        overflowY: "auto",
        "@media print": {
          overflowY: "visible",
          boxShadow: "none"
        }
      },
      paperScrollPaper: {
        display: "flex",
        flexDirection: "column",
        maxHeight: "calc(100% - 64px)"
      },
      paperScrollBody: {
        display: "inline-block",
        verticalAlign: "middle",
        textAlign: "left"
      },
      paperWidthFalse: {
        maxWidth: "calc(100% - 64px)"
      },
      paperWidthXs: {
        maxWidth: Math.max(theme2.breakpoints.values.xs, 444),
        "&$paperScrollBody": _defineProperty2({}, theme2.breakpoints.down(Math.max(theme2.breakpoints.values.xs, 444) + 32 * 2), {
          maxWidth: "calc(100% - 64px)"
        })
      },
      paperWidthSm: {
        maxWidth: theme2.breakpoints.values.sm,
        "&$paperScrollBody": _defineProperty2({}, theme2.breakpoints.down(theme2.breakpoints.values.sm + 32 * 2), {
          maxWidth: "calc(100% - 64px)"
        })
      },
      paperWidthMd: {
        maxWidth: theme2.breakpoints.values.md,
        "&$paperScrollBody": _defineProperty2({}, theme2.breakpoints.down(theme2.breakpoints.values.md + 32 * 2), {
          maxWidth: "calc(100% - 64px)"
        })
      },
      paperWidthLg: {
        maxWidth: theme2.breakpoints.values.lg,
        "&$paperScrollBody": _defineProperty2({}, theme2.breakpoints.down(theme2.breakpoints.values.lg + 32 * 2), {
          maxWidth: "calc(100% - 64px)"
        })
      },
      paperWidthXl: {
        maxWidth: theme2.breakpoints.values.xl,
        "&$paperScrollBody": _defineProperty2({}, theme2.breakpoints.down(theme2.breakpoints.values.xl + 32 * 2), {
          maxWidth: "calc(100% - 64px)"
        })
      },
      paperFullWidth: {
        width: "calc(100% - 64px)"
      },
      paperFullScreen: {
        margin: 0,
        width: "100%",
        maxWidth: "100%",
        height: "100%",
        maxHeight: "none",
        borderRadius: 0,
        "&$paperScrollBody": {
          margin: 0,
          maxWidth: "100%"
        }
      }
    };
  };
  var defaultTransitionDuration = {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen
  };
  var Dialog = /* @__PURE__ */ React40.forwardRef(function Dialog2(props, ref) {
    var BackdropProps = props.BackdropProps, children = props.children, classes = props.classes, className = props.className, _props$disableBackdro = props.disableBackdropClick, disableBackdropClick = _props$disableBackdro === void 0 ? false : _props$disableBackdro, _props$disableEscapeK = props.disableEscapeKeyDown, disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK, _props$fullScreen = props.fullScreen, fullScreen = _props$fullScreen === void 0 ? false : _props$fullScreen, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$maxWidth = props.maxWidth, maxWidth2 = _props$maxWidth === void 0 ? "sm" : _props$maxWidth, onBackdropClick = props.onBackdropClick, onClose = props.onClose, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onEscapeKeyDown = props.onEscapeKeyDown, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, open = props.open, _props$PaperComponent = props.PaperComponent, PaperComponent = _props$PaperComponent === void 0 ? Paper_default : _props$PaperComponent, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps, _props$scroll = props.scroll, scroll = _props$scroll === void 0 ? "paper" : _props$scroll, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Fade_default : _props$TransitionComp, _props$transitionDura = props.transitionDuration, transitionDuration = _props$transitionDura === void 0 ? defaultTransitionDuration : _props$transitionDura, TransitionProps = props.TransitionProps, ariaDescribedby = props["aria-describedby"], ariaLabelledby = props["aria-labelledby"], other = _objectWithoutProperties(props, ["BackdropProps", "children", "classes", "className", "disableBackdropClick", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "onEnter", "onEntered", "onEntering", "onEscapeKeyDown", "onExit", "onExited", "onExiting", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps", "aria-describedby", "aria-labelledby"]);
    var mouseDownTarget = React40.useRef();
    var handleMouseDown = function handleMouseDown2(event) {
      mouseDownTarget.current = event.target;
    };
    var handleBackdropClick = function handleBackdropClick2(event) {
      if (event.target !== event.currentTarget) {
        return;
      }
      if (event.target !== mouseDownTarget.current) {
        return;
      }
      mouseDownTarget.current = null;
      if (onBackdropClick) {
        onBackdropClick(event);
      }
      if (!disableBackdropClick && onClose) {
        onClose(event, "backdropClick");
      }
    };
    return /* @__PURE__ */ React40.createElement(Modal_default, _extends({
      className: clsx_m_default(classes.root, className),
      BackdropComponent: Backdrop_default,
      BackdropProps: _extends({
        transitionDuration
      }, BackdropProps),
      closeAfterTransition: true
    }, disableBackdropClick ? {
      disableBackdropClick
    } : {}, {
      disableEscapeKeyDown,
      onEscapeKeyDown,
      onClose,
      open,
      ref
    }, other), /* @__PURE__ */ React40.createElement(TransitionComponent, _extends({
      appear: true,
      in: open,
      timeout: transitionDuration,
      onEnter,
      onEntering,
      onEntered,
      onExit,
      onExiting,
      onExited,
      role: "none presentation"
    }, TransitionProps), /* @__PURE__ */ React40.createElement("div", {
      className: clsx_m_default(classes.container, classes["scroll".concat(capitalize(scroll))]),
      onMouseUp: handleBackdropClick,
      onMouseDown: handleMouseDown
    }, /* @__PURE__ */ React40.createElement(PaperComponent, _extends({
      elevation: 24,
      role: "dialog",
      "aria-describedby": ariaDescribedby,
      "aria-labelledby": ariaLabelledby
    }, PaperProps, {
      className: clsx_m_default(classes.paper, classes["paperScroll".concat(capitalize(scroll))], classes["paperWidth".concat(capitalize(String(maxWidth2)))], PaperProps.className, fullScreen && classes.paperFullScreen, fullWidth && classes.paperFullWidth)
    }), children))));
  });
  true ? Dialog.propTypes = {
    "aria-describedby": import_prop_types31.default.string,
    "aria-labelledby": import_prop_types31.default.string,
    BackdropProps: import_prop_types31.default.object,
    children: import_prop_types31.default.node,
    classes: import_prop_types31.default.object,
    className: import_prop_types31.default.string,
    disableBackdropClick: deprecatedPropType(import_prop_types31.default.bool, "Use the onClose prop with the `reason` argument to filter the `backdropClick` events."),
    disableEscapeKeyDown: import_prop_types31.default.bool,
    fullScreen: import_prop_types31.default.bool,
    fullWidth: import_prop_types31.default.bool,
    maxWidth: import_prop_types31.default.oneOf(["lg", "md", "sm", "xl", "xs", false]),
    onBackdropClick: deprecatedPropType(import_prop_types31.default.func, "Use the onClose prop with the `reason` argument to handle the `backdropClick` events."),
    onClose: import_prop_types31.default.func,
    onEnter: deprecatedPropType(import_prop_types31.default.func, "Use the `TransitionProps` prop instead."),
    onEntered: deprecatedPropType(import_prop_types31.default.func, "Use the `TransitionProps` prop instead."),
    onEntering: deprecatedPropType(import_prop_types31.default.func, "Use the `TransitionProps` prop instead."),
    onEscapeKeyDown: deprecatedPropType(import_prop_types31.default.func, "Use the onClose prop with the `reason` argument to handle the `escapeKeyDown` events."),
    onExit: deprecatedPropType(import_prop_types31.default.func, "Use the `TransitionProps` prop instead."),
    onExited: deprecatedPropType(import_prop_types31.default.func, "Use the `TransitionProps` prop instead."),
    onExiting: deprecatedPropType(import_prop_types31.default.func, "Use the `TransitionProps` prop instead."),
    open: import_prop_types31.default.bool.isRequired,
    PaperComponent: import_prop_types31.default.elementType,
    PaperProps: import_prop_types31.default.object,
    scroll: import_prop_types31.default.oneOf(["body", "paper"]),
    TransitionComponent: import_prop_types31.default.elementType,
    transitionDuration: import_prop_types31.default.oneOfType([import_prop_types31.default.number, import_prop_types31.default.shape({
      appear: import_prop_types31.default.number,
      enter: import_prop_types31.default.number,
      exit: import_prop_types31.default.number
    })]),
    TransitionProps: import_prop_types31.default.object
  } : void 0;
  var Dialog_default = withStyles_default2(styles27, {
    name: "MuiDialog"
  })(Dialog);

  // node_modules/@material-ui/core/esm/DialogActions/DialogActions.js
  var React41 = __toModule(require_react());
  var import_prop_types32 = __toModule(require_prop_types());
  var styles29 = {
    root: {
      display: "flex",
      alignItems: "center",
      padding: 8,
      justifyContent: "flex-end",
      flex: "0 0 auto"
    },
    spacing: {
      "& > :not(:first-child)": {
        marginLeft: 8
      }
    }
  };
  var DialogActions = /* @__PURE__ */ React41.forwardRef(function DialogActions2(props, ref) {
    var _props$disableSpacing = props.disableSpacing, disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing, classes = props.classes, className = props.className, other = _objectWithoutProperties(props, ["disableSpacing", "classes", "className"]);
    return /* @__PURE__ */ React41.createElement("div", _extends({
      className: clsx_m_default(classes.root, className, !disableSpacing && classes.spacing),
      ref
    }, other));
  });
  true ? DialogActions.propTypes = {
    children: import_prop_types32.default.node,
    classes: import_prop_types32.default.object,
    className: import_prop_types32.default.string,
    disableSpacing: import_prop_types32.default.bool
  } : void 0;
  var DialogActions_default = withStyles_default2(styles29, {
    name: "MuiDialogActions"
  })(DialogActions);

  // node_modules/@material-ui/core/esm/DialogContent/DialogContent.js
  var React42 = __toModule(require_react());
  var import_prop_types33 = __toModule(require_prop_types());
  var styles30 = function styles31(theme2) {
    return {
      root: {
        flex: "1 1 auto",
        WebkitOverflowScrolling: "touch",
        overflowY: "auto",
        padding: "8px 24px",
        "&:first-child": {
          paddingTop: 20
        }
      },
      dividers: {
        padding: "16px 24px",
        borderTop: "1px solid ".concat(theme2.palette.divider),
        borderBottom: "1px solid ".concat(theme2.palette.divider)
      }
    };
  };
  var DialogContent = /* @__PURE__ */ React42.forwardRef(function DialogContent2(props, ref) {
    var classes = props.classes, className = props.className, _props$dividers = props.dividers, dividers = _props$dividers === void 0 ? false : _props$dividers, other = _objectWithoutProperties(props, ["classes", "className", "dividers"]);
    return /* @__PURE__ */ React42.createElement("div", _extends({
      className: clsx_m_default(classes.root, className, dividers && classes.dividers),
      ref
    }, other));
  });
  true ? DialogContent.propTypes = {
    children: import_prop_types33.default.node,
    classes: import_prop_types33.default.object,
    className: import_prop_types33.default.string,
    dividers: import_prop_types33.default.bool
  } : void 0;
  var DialogContent_default = withStyles_default2(styles30, {
    name: "MuiDialogContent"
  })(DialogContent);

  // node_modules/@material-ui/core/esm/DialogContentText/DialogContentText.js
  var React43 = __toModule(require_react());
  var import_prop_types34 = __toModule(require_prop_types());
  var styles32 = {
    root: {
      marginBottom: 12
    }
  };
  var DialogContentText = /* @__PURE__ */ React43.forwardRef(function DialogContentText2(props, ref) {
    return /* @__PURE__ */ React43.createElement(Typography_default, _extends({
      component: "p",
      variant: "body1",
      color: "textSecondary",
      ref
    }, props));
  });
  true ? DialogContentText.propTypes = {
    children: import_prop_types34.default.node,
    classes: import_prop_types34.default.object
  } : void 0;
  var DialogContentText_default = withStyles_default2(styles32, {
    name: "MuiDialogContentText"
  })(DialogContentText);

  // node_modules/@material-ui/core/esm/DialogTitle/DialogTitle.js
  var React44 = __toModule(require_react());
  var import_prop_types35 = __toModule(require_prop_types());
  var styles33 = {
    root: {
      margin: 0,
      padding: "16px 24px",
      flex: "0 0 auto"
    }
  };
  var DialogTitle = /* @__PURE__ */ React44.forwardRef(function DialogTitle2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$disableTypogra = props.disableTypography, disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra, other = _objectWithoutProperties(props, ["children", "classes", "className", "disableTypography"]);
    return /* @__PURE__ */ React44.createElement("div", _extends({
      className: clsx_m_default(classes.root, className),
      ref
    }, other), disableTypography ? children : /* @__PURE__ */ React44.createElement(Typography_default, {
      component: "h2",
      variant: "h6"
    }, children));
  });
  true ? DialogTitle.propTypes = {
    children: import_prop_types35.default.node,
    classes: import_prop_types35.default.object,
    className: import_prop_types35.default.string,
    disableTypography: import_prop_types35.default.bool
  } : void 0;
  var DialogTitle_default = withStyles_default2(styles33, {
    name: "MuiDialogTitle"
  })(DialogTitle);

  // node_modules/@material-ui/core/esm/Divider/Divider.js
  var React45 = __toModule(require_react());
  var import_prop_types36 = __toModule(require_prop_types());
  var styles34 = function styles35(theme2) {
    return {
      root: {
        height: 1,
        margin: 0,
        border: "none",
        flexShrink: 0,
        backgroundColor: theme2.palette.divider
      },
      absolute: {
        position: "absolute",
        bottom: 0,
        left: 0,
        width: "100%"
      },
      inset: {
        marginLeft: 72
      },
      light: {
        backgroundColor: alpha(theme2.palette.divider, 0.08)
      },
      middle: {
        marginLeft: theme2.spacing(2),
        marginRight: theme2.spacing(2)
      },
      vertical: {
        height: "100%",
        width: 1
      },
      flexItem: {
        alignSelf: "stretch",
        height: "auto"
      }
    };
  };
  var Divider = /* @__PURE__ */ React45.forwardRef(function Divider2(props, ref) {
    var _props$absolute = props.absolute, absolute = _props$absolute === void 0 ? false : _props$absolute, classes = props.classes, className = props.className, _props$component = props.component, Component5 = _props$component === void 0 ? "hr" : _props$component, _props$flexItem = props.flexItem, flexItem = _props$flexItem === void 0 ? false : _props$flexItem, _props$light = props.light, light2 = _props$light === void 0 ? false : _props$light, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, _props$role = props.role, role = _props$role === void 0 ? Component5 !== "hr" ? "separator" : void 0 : _props$role, _props$variant = props.variant, variant = _props$variant === void 0 ? "fullWidth" : _props$variant, other = _objectWithoutProperties(props, ["absolute", "classes", "className", "component", "flexItem", "light", "orientation", "role", "variant"]);
    return /* @__PURE__ */ React45.createElement(Component5, _extends({
      className: clsx_m_default(classes.root, className, variant !== "fullWidth" && classes[variant], absolute && classes.absolute, flexItem && classes.flexItem, light2 && classes.light, orientation === "vertical" && classes.vertical),
      role,
      ref
    }, other));
  });
  true ? Divider.propTypes = {
    absolute: import_prop_types36.default.bool,
    children: import_prop_types36.default.node,
    classes: import_prop_types36.default.object,
    className: import_prop_types36.default.string,
    component: import_prop_types36.default.elementType,
    flexItem: import_prop_types36.default.bool,
    light: import_prop_types36.default.bool,
    orientation: import_prop_types36.default.oneOf(["horizontal", "vertical"]),
    role: import_prop_types36.default.string,
    variant: import_prop_types36.default.oneOf(["fullWidth", "inset", "middle"])
  } : void 0;
  var Divider_default = withStyles_default2(styles34, {
    name: "MuiDivider"
  })(Divider);

  // node_modules/@material-ui/core/esm/Slide/Slide.js
  var React46 = __toModule(require_react());
  var import_prop_types37 = __toModule(require_prop_types());
  var ReactDOM7 = __toModule(require_react_dom());
  function getTranslateValue(direction, node) {
    var rect = node.getBoundingClientRect();
    var transform4;
    if (node.fakeTransform) {
      transform4 = node.fakeTransform;
    } else {
      var computedStyle = window.getComputedStyle(node);
      transform4 = computedStyle.getPropertyValue("-webkit-transform") || computedStyle.getPropertyValue("transform");
    }
    var offsetX = 0;
    var offsetY = 0;
    if (transform4 && transform4 !== "none" && typeof transform4 === "string") {
      var transformValues = transform4.split("(")[1].split(")")[0].split(",");
      offsetX = parseInt(transformValues[4], 10);
      offsetY = parseInt(transformValues[5], 10);
    }
    if (direction === "left") {
      return "translateX(".concat(window.innerWidth, "px) translateX(").concat(offsetX - rect.left, "px)");
    }
    if (direction === "right") {
      return "translateX(-".concat(rect.left + rect.width - offsetX, "px)");
    }
    if (direction === "up") {
      return "translateY(".concat(window.innerHeight, "px) translateY(").concat(offsetY - rect.top, "px)");
    }
    return "translateY(-".concat(rect.top + rect.height - offsetY, "px)");
  }
  function setTranslateValue(direction, node) {
    var transform4 = getTranslateValue(direction, node);
    if (transform4) {
      node.style.webkitTransform = transform4;
      node.style.transform = transform4;
    }
  }
  var defaultTimeout2 = {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen
  };
  var Slide = /* @__PURE__ */ React46.forwardRef(function Slide2(props, ref) {
    var children = props.children, _props$direction = props.direction, direction = _props$direction === void 0 ? "down" : _props$direction, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style2 = props.style, _props$timeout = props.timeout, timeout2 = _props$timeout === void 0 ? defaultTimeout2 : _props$timeout, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Transition_default : _props$TransitionComp, other = _objectWithoutProperties(props, ["children", "direction", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);
    var theme2 = useTheme2();
    var childrenRef = React46.useRef(null);
    var handleOwnRef = React46.useCallback(function(instance) {
      childrenRef.current = ReactDOM7.findDOMNode(instance);
    }, []);
    var handleRefIntermediary = useForkRef(children.ref, handleOwnRef);
    var handleRef = useForkRef(handleRefIntermediary, ref);
    var normalizedTransitionCallback = function normalizedTransitionCallback2(callback) {
      return function(isAppearing) {
        if (callback) {
          if (isAppearing === void 0) {
            callback(childrenRef.current);
          } else {
            callback(childrenRef.current, isAppearing);
          }
        }
      };
    };
    var handleEnter = normalizedTransitionCallback(function(node, isAppearing) {
      setTranslateValue(direction, node);
      reflow(node);
      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    var handleEntering = normalizedTransitionCallback(function(node, isAppearing) {
      var transitionProps = getTransitionProps({
        timeout: timeout2,
        style: style2
      }, {
        mode: "enter"
      });
      node.style.webkitTransition = theme2.transitions.create("-webkit-transform", _extends({}, transitionProps, {
        easing: theme2.transitions.easing.easeOut
      }));
      node.style.transition = theme2.transitions.create("transform", _extends({}, transitionProps, {
        easing: theme2.transitions.easing.easeOut
      }));
      node.style.webkitTransform = "none";
      node.style.transform = "none";
      if (onEntering) {
        onEntering(node, isAppearing);
      }
    });
    var handleEntered = normalizedTransitionCallback(onEntered);
    var handleExiting = normalizedTransitionCallback(onExiting);
    var handleExit = normalizedTransitionCallback(function(node) {
      var transitionProps = getTransitionProps({
        timeout: timeout2,
        style: style2
      }, {
        mode: "exit"
      });
      node.style.webkitTransition = theme2.transitions.create("-webkit-transform", _extends({}, transitionProps, {
        easing: theme2.transitions.easing.sharp
      }));
      node.style.transition = theme2.transitions.create("transform", _extends({}, transitionProps, {
        easing: theme2.transitions.easing.sharp
      }));
      setTranslateValue(direction, node);
      if (onExit) {
        onExit(node);
      }
    });
    var handleExited = normalizedTransitionCallback(function(node) {
      node.style.webkitTransition = "";
      node.style.transition = "";
      if (onExited) {
        onExited(node);
      }
    });
    var updatePosition = React46.useCallback(function() {
      if (childrenRef.current) {
        setTranslateValue(direction, childrenRef.current);
      }
    }, [direction]);
    React46.useEffect(function() {
      if (inProp || direction === "down" || direction === "right") {
        return void 0;
      }
      var handleResize = debounce(function() {
        if (childrenRef.current) {
          setTranslateValue(direction, childrenRef.current);
        }
      });
      window.addEventListener("resize", handleResize);
      return function() {
        handleResize.clear();
        window.removeEventListener("resize", handleResize);
      };
    }, [direction, inProp]);
    React46.useEffect(function() {
      if (!inProp) {
        updatePosition();
      }
    }, [inProp, updatePosition]);
    return /* @__PURE__ */ React46.createElement(TransitionComponent, _extends({
      nodeRef: childrenRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      appear: true,
      in: inProp,
      timeout: timeout2
    }, other), function(state, childProps) {
      return /* @__PURE__ */ React46.cloneElement(children, _extends({
        ref: handleRef,
        style: _extends({
          visibility: state === "exited" && !inProp ? "hidden" : void 0
        }, style2, children.props.style)
      }, childProps));
    });
  });
  true ? Slide.propTypes = {
    children: elementAcceptingRef_default,
    direction: import_prop_types37.default.oneOf(["down", "left", "right", "up"]),
    in: import_prop_types37.default.bool,
    onEnter: import_prop_types37.default.func,
    onEntered: import_prop_types37.default.func,
    onEntering: import_prop_types37.default.func,
    onExit: import_prop_types37.default.func,
    onExited: import_prop_types37.default.func,
    onExiting: import_prop_types37.default.func,
    style: import_prop_types37.default.object,
    timeout: import_prop_types37.default.oneOfType([import_prop_types37.default.number, import_prop_types37.default.shape({
      appear: import_prop_types37.default.number,
      enter: import_prop_types37.default.number,
      exit: import_prop_types37.default.number
    })])
  } : void 0;
  var Slide_default = Slide;

  // node_modules/@material-ui/core/esm/Fab/Fab.js
  var React47 = __toModule(require_react());
  var import_prop_types38 = __toModule(require_prop_types());
  var styles36 = function styles37(theme2) {
    return {
      root: _extends({}, theme2.typography.button, {
        boxSizing: "border-box",
        minHeight: 36,
        transition: theme2.transitions.create(["background-color", "box-shadow", "border"], {
          duration: theme2.transitions.duration.short
        }),
        borderRadius: "50%",
        padding: 0,
        minWidth: 0,
        width: 56,
        height: 56,
        boxShadow: theme2.shadows[6],
        "&:active": {
          boxShadow: theme2.shadows[12]
        },
        color: theme2.palette.getContrastText(theme2.palette.grey[300]),
        backgroundColor: theme2.palette.grey[300],
        "&:hover": {
          backgroundColor: theme2.palette.grey.A100,
          "@media (hover: none)": {
            backgroundColor: theme2.palette.grey[300]
          },
          "&$disabled": {
            backgroundColor: theme2.palette.action.disabledBackground
          },
          textDecoration: "none"
        },
        "&$focusVisible": {
          boxShadow: theme2.shadows[6]
        },
        "&$disabled": {
          color: theme2.palette.action.disabled,
          boxShadow: theme2.shadows[0],
          backgroundColor: theme2.palette.action.disabledBackground
        }
      }),
      label: {
        width: "100%",
        display: "inherit",
        alignItems: "inherit",
        justifyContent: "inherit"
      },
      primary: {
        color: theme2.palette.primary.contrastText,
        backgroundColor: theme2.palette.primary.main,
        "&:hover": {
          backgroundColor: theme2.palette.primary.dark,
          "@media (hover: none)": {
            backgroundColor: theme2.palette.primary.main
          }
        }
      },
      secondary: {
        color: theme2.palette.secondary.contrastText,
        backgroundColor: theme2.palette.secondary.main,
        "&:hover": {
          backgroundColor: theme2.palette.secondary.dark,
          "@media (hover: none)": {
            backgroundColor: theme2.palette.secondary.main
          }
        }
      },
      extended: {
        borderRadius: 48 / 2,
        padding: "0 16px",
        width: "auto",
        minHeight: "auto",
        minWidth: 48,
        height: 48,
        "&$sizeSmall": {
          width: "auto",
          padding: "0 8px",
          borderRadius: 34 / 2,
          minWidth: 34,
          height: 34
        },
        "&$sizeMedium": {
          width: "auto",
          padding: "0 16px",
          borderRadius: 40 / 2,
          minWidth: 40,
          height: 40
        }
      },
      focusVisible: {},
      disabled: {},
      colorInherit: {
        color: "inherit"
      },
      sizeSmall: {
        width: 40,
        height: 40
      },
      sizeMedium: {
        width: 48,
        height: 48
      }
    };
  };
  var Fab = /* @__PURE__ */ React47.forwardRef(function Fab2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "default" : _props$color, _props$component = props.component, component = _props$component === void 0 ? "button" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, focusVisibleClassName = props.focusVisibleClassName, _props$size = props.size, size = _props$size === void 0 ? "large" : _props$size, _props$variant = props.variant, variant = _props$variant === void 0 ? "circular" : _props$variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"]);
    return /* @__PURE__ */ React47.createElement(ButtonBase_default, _extends({
      className: clsx_m_default(classes.root, className, size !== "large" && classes["size".concat(capitalize(size))], disabled && classes.disabled, variant === "extended" && classes.extended, {
        "primary": classes.primary,
        "secondary": classes.secondary,
        "inherit": classes.colorInherit
      }[color2]),
      component,
      disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx_m_default(classes.focusVisible, focusVisibleClassName),
      ref
    }, other), /* @__PURE__ */ React47.createElement("span", {
      className: classes.label
    }, children));
  });
  true ? Fab.propTypes = {
    children: import_prop_types38.default.node.isRequired,
    classes: import_prop_types38.default.object,
    className: import_prop_types38.default.string,
    color: import_prop_types38.default.oneOf(["default", "inherit", "primary", "secondary"]),
    component: import_prop_types38.default.elementType,
    disabled: import_prop_types38.default.bool,
    disableFocusRipple: import_prop_types38.default.bool,
    disableRipple: import_prop_types38.default.bool,
    focusVisibleClassName: import_prop_types38.default.string,
    href: import_prop_types38.default.string,
    size: import_prop_types38.default.oneOf(["large", "medium", "small"]),
    variant: chainPropTypes(import_prop_types38.default.oneOf(["extended", "circular", "round"]), function(props) {
      if (props.variant === "round") {
        throw new Error('Material-UI: variant="round" was renamed variant="circular" for consistency.');
      }
      return null;
    })
  } : void 0;
  var Fab_default = withStyles_default2(styles36, {
    name: "MuiFab"
  })(Fab);

  // node_modules/@material-ui/core/esm/FilledInput/FilledInput.js
  var React50 = __toModule(require_react());
  var import_prop_types41 = __toModule(require_prop_types());

  // node_modules/@material-ui/core/esm/InputBase/InputBase.js
  var React49 = __toModule(require_react());
  var import_prop_types40 = __toModule(require_prop_types());

  // node_modules/@material-ui/core/esm/FormControl/formControlState.js
  function formControlState(_ref3) {
    var props = _ref3.props, states = _ref3.states, muiFormControl = _ref3.muiFormControl;
    return states.reduce(function(acc, state) {
      acc[state] = props[state];
      if (muiFormControl) {
        if (typeof props[state] === "undefined") {
          acc[state] = muiFormControl[state];
        }
      }
      return acc;
    }, {});
  }

  // node_modules/@material-ui/core/esm/TextareaAutosize/TextareaAutosize.js
  var React48 = __toModule(require_react());
  var import_prop_types39 = __toModule(require_prop_types());
  function getStyleValue(computedStyle, property) {
    return parseInt(computedStyle[property], 10) || 0;
  }
  var useEnhancedEffect4 = typeof window !== "undefined" ? React48.useLayoutEffect : React48.useEffect;
  var styles38 = {
    shadow: {
      visibility: "hidden",
      position: "absolute",
      overflow: "hidden",
      height: 0,
      top: 0,
      left: 0,
      transform: "translateZ(0)"
    }
  };
  var TextareaAutosize = /* @__PURE__ */ React48.forwardRef(function TextareaAutosize2(props, ref) {
    var onChange = props.onChange, rows = props.rows, rowsMax = props.rowsMax, rowsMinProp = props.rowsMin, maxRowsProp = props.maxRows, _props$minRows = props.minRows, minRowsProp = _props$minRows === void 0 ? 1 : _props$minRows, style2 = props.style, value = props.value, other = _objectWithoutProperties(props, ["onChange", "rows", "rowsMax", "rowsMin", "maxRows", "minRows", "style", "value"]);
    var maxRows = maxRowsProp || rowsMax;
    var minRows = rows || rowsMinProp || minRowsProp;
    var _React$useRef = React48.useRef(value != null), isControlled = _React$useRef.current;
    var inputRef = React48.useRef(null);
    var handleRef = useForkRef(ref, inputRef);
    var shadowRef = React48.useRef(null);
    var renders = React48.useRef(0);
    var _React$useState = React48.useState({}), state = _React$useState[0], setState = _React$useState[1];
    var syncHeight = React48.useCallback(function() {
      var input = inputRef.current;
      var computedStyle = window.getComputedStyle(input);
      var inputShallow = shadowRef.current;
      inputShallow.style.width = computedStyle.width;
      inputShallow.value = input.value || props.placeholder || "x";
      if (inputShallow.value.slice(-1) === "\n") {
        inputShallow.value += " ";
      }
      var boxSizing2 = computedStyle["box-sizing"];
      var padding = getStyleValue(computedStyle, "padding-bottom") + getStyleValue(computedStyle, "padding-top");
      var border2 = getStyleValue(computedStyle, "border-bottom-width") + getStyleValue(computedStyle, "border-top-width");
      var innerHeight = inputShallow.scrollHeight - padding;
      inputShallow.value = "x";
      var singleRowHeight = inputShallow.scrollHeight - padding;
      var outerHeight = innerHeight;
      if (minRows) {
        outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
      }
      if (maxRows) {
        outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
      }
      outerHeight = Math.max(outerHeight, singleRowHeight);
      var outerHeightStyle = outerHeight + (boxSizing2 === "border-box" ? padding + border2 : 0);
      var overflow2 = Math.abs(outerHeight - innerHeight) <= 1;
      setState(function(prevState) {
        if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow2)) {
          renders.current += 1;
          return {
            overflow: overflow2,
            outerHeightStyle
          };
        }
        if (true) {
          if (renders.current === 20) {
            console.error(["Material-UI: Too many re-renders. The layout is unstable.", "TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n"));
          }
        }
        return prevState;
      });
    }, [maxRows, minRows, props.placeholder]);
    React48.useEffect(function() {
      var handleResize = debounce(function() {
        renders.current = 0;
        syncHeight();
      });
      window.addEventListener("resize", handleResize);
      return function() {
        handleResize.clear();
        window.removeEventListener("resize", handleResize);
      };
    }, [syncHeight]);
    useEnhancedEffect4(function() {
      syncHeight();
    });
    React48.useEffect(function() {
      renders.current = 0;
    }, [value]);
    var handleChange = function handleChange2(event) {
      renders.current = 0;
      if (!isControlled) {
        syncHeight();
      }
      if (onChange) {
        onChange(event);
      }
    };
    return /* @__PURE__ */ React48.createElement(React48.Fragment, null, /* @__PURE__ */ React48.createElement("textarea", _extends({
      value,
      onChange: handleChange,
      ref: handleRef,
      rows: minRows,
      style: _extends({
        height: state.outerHeightStyle,
        overflow: state.overflow ? "hidden" : null
      }, style2)
    }, other)), /* @__PURE__ */ React48.createElement("textarea", {
      "aria-hidden": true,
      className: props.className,
      readOnly: true,
      ref: shadowRef,
      tabIndex: -1,
      style: _extends({}, styles38.shadow, style2)
    }));
  });
  true ? TextareaAutosize.propTypes = {
    className: import_prop_types39.default.string,
    maxRows: import_prop_types39.default.oneOfType([import_prop_types39.default.number, import_prop_types39.default.string]),
    minRows: import_prop_types39.default.oneOfType([import_prop_types39.default.number, import_prop_types39.default.string]),
    onChange: import_prop_types39.default.func,
    placeholder: import_prop_types39.default.string,
    rows: deprecatedPropType(import_prop_types39.default.oneOfType([import_prop_types39.default.number, import_prop_types39.default.string]), "Use `minRows` instead."),
    rowsMax: deprecatedPropType(import_prop_types39.default.oneOfType([import_prop_types39.default.number, import_prop_types39.default.string]), "Use `maxRows` instead."),
    rowsMin: deprecatedPropType(import_prop_types39.default.oneOfType([import_prop_types39.default.number, import_prop_types39.default.string]), "Use `minRows` instead."),
    style: import_prop_types39.default.object,
    value: import_prop_types39.default.oneOfType([import_prop_types39.default.arrayOf(import_prop_types39.default.string), import_prop_types39.default.number, import_prop_types39.default.string])
  } : void 0;
  var TextareaAutosize_default = TextareaAutosize;

  // node_modules/@material-ui/core/esm/InputBase/utils.js
  function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
  }
  function isFilled(obj) {
    var SSR = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
  }
  function isAdornedStart(obj) {
    return obj.startAdornment;
  }

  // node_modules/@material-ui/core/esm/InputBase/InputBase.js
  var styles39 = function styles40(theme2) {
    var light2 = theme2.palette.type === "light";
    var placeholder = {
      color: "currentColor",
      opacity: light2 ? 0.42 : 0.5,
      transition: theme2.transitions.create("opacity", {
        duration: theme2.transitions.duration.shorter
      })
    };
    var placeholderHidden = {
      opacity: "0 !important"
    };
    var placeholderVisible = {
      opacity: light2 ? 0.42 : 0.5
    };
    return {
      "@global": {
        "@keyframes mui-auto-fill": {},
        "@keyframes mui-auto-fill-cancel": {}
      },
      root: _extends({}, theme2.typography.body1, {
        color: theme2.palette.text.primary,
        lineHeight: "1.1876em",
        boxSizing: "border-box",
        position: "relative",
        cursor: "text",
        display: "inline-flex",
        alignItems: "center",
        "&$disabled": {
          color: theme2.palette.text.disabled,
          cursor: "default"
        }
      }),
      formControl: {},
      focused: {},
      disabled: {},
      adornedStart: {},
      adornedEnd: {},
      error: {},
      marginDense: {},
      multiline: {
        padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
        "&$marginDense": {
          paddingTop: 4 - 1
        }
      },
      colorSecondary: {},
      fullWidth: {
        width: "100%"
      },
      input: {
        font: "inherit",
        letterSpacing: "inherit",
        color: "currentColor",
        padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
        border: 0,
        boxSizing: "content-box",
        background: "none",
        height: "1.1876em",
        margin: 0,
        WebkitTapHighlightColor: "transparent",
        display: "block",
        minWidth: 0,
        width: "100%",
        animationName: "mui-auto-fill-cancel",
        animationDuration: "10ms",
        "&::-webkit-input-placeholder": placeholder,
        "&::-moz-placeholder": placeholder,
        "&:-ms-input-placeholder": placeholder,
        "&::-ms-input-placeholder": placeholder,
        "&:focus": {
          outline: 0
        },
        "&:invalid": {
          boxShadow: "none"
        },
        "&::-webkit-search-decoration": {
          "-webkit-appearance": "none"
        },
        "label[data-shrink=false] + $formControl &": {
          "&::-webkit-input-placeholder": placeholderHidden,
          "&::-moz-placeholder": placeholderHidden,
          "&:-ms-input-placeholder": placeholderHidden,
          "&::-ms-input-placeholder": placeholderHidden,
          "&:focus::-webkit-input-placeholder": placeholderVisible,
          "&:focus::-moz-placeholder": placeholderVisible,
          "&:focus:-ms-input-placeholder": placeholderVisible,
          "&:focus::-ms-input-placeholder": placeholderVisible
        },
        "&$disabled": {
          opacity: 1
        },
        "&:-webkit-autofill": {
          animationDuration: "5000s",
          animationName: "mui-auto-fill"
        }
      },
      inputMarginDense: {
        paddingTop: 4 - 1
      },
      inputMultiline: {
        height: "auto",
        resize: "none",
        padding: 0
      },
      inputTypeSearch: {
        "-moz-appearance": "textfield",
        "-webkit-appearance": "textfield"
      },
      inputAdornedStart: {},
      inputAdornedEnd: {},
      inputHiddenLabel: {}
    };
  };
  var useEnhancedEffect5 = typeof window === "undefined" ? React49.useEffect : React49.useLayoutEffect;
  var InputBase = /* @__PURE__ */ React49.forwardRef(function InputBase2(props, ref) {
    var ariaDescribedby = props["aria-describedby"], autoComplete = props.autoComplete, autoFocus = props.autoFocus, classes = props.classes, className = props.className, color2 = props.color, defaultValue = props.defaultValue, disabled = props.disabled, endAdornment = props.endAdornment, error = props.error, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, id = props.id, _props$inputComponent = props.inputComponent, inputComponent = _props$inputComponent === void 0 ? "input" : _props$inputComponent, _props$inputProps = props.inputProps, inputPropsProp = _props$inputProps === void 0 ? {} : _props$inputProps, inputRefProp = props.inputRef, margin = props.margin, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onClick = props.onClick, onFocus = props.onFocus, onKeyDown = props.onKeyDown, onKeyUp = props.onKeyUp, placeholder = props.placeholder, readOnly = props.readOnly, renderSuffix = props.renderSuffix, rows = props.rows, rowsMax = props.rowsMax, rowsMin = props.rowsMin, maxRows = props.maxRows, minRows = props.minRows, startAdornment = props.startAdornment, _props$type = props.type, type = _props$type === void 0 ? "text" : _props$type, valueProp = props.value, other = _objectWithoutProperties(props, ["aria-describedby", "autoComplete", "autoFocus", "classes", "className", "color", "defaultValue", "disabled", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "rowsMax", "rowsMin", "maxRows", "minRows", "startAdornment", "type", "value"]);
    var value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    var _React$useRef = React49.useRef(value != null), isControlled = _React$useRef.current;
    var inputRef = React49.useRef();
    var handleInputRefWarning = React49.useCallback(function(instance) {
      if (true) {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["Material-UI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `inputRef` prop.", "Make sure the `inputRef` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    var handleInputPropsRefProp = useForkRef(inputPropsProp.ref, handleInputRefWarning);
    var handleInputRefProp = useForkRef(inputRefProp, handleInputPropsRefProp);
    var handleInputRef = useForkRef(inputRef, handleInputRefProp);
    var _React$useState = React49.useState(false), focused = _React$useState[0], setFocused = _React$useState[1];
    var muiFormControl = useFormControl();
    if (true) {
      React49.useEffect(function() {
        if (muiFormControl) {
          return muiFormControl.registerEffect();
        }
        return void 0;
      }, [muiFormControl]);
    }
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "hiddenLabel", "margin", "required", "filled"]
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused;
    React49.useEffect(function() {
      if (!muiFormControl && disabled && focused) {
        setFocused(false);
        if (onBlur) {
          onBlur();
        }
      }
    }, [muiFormControl, disabled, focused, onBlur]);
    var onFilled = muiFormControl && muiFormControl.onFilled;
    var onEmpty = muiFormControl && muiFormControl.onEmpty;
    var checkDirty = React49.useCallback(function(obj) {
      if (isFilled(obj)) {
        if (onFilled) {
          onFilled();
        }
      } else if (onEmpty) {
        onEmpty();
      }
    }, [onFilled, onEmpty]);
    useEnhancedEffect5(function() {
      if (isControlled) {
        checkDirty({
          value
        });
      }
    }, [value, checkDirty, isControlled]);
    var handleFocus = function handleFocus2(event) {
      if (fcs.disabled) {
        event.stopPropagation();
        return;
      }
      if (onFocus) {
        onFocus(event);
      }
      if (inputPropsProp.onFocus) {
        inputPropsProp.onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      } else {
        setFocused(true);
      }
    };
    var handleBlur = function handleBlur2(event) {
      if (onBlur) {
        onBlur(event);
      }
      if (inputPropsProp.onBlur) {
        inputPropsProp.onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      } else {
        setFocused(false);
      }
    };
    var handleChange = function handleChange2(event) {
      if (!isControlled) {
        var element = event.target || inputRef.current;
        if (element == null) {
          throw new Error(true ? "Material-UI: Expected valid input target. Did you use a custom `inputComponent` and forget to forward refs? See https://material-ui.com/r/input-component-ref-interface for more info." : formatMuiErrorMessage(1));
        }
        checkDirty({
          value: element.value
        });
      }
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (inputPropsProp.onChange) {
        inputPropsProp.onChange.apply(inputPropsProp, [event].concat(args));
      }
      if (onChange) {
        onChange.apply(void 0, [event].concat(args));
      }
    };
    React49.useEffect(function() {
      checkDirty(inputRef.current);
    }, []);
    var handleClick = function handleClick2(event) {
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      if (onClick) {
        onClick(event);
      }
    };
    var InputComponent = inputComponent;
    var inputProps = _extends({}, inputPropsProp, {
      ref: handleInputRef
    });
    if (typeof InputComponent !== "string") {
      inputProps = _extends({
        inputRef: handleInputRef,
        type
      }, inputProps, {
        ref: null
      });
    } else if (multiline) {
      if (rows && !maxRows && !minRows && !rowsMax && !rowsMin) {
        InputComponent = "textarea";
      } else {
        inputProps = _extends({
          minRows: rows || minRows,
          rowsMax,
          maxRows
        }, inputProps);
        InputComponent = TextareaAutosize_default;
      }
    } else {
      inputProps = _extends({
        type
      }, inputProps);
    }
    var handleAutoFill = function handleAutoFill2(event) {
      checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
        value: "x"
      });
    };
    React49.useEffect(function() {
      if (muiFormControl) {
        muiFormControl.setAdornedStart(Boolean(startAdornment));
      }
    }, [muiFormControl, startAdornment]);
    return /* @__PURE__ */ React49.createElement("div", _extends({
      className: clsx_m_default(classes.root, classes["color".concat(capitalize(fcs.color || "primary"))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fullWidth && classes.fullWidth, fcs.focused && classes.focused, muiFormControl && classes.formControl, multiline && classes.multiline, startAdornment && classes.adornedStart, endAdornment && classes.adornedEnd, fcs.margin === "dense" && classes.marginDense),
      onClick: handleClick,
      ref
    }, other), startAdornment, /* @__PURE__ */ React49.createElement(FormControlContext_default.Provider, {
      value: null
    }, /* @__PURE__ */ React49.createElement(InputComponent, _extends({
      "aria-invalid": fcs.error,
      "aria-describedby": ariaDescribedby,
      autoComplete,
      autoFocus,
      defaultValue,
      disabled: fcs.disabled,
      id,
      onAnimationStart: handleAutoFill,
      name,
      placeholder,
      readOnly,
      required: fcs.required,
      rows,
      value,
      onKeyDown,
      onKeyUp
    }, inputProps, {
      className: clsx_m_default(classes.input, inputPropsProp.className, fcs.disabled && classes.disabled, multiline && classes.inputMultiline, fcs.hiddenLabel && classes.inputHiddenLabel, startAdornment && classes.inputAdornedStart, endAdornment && classes.inputAdornedEnd, type === "search" && classes.inputTypeSearch, fcs.margin === "dense" && classes.inputMarginDense),
      onBlur: handleBlur,
      onChange: handleChange,
      onFocus: handleFocus
    }))), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
      startAdornment
    })) : null);
  });
  true ? InputBase.propTypes = {
    "aria-describedby": import_prop_types40.default.string,
    autoComplete: import_prop_types40.default.string,
    autoFocus: import_prop_types40.default.bool,
    classes: import_prop_types40.default.object,
    className: import_prop_types40.default.string,
    color: import_prop_types40.default.oneOf(["primary", "secondary"]),
    defaultValue: import_prop_types40.default.any,
    disabled: import_prop_types40.default.bool,
    endAdornment: import_prop_types40.default.node,
    error: import_prop_types40.default.bool,
    fullWidth: import_prop_types40.default.bool,
    id: import_prop_types40.default.string,
    inputComponent: import_prop_types40.default.elementType,
    inputProps: import_prop_types40.default.object,
    inputRef: refType_default,
    margin: import_prop_types40.default.oneOf(["dense", "none"]),
    maxRows: import_prop_types40.default.oneOfType([import_prop_types40.default.number, import_prop_types40.default.string]),
    minRows: import_prop_types40.default.oneOfType([import_prop_types40.default.number, import_prop_types40.default.string]),
    multiline: import_prop_types40.default.bool,
    name: import_prop_types40.default.string,
    onBlur: import_prop_types40.default.func,
    onChange: import_prop_types40.default.func,
    onClick: import_prop_types40.default.func,
    onFocus: import_prop_types40.default.func,
    onKeyDown: import_prop_types40.default.func,
    onKeyUp: import_prop_types40.default.func,
    placeholder: import_prop_types40.default.string,
    readOnly: import_prop_types40.default.bool,
    renderSuffix: import_prop_types40.default.func,
    required: import_prop_types40.default.bool,
    rows: import_prop_types40.default.oneOfType([import_prop_types40.default.number, import_prop_types40.default.string]),
    rowsMax: import_prop_types40.default.oneOfType([import_prop_types40.default.number, import_prop_types40.default.string]),
    rowsMin: import_prop_types40.default.oneOfType([import_prop_types40.default.number, import_prop_types40.default.string]),
    startAdornment: import_prop_types40.default.node,
    type: import_prop_types40.default.string,
    value: import_prop_types40.default.any
  } : void 0;
  var InputBase_default = withStyles_default2(styles39, {
    name: "MuiInputBase"
  })(InputBase);

  // node_modules/@material-ui/core/esm/FilledInput/FilledInput.js
  var styles41 = function styles42(theme2) {
    var light2 = theme2.palette.type === "light";
    var bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    var backgroundColor = light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.09)";
    return {
      root: {
        position: "relative",
        backgroundColor,
        borderTopLeftRadius: theme2.shape.borderRadius,
        borderTopRightRadius: theme2.shape.borderRadius,
        transition: theme2.transitions.create("background-color", {
          duration: theme2.transitions.duration.shorter,
          easing: theme2.transitions.easing.easeOut
        }),
        "&:hover": {
          backgroundColor: light2 ? "rgba(0, 0, 0, 0.13)" : "rgba(255, 255, 255, 0.13)",
          "@media (hover: none)": {
            backgroundColor
          }
        },
        "&$focused": {
          backgroundColor: light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.09)"
        },
        "&$disabled": {
          backgroundColor: light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)"
        }
      },
      colorSecondary: {
        "&$underline:after": {
          borderBottomColor: theme2.palette.secondary.main
        }
      },
      underline: {
        "&:after": {
          borderBottom: "2px solid ".concat(theme2.palette.primary.main),
          left: 0,
          bottom: 0,
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: theme2.transitions.create("transform", {
            duration: theme2.transitions.duration.shorter,
            easing: theme2.transitions.easing.easeOut
          }),
          pointerEvents: "none"
        },
        "&$focused:after": {
          transform: "scaleX(1)"
        },
        "&$error:after": {
          borderBottomColor: theme2.palette.error.main,
          transform: "scaleX(1)"
        },
        "&:before": {
          borderBottom: "1px solid ".concat(bottomLineColor),
          left: 0,
          bottom: 0,
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: theme2.transitions.create("border-bottom-color", {
            duration: theme2.transitions.duration.shorter
          }),
          pointerEvents: "none"
        },
        "&:hover:before": {
          borderBottom: "1px solid ".concat(theme2.palette.text.primary)
        },
        "&$disabled:before": {
          borderBottomStyle: "dotted"
        }
      },
      focused: {},
      disabled: {},
      adornedStart: {
        paddingLeft: 12
      },
      adornedEnd: {
        paddingRight: 12
      },
      error: {},
      marginDense: {},
      multiline: {
        padding: "27px 12px 10px",
        "&$marginDense": {
          paddingTop: 23,
          paddingBottom: 6
        }
      },
      input: {
        padding: "27px 12px 10px",
        "&:-webkit-autofill": {
          WebkitBoxShadow: theme2.palette.type === "light" ? null : "0 0 0 100px #266798 inset",
          WebkitTextFillColor: theme2.palette.type === "light" ? null : "#fff",
          caretColor: theme2.palette.type === "light" ? null : "#fff",
          borderTopLeftRadius: "inherit",
          borderTopRightRadius: "inherit"
        }
      },
      inputMarginDense: {
        paddingTop: 23,
        paddingBottom: 6
      },
      inputHiddenLabel: {
        paddingTop: 18,
        paddingBottom: 19,
        "&$inputMarginDense": {
          paddingTop: 10,
          paddingBottom: 11
        }
      },
      inputMultiline: {
        padding: 0
      },
      inputAdornedStart: {
        paddingLeft: 0
      },
      inputAdornedEnd: {
        paddingRight: 0
      }
    };
  };
  var FilledInput = /* @__PURE__ */ React50.forwardRef(function FilledInput2(props, ref) {
    var disableUnderline = props.disableUnderline, classes = props.classes, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$inputComponent = props.inputComponent, inputComponent = _props$inputComponent === void 0 ? "input" : _props$inputComponent, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, _props$type = props.type, type = _props$type === void 0 ? "text" : _props$type, other = _objectWithoutProperties(props, ["disableUnderline", "classes", "fullWidth", "inputComponent", "multiline", "type"]);
    return /* @__PURE__ */ React50.createElement(InputBase_default, _extends({
      classes: _extends({}, classes, {
        root: clsx_m_default(classes.root, !disableUnderline && classes.underline),
        underline: null
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other));
  });
  true ? FilledInput.propTypes = {
    autoComplete: import_prop_types41.default.string,
    autoFocus: import_prop_types41.default.bool,
    classes: import_prop_types41.default.object,
    color: import_prop_types41.default.oneOf(["primary", "secondary"]),
    defaultValue: import_prop_types41.default.any,
    disabled: import_prop_types41.default.bool,
    disableUnderline: import_prop_types41.default.bool,
    endAdornment: import_prop_types41.default.node,
    error: import_prop_types41.default.bool,
    fullWidth: import_prop_types41.default.bool,
    id: import_prop_types41.default.string,
    inputComponent: import_prop_types41.default.elementType,
    inputProps: import_prop_types41.default.object,
    inputRef: refType_default,
    margin: import_prop_types41.default.oneOf(["dense", "none"]),
    maxRows: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    multiline: import_prop_types41.default.bool,
    name: import_prop_types41.default.string,
    onChange: import_prop_types41.default.func,
    placeholder: import_prop_types41.default.string,
    readOnly: import_prop_types41.default.bool,
    required: import_prop_types41.default.bool,
    rows: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    startAdornment: import_prop_types41.default.node,
    type: import_prop_types41.default.string,
    value: import_prop_types41.default.any
  } : void 0;
  FilledInput.muiName = "Input";
  var FilledInput_default = withStyles_default2(styles41, {
    name: "MuiFilledInput"
  })(FilledInput);

  // node_modules/@material-ui/core/esm/FormControl/FormControl.js
  var React51 = __toModule(require_react());
  var import_prop_types42 = __toModule(require_prop_types());
  var styles43 = {
    root: {
      display: "inline-flex",
      flexDirection: "column",
      position: "relative",
      minWidth: 0,
      padding: 0,
      margin: 0,
      border: 0,
      verticalAlign: "top"
    },
    marginNormal: {
      marginTop: 16,
      marginBottom: 8
    },
    marginDense: {
      marginTop: 8,
      marginBottom: 4
    },
    fullWidth: {
      width: "100%"
    }
  };
  var FormControl = /* @__PURE__ */ React51.forwardRef(function FormControl2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "primary" : _props$color, _props$component = props.component, Component5 = _props$component === void 0 ? "div" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$error = props.error, error = _props$error === void 0 ? false : _props$error, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, visuallyFocused = props.focused, _props$hiddenLabel = props.hiddenLabel, hiddenLabel = _props$hiddenLabel === void 0 ? false : _props$hiddenLabel, _props$margin = props.margin, margin = _props$margin === void 0 ? "none" : _props$margin, _props$required = props.required, required = _props$required === void 0 ? false : _props$required, size = props.size, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "error", "fullWidth", "focused", "hiddenLabel", "margin", "required", "size", "variant"]);
    var _React$useState = React51.useState(function() {
      var initialAdornedStart = false;
      if (children) {
        React51.Children.forEach(children, function(child) {
          if (!isMuiElement(child, ["Input", "Select"])) {
            return;
          }
          var input = isMuiElement(child, ["Select"]) ? child.props.input : child;
          if (input && isAdornedStart(input.props)) {
            initialAdornedStart = true;
          }
        });
      }
      return initialAdornedStart;
    }), adornedStart = _React$useState[0], setAdornedStart = _React$useState[1];
    var _React$useState2 = React51.useState(function() {
      var initialFilled = false;
      if (children) {
        React51.Children.forEach(children, function(child) {
          if (!isMuiElement(child, ["Input", "Select"])) {
            return;
          }
          if (isFilled(child.props, true)) {
            initialFilled = true;
          }
        });
      }
      return initialFilled;
    }), filled = _React$useState2[0], setFilled = _React$useState2[1];
    var _React$useState3 = React51.useState(false), _focused = _React$useState3[0], setFocused = _React$useState3[1];
    var focused = visuallyFocused !== void 0 ? visuallyFocused : _focused;
    if (disabled && focused) {
      setFocused(false);
    }
    var registerEffect;
    if (true) {
      var registeredInput = React51.useRef(false);
      registerEffect = function registerEffect2() {
        if (registeredInput.current) {
          console.error(["Material-UI: There are multiple InputBase components inside a FormControl.", "This is not supported. It might cause infinite rendering loops.", "Only use one InputBase."].join("\n"));
        }
        registeredInput.current = true;
        return function() {
          registeredInput.current = false;
        };
      };
    }
    var onFilled = React51.useCallback(function() {
      setFilled(true);
    }, []);
    var onEmpty = React51.useCallback(function() {
      setFilled(false);
    }, []);
    var childContext = {
      adornedStart,
      setAdornedStart,
      color: color2,
      disabled,
      error,
      filled,
      focused,
      fullWidth,
      hiddenLabel,
      margin: (size === "small" ? "dense" : void 0) || margin,
      onBlur: function onBlur() {
        setFocused(false);
      },
      onEmpty,
      onFilled,
      onFocus: function onFocus() {
        setFocused(true);
      },
      registerEffect,
      required,
      variant
    };
    return /* @__PURE__ */ React51.createElement(FormControlContext_default.Provider, {
      value: childContext
    }, /* @__PURE__ */ React51.createElement(Component5, _extends({
      className: clsx_m_default(classes.root, className, margin !== "none" && classes["margin".concat(capitalize(margin))], fullWidth && classes.fullWidth),
      ref
    }, other), children));
  });
  true ? FormControl.propTypes = {
    children: import_prop_types42.default.node,
    classes: import_prop_types42.default.object,
    className: import_prop_types42.default.string,
    color: import_prop_types42.default.oneOf(["primary", "secondary"]),
    component: import_prop_types42.default.elementType,
    disabled: import_prop_types42.default.bool,
    error: import_prop_types42.default.bool,
    focused: import_prop_types42.default.bool,
    fullWidth: import_prop_types42.default.bool,
    hiddenLabel: import_prop_types42.default.bool,
    margin: import_prop_types42.default.oneOf(["dense", "none", "normal"]),
    required: import_prop_types42.default.bool,
    size: import_prop_types42.default.oneOf(["medium", "small"]),
    variant: import_prop_types42.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var FormControl_default = withStyles_default2(styles43, {
    name: "MuiFormControl"
  })(FormControl);

  // node_modules/@material-ui/core/esm/FormHelperText/FormHelperText.js
  var React52 = __toModule(require_react());
  var import_prop_types43 = __toModule(require_prop_types());
  var styles44 = function styles45(theme2) {
    return {
      root: _extends({
        color: theme2.palette.text.secondary
      }, theme2.typography.caption, {
        textAlign: "left",
        marginTop: 3,
        margin: 0,
        "&$disabled": {
          color: theme2.palette.text.disabled
        },
        "&$error": {
          color: theme2.palette.error.main
        }
      }),
      error: {},
      disabled: {},
      marginDense: {
        marginTop: 4
      },
      contained: {
        marginLeft: 14,
        marginRight: 14
      },
      focused: {},
      filled: {},
      required: {}
    };
  };
  var FormHelperText = /* @__PURE__ */ React52.forwardRef(function FormHelperText2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component5 = _props$component === void 0 ? "p" : _props$component, disabled = props.disabled, error = props.error, filled = props.filled, focused = props.focused, margin = props.margin, required = props.required, variant = props.variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"]);
    var muiFormControl = useFormControl2();
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "margin", "disabled", "error", "filled", "focused", "required"]
    });
    return /* @__PURE__ */ React52.createElement(Component5, _extends({
      className: clsx_m_default(classes.root, (fcs.variant === "filled" || fcs.variant === "outlined") && classes.contained, className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required, fcs.margin === "dense" && classes.marginDense),
      ref
    }, other), children === " " ? /* @__PURE__ */ React52.createElement("span", {
      dangerouslySetInnerHTML: {
        __html: "&#8203;"
      }
    }) : children);
  });
  true ? FormHelperText.propTypes = {
    children: import_prop_types43.default.node,
    classes: import_prop_types43.default.object,
    className: import_prop_types43.default.string,
    component: import_prop_types43.default.elementType,
    disabled: import_prop_types43.default.bool,
    error: import_prop_types43.default.bool,
    filled: import_prop_types43.default.bool,
    focused: import_prop_types43.default.bool,
    margin: import_prop_types43.default.oneOf(["dense"]),
    required: import_prop_types43.default.bool,
    variant: import_prop_types43.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var FormHelperText_default = withStyles_default2(styles44, {
    name: "MuiFormHelperText"
  })(FormHelperText);

  // node_modules/@material-ui/core/esm/FormLabel/FormLabel.js
  var React53 = __toModule(require_react());
  var import_prop_types44 = __toModule(require_prop_types());
  var styles46 = function styles47(theme2) {
    return {
      root: _extends({
        color: theme2.palette.text.secondary
      }, theme2.typography.body1, {
        lineHeight: 1,
        padding: 0,
        "&$focused": {
          color: theme2.palette.primary.main
        },
        "&$disabled": {
          color: theme2.palette.text.disabled
        },
        "&$error": {
          color: theme2.palette.error.main
        }
      }),
      colorSecondary: {
        "&$focused": {
          color: theme2.palette.secondary.main
        }
      },
      focused: {},
      disabled: {},
      error: {},
      filled: {},
      required: {},
      asterisk: {
        "&$error": {
          color: theme2.palette.error.main
        }
      }
    };
  };
  var FormLabel = /* @__PURE__ */ React53.forwardRef(function FormLabel2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, color2 = props.color, _props$component = props.component, Component5 = _props$component === void 0 ? "label" : _props$component, disabled = props.disabled, error = props.error, filled = props.filled, focused = props.focused, required = props.required, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "error", "filled", "focused", "required"]);
    var muiFormControl = useFormControl2();
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "required", "focused", "disabled", "error", "filled"]
    });
    return /* @__PURE__ */ React53.createElement(Component5, _extends({
      className: clsx_m_default(classes.root, classes["color".concat(capitalize(fcs.color || "primary"))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required),
      ref
    }, other), children, fcs.required && /* @__PURE__ */ React53.createElement("span", {
      "aria-hidden": true,
      className: clsx_m_default(classes.asterisk, fcs.error && classes.error)
    }, "\u2009", "*"));
  });
  true ? FormLabel.propTypes = {
    children: import_prop_types44.default.node,
    classes: import_prop_types44.default.object,
    className: import_prop_types44.default.string,
    color: import_prop_types44.default.oneOf(["primary", "secondary"]),
    component: import_prop_types44.default.elementType,
    disabled: import_prop_types44.default.bool,
    error: import_prop_types44.default.bool,
    filled: import_prop_types44.default.bool,
    focused: import_prop_types44.default.bool,
    required: import_prop_types44.default.bool
  } : void 0;
  var FormLabel_default = withStyles_default2(styles46, {
    name: "MuiFormLabel"
  })(FormLabel);

  // node_modules/@material-ui/core/esm/Grid/Grid.js
  var React54 = __toModule(require_react());
  var import_prop_types45 = __toModule(require_prop_types());
  var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  function generateGrid(globalStyles, theme2, breakpoint) {
    var styles82 = {};
    GRID_SIZES.forEach(function(size) {
      var key = "grid-".concat(breakpoint, "-").concat(size);
      if (size === true) {
        styles82[key] = {
          flexBasis: 0,
          flexGrow: 1,
          maxWidth: "100%"
        };
        return;
      }
      if (size === "auto") {
        styles82[key] = {
          flexBasis: "auto",
          flexGrow: 0,
          maxWidth: "none"
        };
        return;
      }
      var width2 = "".concat(Math.round(size / 12 * 1e8) / 1e6, "%");
      styles82[key] = {
        flexBasis: width2,
        flexGrow: 0,
        maxWidth: width2
      };
    });
    if (breakpoint === "xs") {
      _extends(globalStyles, styles82);
    } else {
      globalStyles[theme2.breakpoints.up(breakpoint)] = styles82;
    }
  }
  function getOffset(val) {
    var div = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    var parse = parseFloat(val);
    return "".concat(parse / div).concat(String(val).replace(String(parse), "") || "px");
  }
  function generateGutter(theme2, breakpoint) {
    var styles82 = {};
    SPACINGS.forEach(function(spacing2) {
      var themeSpacing = theme2.spacing(spacing2);
      if (themeSpacing === 0) {
        return;
      }
      styles82["spacing-".concat(breakpoint, "-").concat(spacing2)] = {
        margin: "-".concat(getOffset(themeSpacing, 2)),
        width: "calc(100% + ".concat(getOffset(themeSpacing), ")"),
        "& > $item": {
          padding: getOffset(themeSpacing, 2)
        }
      };
    });
    return styles82;
  }
  var styles48 = function styles49(theme2) {
    return _extends({
      root: {},
      container: {
        boxSizing: "border-box",
        display: "flex",
        flexWrap: "wrap",
        width: "100%"
      },
      item: {
        boxSizing: "border-box",
        margin: "0"
      },
      zeroMinWidth: {
        minWidth: 0
      },
      "direction-xs-column": {
        flexDirection: "column"
      },
      "direction-xs-column-reverse": {
        flexDirection: "column-reverse"
      },
      "direction-xs-row-reverse": {
        flexDirection: "row-reverse"
      },
      "wrap-xs-nowrap": {
        flexWrap: "nowrap"
      },
      "wrap-xs-wrap-reverse": {
        flexWrap: "wrap-reverse"
      },
      "align-items-xs-center": {
        alignItems: "center"
      },
      "align-items-xs-flex-start": {
        alignItems: "flex-start"
      },
      "align-items-xs-flex-end": {
        alignItems: "flex-end"
      },
      "align-items-xs-baseline": {
        alignItems: "baseline"
      },
      "align-content-xs-center": {
        alignContent: "center"
      },
      "align-content-xs-flex-start": {
        alignContent: "flex-start"
      },
      "align-content-xs-flex-end": {
        alignContent: "flex-end"
      },
      "align-content-xs-space-between": {
        alignContent: "space-between"
      },
      "align-content-xs-space-around": {
        alignContent: "space-around"
      },
      "justify-content-xs-center": {
        justifyContent: "center"
      },
      "justify-content-xs-flex-end": {
        justifyContent: "flex-end"
      },
      "justify-content-xs-space-between": {
        justifyContent: "space-between"
      },
      "justify-content-xs-space-around": {
        justifyContent: "space-around"
      },
      "justify-content-xs-space-evenly": {
        justifyContent: "space-evenly"
      }
    }, generateGutter(theme2, "xs"), theme2.breakpoints.keys.reduce(function(accumulator, key) {
      generateGrid(accumulator, theme2, key);
      return accumulator;
    }, {}));
  };
  var Grid = /* @__PURE__ */ React54.forwardRef(function Grid2(props, ref) {
    var _props$alignContent = props.alignContent, alignContent2 = _props$alignContent === void 0 ? "stretch" : _props$alignContent, _props$alignItems = props.alignItems, alignItems2 = _props$alignItems === void 0 ? "stretch" : _props$alignItems, classes = props.classes, classNameProp = props.className, _props$component = props.component, Component5 = _props$component === void 0 ? "div" : _props$component, _props$container = props.container, container = _props$container === void 0 ? false : _props$container, _props$direction = props.direction, direction = _props$direction === void 0 ? "row" : _props$direction, _props$item = props.item, item = _props$item === void 0 ? false : _props$item, justify = props.justify, _props$justifyContent = props.justifyContent, justifyContent2 = _props$justifyContent === void 0 ? "flex-start" : _props$justifyContent, _props$lg = props.lg, lg = _props$lg === void 0 ? false : _props$lg, _props$md = props.md, md = _props$md === void 0 ? false : _props$md, _props$sm = props.sm, sm = _props$sm === void 0 ? false : _props$sm, _props$spacing = props.spacing, spacing2 = _props$spacing === void 0 ? 0 : _props$spacing, _props$wrap = props.wrap, wrap = _props$wrap === void 0 ? "wrap" : _props$wrap, _props$xl = props.xl, xl = _props$xl === void 0 ? false : _props$xl, _props$xs = props.xs, xs = _props$xs === void 0 ? false : _props$xs, _props$zeroMinWidth = props.zeroMinWidth, zeroMinWidth = _props$zeroMinWidth === void 0 ? false : _props$zeroMinWidth, other = _objectWithoutProperties(props, ["alignContent", "alignItems", "classes", "className", "component", "container", "direction", "item", "justify", "justifyContent", "lg", "md", "sm", "spacing", "wrap", "xl", "xs", "zeroMinWidth"]);
    var className = clsx_m_default(classes.root, classNameProp, container && [classes.container, spacing2 !== 0 && classes["spacing-xs-".concat(String(spacing2))]], item && classes.item, zeroMinWidth && classes.zeroMinWidth, direction !== "row" && classes["direction-xs-".concat(String(direction))], wrap !== "wrap" && classes["wrap-xs-".concat(String(wrap))], alignItems2 !== "stretch" && classes["align-items-xs-".concat(String(alignItems2))], alignContent2 !== "stretch" && classes["align-content-xs-".concat(String(alignContent2))], (justify || justifyContent2) !== "flex-start" && classes["justify-content-xs-".concat(String(justify || justifyContent2))], xs !== false && classes["grid-xs-".concat(String(xs))], sm !== false && classes["grid-sm-".concat(String(sm))], md !== false && classes["grid-md-".concat(String(md))], lg !== false && classes["grid-lg-".concat(String(lg))], xl !== false && classes["grid-xl-".concat(String(xl))]);
    return /* @__PURE__ */ React54.createElement(Component5, _extends({
      className,
      ref
    }, other));
  });
  true ? Grid.propTypes = {
    alignContent: import_prop_types45.default.oneOf(["stretch", "center", "flex-start", "flex-end", "space-between", "space-around"]),
    alignItems: import_prop_types45.default.oneOf(["flex-start", "center", "flex-end", "stretch", "baseline"]),
    children: import_prop_types45.default.node,
    classes: import_prop_types45.default.object.isRequired,
    className: import_prop_types45.default.string,
    component: import_prop_types45.default.elementType,
    container: import_prop_types45.default.bool,
    direction: import_prop_types45.default.oneOf(["row", "row-reverse", "column", "column-reverse"]),
    item: import_prop_types45.default.bool,
    justify: deprecatedPropType(import_prop_types45.default.oneOf(["flex-start", "center", "flex-end", "space-between", "space-around", "space-evenly"]), "Use `justifyContent` instead, the prop was renamed."),
    justifyContent: import_prop_types45.default.oneOf(["flex-start", "center", "flex-end", "space-between", "space-around", "space-evenly"]),
    lg: import_prop_types45.default.oneOf([false, "auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    md: import_prop_types45.default.oneOf([false, "auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    sm: import_prop_types45.default.oneOf([false, "auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    spacing: import_prop_types45.default.oneOf(SPACINGS),
    wrap: import_prop_types45.default.oneOf(["nowrap", "wrap", "wrap-reverse"]),
    xl: import_prop_types45.default.oneOf([false, "auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    xs: import_prop_types45.default.oneOf([false, "auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    zeroMinWidth: import_prop_types45.default.bool
  } : void 0;
  var StyledGrid = withStyles_default2(styles48, {
    name: "MuiGrid"
  })(Grid);
  if (true) {
    requireProp = requirePropFactory("Grid");
    StyledGrid.propTypes = _extends({}, StyledGrid.propTypes, {
      alignContent: requireProp("container"),
      alignItems: requireProp("container"),
      direction: requireProp("container"),
      justifyContent: requireProp("container"),
      lg: requireProp("item"),
      md: requireProp("item"),
      sm: requireProp("item"),
      spacing: requireProp("container"),
      wrap: requireProp("container"),
      xs: requireProp("item"),
      zeroMinWidth: requireProp("item")
    });
  }
  var requireProp;
  var Grid_default = StyledGrid;

  // node_modules/@material-ui/core/esm/Grow/Grow.js
  var React55 = __toModule(require_react());
  var import_prop_types46 = __toModule(require_prop_types());
  function getScale(value) {
    return "scale(".concat(value, ", ").concat(Math.pow(value, 2), ")");
  }
  var styles50 = {
    entering: {
      opacity: 1,
      transform: getScale(1)
    },
    entered: {
      opacity: 1,
      transform: "none"
    }
  };
  var Grow = /* @__PURE__ */ React55.forwardRef(function Grow2(props, ref) {
    var children = props.children, _props$disableStrictM = props.disableStrictModeCompat, disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style2 = props.style, _props$timeout = props.timeout, timeout2 = _props$timeout === void 0 ? "auto" : _props$timeout, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Transition_default : _props$TransitionComp, other = _objectWithoutProperties(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);
    var timer = React55.useRef();
    var autoTimeout = React55.useRef();
    var theme2 = useTheme2();
    var enableStrictModeCompat = theme2.unstable_strictMode && !disableStrictModeCompat;
    var nodeRef = React55.useRef(null);
    var foreignRef = useForkRef(children.ref, ref);
    var handleRef = useForkRef(enableStrictModeCompat ? nodeRef : void 0, foreignRef);
    var normalizedTransitionCallback = function normalizedTransitionCallback2(callback) {
      return function(nodeOrAppearing, maybeAppearing) {
        if (callback) {
          var _ref3 = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing], _ref22 = _slicedToArray(_ref3, 2), node = _ref22[0], isAppearing = _ref22[1];
          if (isAppearing === void 0) {
            callback(node);
          } else {
            callback(node, isAppearing);
          }
        }
      };
    };
    var handleEntering = normalizedTransitionCallback(onEntering);
    var handleEnter = normalizedTransitionCallback(function(node, isAppearing) {
      reflow(node);
      var _getTransitionProps = getTransitionProps({
        style: style2,
        timeout: timeout2
      }, {
        mode: "enter"
      }), transitionDuration = _getTransitionProps.duration, delay = _getTransitionProps.delay;
      var duration2;
      if (timeout2 === "auto") {
        duration2 = theme2.transitions.getAutoHeightDuration(node.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node.style.transition = [theme2.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme2.transitions.create("transform", {
        duration: duration2 * 0.666,
        delay
      })].join(",");
      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    var handleEntered = normalizedTransitionCallback(onEntered);
    var handleExiting = normalizedTransitionCallback(onExiting);
    var handleExit = normalizedTransitionCallback(function(node) {
      var _getTransitionProps2 = getTransitionProps({
        style: style2,
        timeout: timeout2
      }, {
        mode: "exit"
      }), transitionDuration = _getTransitionProps2.duration, delay = _getTransitionProps2.delay;
      var duration2;
      if (timeout2 === "auto") {
        duration2 = theme2.transitions.getAutoHeightDuration(node.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node.style.transition = [theme2.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme2.transitions.create("transform", {
        duration: duration2 * 0.666,
        delay: delay || duration2 * 0.333
      })].join(",");
      node.style.opacity = "0";
      node.style.transform = getScale(0.75);
      if (onExit) {
        onExit(node);
      }
    });
    var handleExited = normalizedTransitionCallback(onExited);
    var addEndListener = function addEndListener2(nodeOrNext, maybeNext) {
      var next = enableStrictModeCompat ? nodeOrNext : maybeNext;
      if (timeout2 === "auto") {
        timer.current = setTimeout(next, autoTimeout.current || 0);
      }
    };
    React55.useEffect(function() {
      return function() {
        clearTimeout(timer.current);
      };
    }, []);
    return /* @__PURE__ */ React55.createElement(TransitionComponent, _extends({
      appear: true,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener,
      timeout: timeout2 === "auto" ? null : timeout2
    }, other), function(state, childProps) {
      return /* @__PURE__ */ React55.cloneElement(children, _extends({
        style: _extends({
          opacity: 0,
          transform: getScale(0.75),
          visibility: state === "exited" && !inProp ? "hidden" : void 0
        }, styles50[state], style2, children.props.style),
        ref: handleRef
      }, childProps));
    });
  });
  true ? Grow.propTypes = {
    children: import_prop_types46.default.element,
    disableStrictModeCompat: import_prop_types46.default.bool,
    in: import_prop_types46.default.bool,
    onEnter: import_prop_types46.default.func,
    onEntered: import_prop_types46.default.func,
    onEntering: import_prop_types46.default.func,
    onExit: import_prop_types46.default.func,
    onExited: import_prop_types46.default.func,
    onExiting: import_prop_types46.default.func,
    style: import_prop_types46.default.object,
    timeout: import_prop_types46.default.oneOfType([import_prop_types46.default.oneOf(["auto"]), import_prop_types46.default.number, import_prop_types46.default.shape({
      appear: import_prop_types46.default.number,
      enter: import_prop_types46.default.number,
      exit: import_prop_types46.default.number
    })])
  } : void 0;
  Grow.muiSupportAuto = true;
  var Grow_default = Grow;

  // node_modules/@material-ui/core/esm/useMediaQuery/useMediaQuery.js
  var React56 = __toModule(require_react());
  function useMediaQuery(queryInput) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var theme2 = useTheme();
    var props = getThemeProps({
      theme: theme2,
      name: "MuiUseMediaQuery",
      props: {}
    });
    if (true) {
      if (typeof queryInput === "function" && theme2 === null) {
        console.error(["Material-UI: The `query` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join("\n"));
      }
    }
    var query = typeof queryInput === "function" ? queryInput(theme2) : queryInput;
    query = query.replace(/^@media( ?)/m, "");
    var supportMatchMedia = typeof window !== "undefined" && typeof window.matchMedia !== "undefined";
    var _props$options = _extends({}, props, options), _props$options$defaul = _props$options.defaultMatches, defaultMatches = _props$options$defaul === void 0 ? false : _props$options$defaul, _props$options$matchM = _props$options.matchMedia, matchMedia = _props$options$matchM === void 0 ? supportMatchMedia ? window.matchMedia : null : _props$options$matchM, _props$options$noSsr = _props$options.noSsr, noSsr = _props$options$noSsr === void 0 ? false : _props$options$noSsr, _props$options$ssrMat = _props$options.ssrMatchMedia, ssrMatchMedia = _props$options$ssrMat === void 0 ? null : _props$options$ssrMat;
    var _React$useState = React56.useState(function() {
      if (noSsr && supportMatchMedia) {
        return matchMedia(query).matches;
      }
      if (ssrMatchMedia) {
        return ssrMatchMedia(query).matches;
      }
      return defaultMatches;
    }), match = _React$useState[0], setMatch = _React$useState[1];
    React56.useEffect(function() {
      var active = true;
      if (!supportMatchMedia) {
        return void 0;
      }
      var queryList = matchMedia(query);
      var updateMatch = function updateMatch2() {
        if (active) {
          setMatch(queryList.matches);
        }
      };
      updateMatch();
      queryList.addListener(updateMatch);
      return function() {
        active = false;
        queryList.removeListener(updateMatch);
      };
    }, [query, matchMedia, supportMatchMedia]);
    if (true) {
      React56.useDebugValue({
        query,
        match
      });
    }
    return match;
  }

  // node_modules/@material-ui/core/esm/Icon/Icon.js
  var React57 = __toModule(require_react());
  var import_prop_types47 = __toModule(require_prop_types());
  var styles51 = function styles52(theme2) {
    return {
      root: {
        userSelect: "none",
        fontSize: theme2.typography.pxToRem(24),
        width: "1em",
        height: "1em",
        overflow: "hidden",
        flexShrink: 0
      },
      colorPrimary: {
        color: theme2.palette.primary.main
      },
      colorSecondary: {
        color: theme2.palette.secondary.main
      },
      colorAction: {
        color: theme2.palette.action.active
      },
      colorError: {
        color: theme2.palette.error.main
      },
      colorDisabled: {
        color: theme2.palette.action.disabled
      },
      fontSizeInherit: {
        fontSize: "inherit"
      },
      fontSizeSmall: {
        fontSize: theme2.typography.pxToRem(20)
      },
      fontSizeLarge: {
        fontSize: theme2.typography.pxToRem(36)
      }
    };
  };
  var Icon = /* @__PURE__ */ React57.forwardRef(function Icon2(props, ref) {
    var classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "inherit" : _props$color, _props$component = props.component, Component5 = _props$component === void 0 ? "span" : _props$component, _props$fontSize = props.fontSize, fontSize2 = _props$fontSize === void 0 ? "medium" : _props$fontSize, other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "fontSize"]);
    return /* @__PURE__ */ React57.createElement(Component5, _extends({
      className: clsx_m_default("material-icons", classes.root, className, color2 !== "inherit" && classes["color".concat(capitalize(color2))], fontSize2 !== "default" && fontSize2 !== "medium" && classes["fontSize".concat(capitalize(fontSize2))]),
      "aria-hidden": true,
      ref
    }, other));
  });
  true ? Icon.propTypes = {
    children: import_prop_types47.default.node,
    classes: import_prop_types47.default.object.isRequired,
    className: import_prop_types47.default.string,
    color: import_prop_types47.default.oneOf(["inherit", "primary", "secondary", "action", "error", "disabled"]),
    component: import_prop_types47.default.elementType,
    fontSize: chainPropTypes(import_prop_types47.default.oneOf(["default", "inherit", "large", "medium", "small"]), function(props) {
      var fontSize2 = props.fontSize;
      if (fontSize2 === "default") {
        throw new Error('Material-UI: `fontSize="default"` is deprecated. Use `fontSize="medium"` instead.');
      }
      return null;
    })
  } : void 0;
  Icon.muiName = "Icon";
  var Icon_default = withStyles_default2(styles51, {
    name: "MuiIcon"
  })(Icon);

  // node_modules/@material-ui/core/esm/Input/Input.js
  var React58 = __toModule(require_react());
  var import_prop_types48 = __toModule(require_prop_types());
  var styles53 = function styles54(theme2) {
    var light2 = theme2.palette.type === "light";
    var bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    return {
      root: {
        position: "relative"
      },
      formControl: {
        "label + &": {
          marginTop: 16
        }
      },
      focused: {},
      disabled: {},
      colorSecondary: {
        "&$underline:after": {
          borderBottomColor: theme2.palette.secondary.main
        }
      },
      underline: {
        "&:after": {
          borderBottom: "2px solid ".concat(theme2.palette.primary.main),
          left: 0,
          bottom: 0,
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: theme2.transitions.create("transform", {
            duration: theme2.transitions.duration.shorter,
            easing: theme2.transitions.easing.easeOut
          }),
          pointerEvents: "none"
        },
        "&$focused:after": {
          transform: "scaleX(1)"
        },
        "&$error:after": {
          borderBottomColor: theme2.palette.error.main,
          transform: "scaleX(1)"
        },
        "&:before": {
          borderBottom: "1px solid ".concat(bottomLineColor),
          left: 0,
          bottom: 0,
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: theme2.transitions.create("border-bottom-color", {
            duration: theme2.transitions.duration.shorter
          }),
          pointerEvents: "none"
        },
        "&:hover:not($disabled):before": {
          borderBottom: "2px solid ".concat(theme2.palette.text.primary),
          "@media (hover: none)": {
            borderBottom: "1px solid ".concat(bottomLineColor)
          }
        },
        "&$disabled:before": {
          borderBottomStyle: "dotted"
        }
      },
      error: {},
      marginDense: {},
      multiline: {},
      fullWidth: {},
      input: {},
      inputMarginDense: {},
      inputMultiline: {},
      inputTypeSearch: {}
    };
  };
  var Input = /* @__PURE__ */ React58.forwardRef(function Input2(props, ref) {
    var disableUnderline = props.disableUnderline, classes = props.classes, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$inputComponent = props.inputComponent, inputComponent = _props$inputComponent === void 0 ? "input" : _props$inputComponent, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, _props$type = props.type, type = _props$type === void 0 ? "text" : _props$type, other = _objectWithoutProperties(props, ["disableUnderline", "classes", "fullWidth", "inputComponent", "multiline", "type"]);
    return /* @__PURE__ */ React58.createElement(InputBase_default, _extends({
      classes: _extends({}, classes, {
        root: clsx_m_default(classes.root, !disableUnderline && classes.underline),
        underline: null
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other));
  });
  true ? Input.propTypes = {
    autoComplete: import_prop_types48.default.string,
    autoFocus: import_prop_types48.default.bool,
    classes: import_prop_types48.default.object,
    color: import_prop_types48.default.oneOf(["primary", "secondary"]),
    defaultValue: import_prop_types48.default.any,
    disabled: import_prop_types48.default.bool,
    disableUnderline: import_prop_types48.default.bool,
    endAdornment: import_prop_types48.default.node,
    error: import_prop_types48.default.bool,
    fullWidth: import_prop_types48.default.bool,
    id: import_prop_types48.default.string,
    inputComponent: import_prop_types48.default.elementType,
    inputProps: import_prop_types48.default.object,
    inputRef: refType_default,
    margin: import_prop_types48.default.oneOf(["dense", "none"]),
    maxRows: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    multiline: import_prop_types48.default.bool,
    name: import_prop_types48.default.string,
    onChange: import_prop_types48.default.func,
    placeholder: import_prop_types48.default.string,
    readOnly: import_prop_types48.default.bool,
    required: import_prop_types48.default.bool,
    rows: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]),
    startAdornment: import_prop_types48.default.node,
    type: import_prop_types48.default.string,
    value: import_prop_types48.default.any
  } : void 0;
  Input.muiName = "Input";
  var Input_default = withStyles_default2(styles53, {
    name: "MuiInput"
  })(Input);

  // node_modules/@material-ui/core/esm/InputAdornment/InputAdornment.js
  var React59 = __toModule(require_react());
  var import_prop_types49 = __toModule(require_prop_types());
  var styles55 = {
    root: {
      display: "flex",
      height: "0.01em",
      maxHeight: "2em",
      alignItems: "center",
      whiteSpace: "nowrap"
    },
    filled: {
      "&$positionStart:not($hiddenLabel)": {
        marginTop: 16
      }
    },
    positionStart: {
      marginRight: 8
    },
    positionEnd: {
      marginLeft: 8
    },
    disablePointerEvents: {
      pointerEvents: "none"
    },
    hiddenLabel: {},
    marginDense: {}
  };
  var InputAdornment = /* @__PURE__ */ React59.forwardRef(function InputAdornment2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component5 = _props$component === void 0 ? "div" : _props$component, _props$disablePointer = props.disablePointerEvents, disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer, _props$disableTypogra = props.disableTypography, disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra, position2 = props.position, variantProp = props.variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"]);
    var muiFormControl = useFormControl() || {};
    var variant = variantProp;
    if (variantProp && muiFormControl.variant) {
      if (true) {
        if (variantProp === muiFormControl.variant) {
          console.error("Material-UI: The `InputAdornment` variant infers the variant prop you do not have to provide one.");
        }
      }
    }
    if (muiFormControl && !variant) {
      variant = muiFormControl.variant;
    }
    return /* @__PURE__ */ React59.createElement(FormControlContext_default.Provider, {
      value: null
    }, /* @__PURE__ */ React59.createElement(Component5, _extends({
      className: clsx_m_default(classes.root, className, position2 === "end" ? classes.positionEnd : classes.positionStart, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === "filled" && classes.filled, muiFormControl.margin === "dense" && classes.marginDense),
      ref
    }, other), typeof children === "string" && !disableTypography ? /* @__PURE__ */ React59.createElement(Typography_default, {
      color: "textSecondary"
    }, children) : children));
  });
  true ? InputAdornment.propTypes = {
    children: import_prop_types49.default.node.isRequired,
    classes: import_prop_types49.default.object.isRequired,
    className: import_prop_types49.default.string,
    component: import_prop_types49.default.elementType,
    disablePointerEvents: import_prop_types49.default.bool,
    disableTypography: import_prop_types49.default.bool,
    muiFormControl: import_prop_types49.default.object,
    position: import_prop_types49.default.oneOf(["start", "end"]).isRequired,
    variant: import_prop_types49.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var InputAdornment_default = withStyles_default2(styles55, {
    name: "MuiInputAdornment"
  })(InputAdornment);

  // node_modules/@material-ui/core/esm/InputLabel/InputLabel.js
  var React60 = __toModule(require_react());
  var import_prop_types50 = __toModule(require_prop_types());
  var styles56 = function styles57(theme2) {
    return {
      root: {
        display: "block",
        transformOrigin: "top left"
      },
      focused: {},
      disabled: {},
      error: {},
      required: {},
      asterisk: {},
      formControl: {
        position: "absolute",
        left: 0,
        top: 0,
        transform: "translate(0, 24px) scale(1)"
      },
      marginDense: {
        transform: "translate(0, 21px) scale(1)"
      },
      shrink: {
        transform: "translate(0, 1.5px) scale(0.75)",
        transformOrigin: "top left"
      },
      animated: {
        transition: theme2.transitions.create(["color", "transform"], {
          duration: theme2.transitions.duration.shorter,
          easing: theme2.transitions.easing.easeOut
        })
      },
      filled: {
        zIndex: 1,
        pointerEvents: "none",
        transform: "translate(12px, 20px) scale(1)",
        "&$marginDense": {
          transform: "translate(12px, 17px) scale(1)"
        },
        "&$shrink": {
          transform: "translate(12px, 10px) scale(0.75)",
          "&$marginDense": {
            transform: "translate(12px, 7px) scale(0.75)"
          }
        }
      },
      outlined: {
        zIndex: 1,
        pointerEvents: "none",
        transform: "translate(14px, 20px) scale(1)",
        "&$marginDense": {
          transform: "translate(14px, 12px) scale(1)"
        },
        "&$shrink": {
          transform: "translate(14px, -6px) scale(0.75)"
        }
      }
    };
  };
  var InputLabel = /* @__PURE__ */ React60.forwardRef(function InputLabel2(props, ref) {
    var classes = props.classes, className = props.className, _props$disableAnimati = props.disableAnimation, disableAnimation = _props$disableAnimati === void 0 ? false : _props$disableAnimati, margin = props.margin, shrinkProp = props.shrink, variant = props.variant, other = _objectWithoutProperties(props, ["classes", "className", "disableAnimation", "margin", "shrink", "variant"]);
    var muiFormControl = useFormControl2();
    var shrink = shrinkProp;
    if (typeof shrink === "undefined" && muiFormControl) {
      shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    }
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["margin", "variant"]
    });
    return /* @__PURE__ */ React60.createElement(FormLabel_default, _extends({
      "data-shrink": shrink,
      className: clsx_m_default(classes.root, className, muiFormControl && classes.formControl, !disableAnimation && classes.animated, shrink && classes.shrink, fcs.margin === "dense" && classes.marginDense, {
        "filled": classes.filled,
        "outlined": classes.outlined
      }[fcs.variant]),
      classes: {
        focused: classes.focused,
        disabled: classes.disabled,
        error: classes.error,
        required: classes.required,
        asterisk: classes.asterisk
      },
      ref
    }, other));
  });
  true ? InputLabel.propTypes = {
    children: import_prop_types50.default.node,
    classes: import_prop_types50.default.object,
    className: import_prop_types50.default.string,
    color: import_prop_types50.default.oneOf(["primary", "secondary"]),
    disableAnimation: import_prop_types50.default.bool,
    disabled: import_prop_types50.default.bool,
    error: import_prop_types50.default.bool,
    focused: import_prop_types50.default.bool,
    margin: import_prop_types50.default.oneOf(["dense"]),
    required: import_prop_types50.default.bool,
    shrink: import_prop_types50.default.bool,
    variant: import_prop_types50.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var InputLabel_default = withStyles_default2(styles56, {
    name: "MuiInputLabel"
  })(InputLabel);

  // node_modules/@material-ui/core/esm/Link/Link.js
  var React61 = __toModule(require_react());
  var import_prop_types51 = __toModule(require_prop_types());
  var styles58 = {
    root: {},
    underlineNone: {
      textDecoration: "none"
    },
    underlineHover: {
      textDecoration: "none",
      "&:hover": {
        textDecoration: "underline"
      }
    },
    underlineAlways: {
      textDecoration: "underline"
    },
    button: {
      position: "relative",
      WebkitTapHighlightColor: "transparent",
      backgroundColor: "transparent",
      outline: 0,
      border: 0,
      margin: 0,
      borderRadius: 0,
      padding: 0,
      cursor: "pointer",
      userSelect: "none",
      verticalAlign: "middle",
      "-moz-appearance": "none",
      "-webkit-appearance": "none",
      "&::-moz-focus-inner": {
        borderStyle: "none"
      },
      "&$focusVisible": {
        outline: "auto"
      }
    },
    focusVisible: {}
  };
  var Link = /* @__PURE__ */ React61.forwardRef(function Link2(props, ref) {
    var classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "primary" : _props$color, _props$component = props.component, component = _props$component === void 0 ? "a" : _props$component, onBlur = props.onBlur, onFocus = props.onFocus, TypographyClasses = props.TypographyClasses, _props$underline = props.underline, underline = _props$underline === void 0 ? "hover" : _props$underline, _props$variant = props.variant, variant = _props$variant === void 0 ? "inherit" : _props$variant, other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "onBlur", "onFocus", "TypographyClasses", "underline", "variant"]);
    var _useIsFocusVisible = useIsFocusVisible(), isFocusVisible2 = _useIsFocusVisible.isFocusVisible, onBlurVisible = _useIsFocusVisible.onBlurVisible, focusVisibleRef = _useIsFocusVisible.ref;
    var _React$useState = React61.useState(false), focusVisible = _React$useState[0], setFocusVisible = _React$useState[1];
    var handlerRef = useForkRef(ref, focusVisibleRef);
    var handleBlur = function handleBlur2(event) {
      if (focusVisible) {
        onBlurVisible();
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    };
    var handleFocus = function handleFocus2(event) {
      if (isFocusVisible2(event)) {
        setFocusVisible(true);
      }
      if (onFocus) {
        onFocus(event);
      }
    };
    return /* @__PURE__ */ React61.createElement(Typography_default, _extends({
      className: clsx_m_default(classes.root, classes["underline".concat(capitalize(underline))], className, focusVisible && classes.focusVisible, component === "button" && classes.button),
      classes: TypographyClasses,
      color: color2,
      component,
      onBlur: handleBlur,
      onFocus: handleFocus,
      ref: handlerRef,
      variant
    }, other));
  });
  true ? Link.propTypes = {
    children: import_prop_types51.default.node.isRequired,
    classes: import_prop_types51.default.object.isRequired,
    className: import_prop_types51.default.string,
    color: import_prop_types51.default.oneOf(["initial", "inherit", "primary", "secondary", "textPrimary", "textSecondary", "error"]),
    component: elementTypeAcceptingRef_default,
    onBlur: import_prop_types51.default.func,
    onFocus: import_prop_types51.default.func,
    TypographyClasses: import_prop_types51.default.object,
    underline: import_prop_types51.default.oneOf(["none", "hover", "always"]),
    variant: import_prop_types51.default.string
  } : void 0;
  var Link_default = withStyles_default2(styles58, {
    name: "MuiLink"
  })(Link);

  // node_modules/@material-ui/core/esm/List/List.js
  var React63 = __toModule(require_react());
  var import_prop_types52 = __toModule(require_prop_types());

  // node_modules/@material-ui/core/esm/List/ListContext.js
  var React62 = __toModule(require_react());
  var ListContext = React62.createContext({});
  if (true) {
    ListContext.displayName = "ListContext";
  }
  var ListContext_default = ListContext;

  // node_modules/@material-ui/core/esm/List/List.js
  var styles59 = {
    root: {
      listStyle: "none",
      margin: 0,
      padding: 0,
      position: "relative"
    },
    padding: {
      paddingTop: 8,
      paddingBottom: 8
    },
    dense: {},
    subheader: {
      paddingTop: 0
    }
  };
  var List = /* @__PURE__ */ React63.forwardRef(function List2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component5 = _props$component === void 0 ? "ul" : _props$component, _props$dense = props.dense, dense = _props$dense === void 0 ? false : _props$dense, _props$disablePadding = props.disablePadding, disablePadding = _props$disablePadding === void 0 ? false : _props$disablePadding, subheader = props.subheader, other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "dense", "disablePadding", "subheader"]);
    var context = React63.useMemo(function() {
      return {
        dense
      };
    }, [dense]);
    return /* @__PURE__ */ React63.createElement(ListContext_default.Provider, {
      value: context
    }, /* @__PURE__ */ React63.createElement(Component5, _extends({
      className: clsx_m_default(classes.root, className, dense && classes.dense, !disablePadding && classes.padding, subheader && classes.subheader),
      ref
    }, other), subheader, children));
  });
  true ? List.propTypes = {
    children: import_prop_types52.default.node,
    classes: import_prop_types52.default.object.isRequired,
    className: import_prop_types52.default.string,
    component: import_prop_types52.default.elementType,
    dense: import_prop_types52.default.bool,
    disablePadding: import_prop_types52.default.bool,
    subheader: import_prop_types52.default.node
  } : void 0;
  var List_default = withStyles_default2(styles59, {
    name: "MuiList"
  })(List);

  // node_modules/@material-ui/core/esm/ListItem/ListItem.js
  var React64 = __toModule(require_react());
  var import_prop_types53 = __toModule(require_prop_types());
  var ReactDOM8 = __toModule(require_react_dom());
  var styles60 = function styles61(theme2) {
    return {
      root: {
        display: "flex",
        justifyContent: "flex-start",
        alignItems: "center",
        position: "relative",
        textDecoration: "none",
        width: "100%",
        boxSizing: "border-box",
        textAlign: "left",
        paddingTop: 8,
        paddingBottom: 8,
        "&$focusVisible": {
          backgroundColor: theme2.palette.action.selected
        },
        "&$selected, &$selected:hover": {
          backgroundColor: theme2.palette.action.selected
        },
        "&$disabled": {
          opacity: 0.5
        }
      },
      container: {
        position: "relative"
      },
      focusVisible: {},
      dense: {
        paddingTop: 4,
        paddingBottom: 4
      },
      alignItemsFlexStart: {
        alignItems: "flex-start"
      },
      disabled: {},
      divider: {
        borderBottom: "1px solid ".concat(theme2.palette.divider),
        backgroundClip: "padding-box"
      },
      gutters: {
        paddingLeft: 16,
        paddingRight: 16
      },
      button: {
        transition: theme2.transitions.create("background-color", {
          duration: theme2.transitions.duration.shortest
        }),
        "&:hover": {
          textDecoration: "none",
          backgroundColor: theme2.palette.action.hover,
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      secondaryAction: {
        paddingRight: 48
      },
      selected: {}
    };
  };
  var useEnhancedEffect6 = typeof window === "undefined" ? React64.useEffect : React64.useLayoutEffect;
  var ListItem = /* @__PURE__ */ React64.forwardRef(function ListItem2(props, ref) {
    var _props$alignItems = props.alignItems, alignItems2 = _props$alignItems === void 0 ? "center" : _props$alignItems, _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus, _props$button = props.button, button = _props$button === void 0 ? false : _props$button, childrenProp = props.children, classes = props.classes, className = props.className, componentProp = props.component, _props$ContainerCompo = props.ContainerComponent, ContainerComponent = _props$ContainerCompo === void 0 ? "li" : _props$ContainerCompo, _props$ContainerProps = props.ContainerProps;
    _props$ContainerProps = _props$ContainerProps === void 0 ? {} : _props$ContainerProps;
    var ContainerClassName = _props$ContainerProps.className, ContainerProps = _objectWithoutProperties(_props$ContainerProps, ["className"]), _props$dense = props.dense, dense = _props$dense === void 0 ? false : _props$dense, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, _props$divider = props.divider, divider = _props$divider === void 0 ? false : _props$divider, focusVisibleClassName = props.focusVisibleClassName, _props$selected = props.selected, selected = _props$selected === void 0 ? false : _props$selected, other = _objectWithoutProperties(props, ["alignItems", "autoFocus", "button", "children", "classes", "className", "component", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "divider", "focusVisibleClassName", "selected"]);
    var context = React64.useContext(ListContext_default);
    var childContext = {
      dense: dense || context.dense || false,
      alignItems: alignItems2
    };
    var listItemRef = React64.useRef(null);
    useEnhancedEffect6(function() {
      if (autoFocus) {
        if (listItemRef.current) {
          listItemRef.current.focus();
        } else if (true) {
          console.error("Material-UI: Unable to set focus to a ListItem whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    var children = React64.Children.toArray(childrenProp);
    var hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ["ListItemSecondaryAction"]);
    var handleOwnRef = React64.useCallback(function(instance) {
      listItemRef.current = ReactDOM8.findDOMNode(instance);
    }, []);
    var handleRef = useForkRef(handleOwnRef, ref);
    var componentProps = _extends({
      className: clsx_m_default(classes.root, className, childContext.dense && classes.dense, !disableGutters && classes.gutters, divider && classes.divider, disabled && classes.disabled, button && classes.button, alignItems2 !== "center" && classes.alignItemsFlexStart, hasSecondaryAction && classes.secondaryAction, selected && classes.selected),
      disabled
    }, other);
    var Component5 = componentProp || "li";
    if (button) {
      componentProps.component = componentProp || "div";
      componentProps.focusVisibleClassName = clsx_m_default(classes.focusVisible, focusVisibleClassName);
      Component5 = ButtonBase_default;
    }
    if (hasSecondaryAction) {
      Component5 = !componentProps.component && !componentProp ? "div" : Component5;
      if (ContainerComponent === "li") {
        if (Component5 === "li") {
          Component5 = "div";
        } else if (componentProps.component === "li") {
          componentProps.component = "div";
        }
      }
      return /* @__PURE__ */ React64.createElement(ListContext_default.Provider, {
        value: childContext
      }, /* @__PURE__ */ React64.createElement(ContainerComponent, _extends({
        className: clsx_m_default(classes.container, ContainerClassName),
        ref: handleRef
      }, ContainerProps), /* @__PURE__ */ React64.createElement(Component5, componentProps, children), children.pop()));
    }
    return /* @__PURE__ */ React64.createElement(ListContext_default.Provider, {
      value: childContext
    }, /* @__PURE__ */ React64.createElement(Component5, _extends({
      ref: handleRef
    }, componentProps), children));
  });
  true ? ListItem.propTypes = {
    alignItems: import_prop_types53.default.oneOf(["flex-start", "center"]),
    autoFocus: import_prop_types53.default.bool,
    button: import_prop_types53.default.bool,
    children: chainPropTypes(import_prop_types53.default.node, function(props) {
      var children = React64.Children.toArray(props.children);
      var secondaryActionIndex = -1;
      for (var i = children.length - 1; i >= 0; i -= 1) {
        var child = children[i];
        if (isMuiElement(child, ["ListItemSecondaryAction"])) {
          secondaryActionIndex = i;
          break;
        }
      }
      if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
        return new Error("Material-UI: You used an element after ListItemSecondaryAction. For ListItem to detect that it has a secondary action you must pass it as the last child to ListItem.");
      }
      return null;
    }),
    classes: import_prop_types53.default.object.isRequired,
    className: import_prop_types53.default.string,
    component: import_prop_types53.default.elementType,
    ContainerComponent: import_prop_types53.default.elementType,
    ContainerProps: import_prop_types53.default.object,
    dense: import_prop_types53.default.bool,
    disabled: import_prop_types53.default.bool,
    disableGutters: import_prop_types53.default.bool,
    divider: import_prop_types53.default.bool,
    focusVisibleClassName: import_prop_types53.default.string,
    selected: import_prop_types53.default.bool
  } : void 0;
  var ListItem_default = withStyles_default2(styles60, {
    name: "MuiListItem"
  })(ListItem);

  // node_modules/@material-ui/core/esm/ListItemAvatar/ListItemAvatar.js
  var React65 = __toModule(require_react());
  var import_prop_types54 = __toModule(require_prop_types());
  var styles62 = {
    root: {
      minWidth: 56,
      flexShrink: 0
    },
    alignItemsFlexStart: {
      marginTop: 8
    }
  };
  var ListItemAvatar = /* @__PURE__ */ React65.forwardRef(function ListItemAvatar2(props, ref) {
    var classes = props.classes, className = props.className, other = _objectWithoutProperties(props, ["classes", "className"]);
    var context = React65.useContext(ListContext_default);
    return /* @__PURE__ */ React65.createElement("div", _extends({
      className: clsx_m_default(classes.root, className, context.alignItems === "flex-start" && classes.alignItemsFlexStart),
      ref
    }, other));
  });
  true ? ListItemAvatar.propTypes = {
    children: import_prop_types54.default.element.isRequired,
    classes: import_prop_types54.default.object,
    className: import_prop_types54.default.string
  } : void 0;
  var ListItemAvatar_default = withStyles_default2(styles62, {
    name: "MuiListItemAvatar"
  })(ListItemAvatar);

  // node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js
  var React66 = __toModule(require_react());
  var import_prop_types55 = __toModule(require_prop_types());
  var styles63 = {
    root: {
      position: "absolute",
      right: 16,
      top: "50%",
      transform: "translateY(-50%)"
    }
  };
  var ListItemSecondaryAction = /* @__PURE__ */ React66.forwardRef(function ListItemSecondaryAction2(props, ref) {
    var classes = props.classes, className = props.className, other = _objectWithoutProperties(props, ["classes", "className"]);
    return /* @__PURE__ */ React66.createElement("div", _extends({
      className: clsx_m_default(classes.root, className),
      ref
    }, other));
  });
  true ? ListItemSecondaryAction.propTypes = {
    children: import_prop_types55.default.node,
    classes: import_prop_types55.default.object,
    className: import_prop_types55.default.string
  } : void 0;
  ListItemSecondaryAction.muiName = "ListItemSecondaryAction";
  var ListItemSecondaryAction_default = withStyles_default2(styles63, {
    name: "MuiListItemSecondaryAction"
  })(ListItemSecondaryAction);

  // node_modules/@material-ui/core/esm/ListItemText/ListItemText.js
  var React67 = __toModule(require_react());
  var import_prop_types56 = __toModule(require_prop_types());
  var styles64 = {
    root: {
      flex: "1 1 auto",
      minWidth: 0,
      marginTop: 4,
      marginBottom: 4
    },
    multiline: {
      marginTop: 6,
      marginBottom: 6
    },
    dense: {},
    inset: {
      paddingLeft: 56
    },
    primary: {},
    secondary: {}
  };
  var ListItemText = /* @__PURE__ */ React67.forwardRef(function ListItemText2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$disableTypogra = props.disableTypography, disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra, _props$inset = props.inset, inset = _props$inset === void 0 ? false : _props$inset, primaryProp = props.primary, primaryTypographyProps = props.primaryTypographyProps, secondaryProp = props.secondary, secondaryTypographyProps = props.secondaryTypographyProps, other = _objectWithoutProperties(props, ["children", "classes", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"]);
    var _React$useContext = React67.useContext(ListContext_default), dense = _React$useContext.dense;
    var primary = primaryProp != null ? primaryProp : children;
    if (primary != null && primary.type !== Typography_default && !disableTypography) {
      primary = /* @__PURE__ */ React67.createElement(Typography_default, _extends({
        variant: dense ? "body2" : "body1",
        className: classes.primary,
        component: "span",
        display: "block"
      }, primaryTypographyProps), primary);
    }
    var secondary = secondaryProp;
    if (secondary != null && secondary.type !== Typography_default && !disableTypography) {
      secondary = /* @__PURE__ */ React67.createElement(Typography_default, _extends({
        variant: "body2",
        className: classes.secondary,
        color: "textSecondary",
        display: "block"
      }, secondaryTypographyProps), secondary);
    }
    return /* @__PURE__ */ React67.createElement("div", _extends({
      className: clsx_m_default(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),
      ref
    }, other), primary, secondary);
  });
  true ? ListItemText.propTypes = {
    children: import_prop_types56.default.node,
    classes: import_prop_types56.default.object,
    className: import_prop_types56.default.string,
    disableTypography: import_prop_types56.default.bool,
    inset: import_prop_types56.default.bool,
    primary: import_prop_types56.default.node,
    primaryTypographyProps: import_prop_types56.default.object,
    secondary: import_prop_types56.default.node,
    secondaryTypographyProps: import_prop_types56.default.object
  } : void 0;
  var ListItemText_default = withStyles_default2(styles64, {
    name: "MuiListItemText"
  })(ListItemText);

  // node_modules/@material-ui/core/esm/Menu/Menu.js
  var React70 = __toModule(require_react());
  var import_react_is3 = __toModule(require_react_is2());
  var import_prop_types59 = __toModule(require_prop_types());

  // node_modules/@material-ui/core/esm/Popover/Popover.js
  var React68 = __toModule(require_react());
  var import_prop_types57 = __toModule(require_prop_types());
  var ReactDOM9 = __toModule(require_react_dom());
  function getOffsetTop(rect, vertical) {
    var offset2 = 0;
    if (typeof vertical === "number") {
      offset2 = vertical;
    } else if (vertical === "center") {
      offset2 = rect.height / 2;
    } else if (vertical === "bottom") {
      offset2 = rect.height;
    }
    return offset2;
  }
  function getOffsetLeft(rect, horizontal) {
    var offset2 = 0;
    if (typeof horizontal === "number") {
      offset2 = horizontal;
    } else if (horizontal === "center") {
      offset2 = rect.width / 2;
    } else if (horizontal === "right") {
      offset2 = rect.width;
    }
    return offset2;
  }
  function getTransformOriginValue(transformOrigin) {
    return [transformOrigin.horizontal, transformOrigin.vertical].map(function(n) {
      return typeof n === "number" ? "".concat(n, "px") : n;
    }).join(" ");
  }
  function getScrollParent(parent, child) {
    var element = child;
    var scrollTop = 0;
    while (element && element !== parent) {
      element = element.parentElement;
      scrollTop += element.scrollTop;
    }
    return scrollTop;
  }
  function getAnchorEl(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  var styles65 = {
    root: {},
    paper: {
      position: "absolute",
      overflowY: "auto",
      overflowX: "hidden",
      minWidth: 16,
      minHeight: 16,
      maxWidth: "calc(100% - 32px)",
      maxHeight: "calc(100% - 32px)",
      outline: 0
    }
  };
  var Popover = /* @__PURE__ */ React68.forwardRef(function Popover2(props, ref) {
    var action = props.action, anchorEl = props.anchorEl, _props$anchorOrigin = props.anchorOrigin, anchorOrigin = _props$anchorOrigin === void 0 ? {
      vertical: "top",
      horizontal: "left"
    } : _props$anchorOrigin, anchorPosition = props.anchorPosition, _props$anchorReferenc = props.anchorReference, anchorReference = _props$anchorReferenc === void 0 ? "anchorEl" : _props$anchorReferenc, children = props.children, classes = props.classes, className = props.className, containerProp = props.container, _props$elevation = props.elevation, elevation = _props$elevation === void 0 ? 8 : _props$elevation, getContentAnchorEl = props.getContentAnchorEl, _props$marginThreshol = props.marginThreshold, marginThreshold = _props$marginThreshol === void 0 ? 16 : _props$marginThreshol, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, open = props.open, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps, _props$transformOrigi = props.transformOrigin, transformOrigin = _props$transformOrigi === void 0 ? {
      vertical: "top",
      horizontal: "left"
    } : _props$transformOrigi, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Grow_default : _props$TransitionComp, _props$transitionDura = props.transitionDuration, transitionDurationProp = _props$transitionDura === void 0 ? "auto" : _props$transitionDura, _props$TransitionProp = props.TransitionProps, TransitionProps = _props$TransitionProp === void 0 ? {} : _props$TransitionProp, other = _objectWithoutProperties(props, ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "classes", "className", "container", "elevation", "getContentAnchorEl", "marginThreshold", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"]);
    var paperRef = React68.useRef();
    var getAnchorOffset = React68.useCallback(function(contentAnchorOffset) {
      if (anchorReference === "anchorPosition") {
        if (true) {
          if (!anchorPosition) {
            console.error('Material-UI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
          }
        }
        return anchorPosition;
      }
      var resolvedAnchorEl = getAnchorEl(anchorEl);
      var anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
      var anchorRect = anchorElement.getBoundingClientRect();
      if (true) {
        var box = anchorElement.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["Material-UI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
      var anchorVertical = contentAnchorOffset === 0 ? anchorOrigin.vertical : "center";
      return {
        top: anchorRect.top + getOffsetTop(anchorRect, anchorVertical),
        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
      };
    }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
    var getContentAnchorOffset = React68.useCallback(function(element) {
      var contentAnchorOffset = 0;
      if (getContentAnchorEl && anchorReference === "anchorEl") {
        var contentAnchorEl = getContentAnchorEl(element);
        if (contentAnchorEl && element.contains(contentAnchorEl)) {
          var scrollTop = getScrollParent(element, contentAnchorEl);
          contentAnchorOffset = contentAnchorEl.offsetTop + contentAnchorEl.clientHeight / 2 - scrollTop || 0;
        }
        if (true) {
          if (anchorOrigin.vertical !== "top") {
            console.error(["Material-UI: You can not change the default `anchorOrigin.vertical` value ", "when also providing the `getContentAnchorEl` prop to the popover component.", "Only use one of the two props.", "Set `getContentAnchorEl` to `null | undefined` or leave `anchorOrigin.vertical` unchanged."].join("\n"));
          }
        }
      }
      return contentAnchorOffset;
    }, [anchorOrigin.vertical, anchorReference, getContentAnchorEl]);
    var getTransformOrigin = React68.useCallback(function(elemRect) {
      var contentAnchorOffset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      return {
        vertical: getOffsetTop(elemRect, transformOrigin.vertical) + contentAnchorOffset,
        horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
      };
    }, [transformOrigin.horizontal, transformOrigin.vertical]);
    var getPositioningStyle = React68.useCallback(function(element) {
      var contentAnchorOffset = getContentAnchorOffset(element);
      var elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
      var elemTransformOrigin = getTransformOrigin(elemRect, contentAnchorOffset);
      if (anchorReference === "none") {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }
      var anchorOffset = getAnchorOffset(contentAnchorOffset);
      var top2 = anchorOffset.top - elemTransformOrigin.vertical;
      var left2 = anchorOffset.left - elemTransformOrigin.horizontal;
      var bottom2 = top2 + elemRect.height;
      var right2 = left2 + elemRect.width;
      var containerWindow = ownerWindow(getAnchorEl(anchorEl));
      var heightThreshold = containerWindow.innerHeight - marginThreshold;
      var widthThreshold = containerWindow.innerWidth - marginThreshold;
      if (top2 < marginThreshold) {
        var diff = top2 - marginThreshold;
        top2 -= diff;
        elemTransformOrigin.vertical += diff;
      } else if (bottom2 > heightThreshold) {
        var _diff = bottom2 - heightThreshold;
        top2 -= _diff;
        elemTransformOrigin.vertical += _diff;
      }
      if (true) {
        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
          console.error(["Material-UI: The popover component is too tall.", "Some part of it can not be seen on the screen (".concat(elemRect.height - heightThreshold, "px)."), "Please consider adding a `max-height` to improve the user-experience."].join("\n"));
        }
      }
      if (left2 < marginThreshold) {
        var _diff2 = left2 - marginThreshold;
        left2 -= _diff2;
        elemTransformOrigin.horizontal += _diff2;
      } else if (right2 > widthThreshold) {
        var _diff3 = right2 - widthThreshold;
        left2 -= _diff3;
        elemTransformOrigin.horizontal += _diff3;
      }
      return {
        top: "".concat(Math.round(top2), "px"),
        left: "".concat(Math.round(left2), "px"),
        transformOrigin: getTransformOriginValue(elemTransformOrigin)
      };
    }, [anchorEl, anchorReference, getAnchorOffset, getContentAnchorOffset, getTransformOrigin, marginThreshold]);
    var setPositioningStyles = React68.useCallback(function() {
      var element = paperRef.current;
      if (!element) {
        return;
      }
      var positioning = getPositioningStyle(element);
      if (positioning.top !== null) {
        element.style.top = positioning.top;
      }
      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }
      element.style.transformOrigin = positioning.transformOrigin;
    }, [getPositioningStyle]);
    var handleEntering = function handleEntering2(element, isAppearing) {
      if (onEntering) {
        onEntering(element, isAppearing);
      }
      setPositioningStyles();
    };
    var handlePaperRef = React68.useCallback(function(instance) {
      paperRef.current = ReactDOM9.findDOMNode(instance);
    }, []);
    React68.useEffect(function() {
      if (open) {
        setPositioningStyles();
      }
    });
    React68.useImperativeHandle(action, function() {
      return open ? {
        updatePosition: function updatePosition() {
          setPositioningStyles();
        }
      } : null;
    }, [open, setPositioningStyles]);
    React68.useEffect(function() {
      if (!open) {
        return void 0;
      }
      var handleResize = debounce(function() {
        setPositioningStyles();
      });
      window.addEventListener("resize", handleResize);
      return function() {
        handleResize.clear();
        window.removeEventListener("resize", handleResize);
      };
    }, [open, setPositioningStyles]);
    var transitionDuration = transitionDurationProp;
    if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
      transitionDuration = void 0;
    }
    var container = containerProp || (anchorEl ? ownerDocument(getAnchorEl(anchorEl)).body : void 0);
    return /* @__PURE__ */ React68.createElement(Modal_default, _extends({
      container,
      open,
      ref,
      BackdropProps: {
        invisible: true
      },
      className: clsx_m_default(classes.root, className)
    }, other), /* @__PURE__ */ React68.createElement(TransitionComponent, _extends({
      appear: true,
      in: open,
      onEnter,
      onEntered,
      onExit,
      onExited,
      onExiting,
      timeout: transitionDuration
    }, TransitionProps, {
      onEntering: createChainedFunction(handleEntering, TransitionProps.onEntering)
    }), /* @__PURE__ */ React68.createElement(Paper_default, _extends({
      elevation,
      ref: handlePaperRef
    }, PaperProps, {
      className: clsx_m_default(classes.paper, PaperProps.className)
    }), children)));
  });
  true ? Popover.propTypes = {
    action: refType_default,
    anchorEl: chainPropTypes(import_prop_types57.default.oneOfType([HTMLElementType, import_prop_types57.default.func]), function(props) {
      if (props.open && (!props.anchorReference || props.anchorReference === "anchorEl")) {
        var resolvedAnchorEl = getAnchorEl(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          var box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["Material-UI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else {
          return new Error(["Material-UI: The `anchorEl` prop provided to the component is invalid.", "It should be an Element instance but it's `".concat(resolvedAnchorEl, "` instead.")].join("\n"));
        }
      }
      return null;
    }),
    anchorOrigin: import_prop_types57.default.shape({
      horizontal: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["center", "left", "right"]), import_prop_types57.default.number]).isRequired,
      vertical: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["bottom", "center", "top"]), import_prop_types57.default.number]).isRequired
    }),
    anchorPosition: import_prop_types57.default.shape({
      left: import_prop_types57.default.number.isRequired,
      top: import_prop_types57.default.number.isRequired
    }),
    anchorReference: import_prop_types57.default.oneOf(["anchorEl", "anchorPosition", "none"]),
    children: import_prop_types57.default.node,
    classes: import_prop_types57.default.object,
    className: import_prop_types57.default.string,
    container: import_prop_types57.default.oneOfType([HTMLElementType, import_prop_types57.default.instanceOf(React68.Component), import_prop_types57.default.func]),
    elevation: import_prop_types57.default.number,
    getContentAnchorEl: import_prop_types57.default.func,
    marginThreshold: import_prop_types57.default.number,
    onClose: import_prop_types57.default.func,
    onEnter: deprecatedPropType(import_prop_types57.default.func, "Use the `TransitionProps` prop instead."),
    onEntered: deprecatedPropType(import_prop_types57.default.func, "Use the `TransitionProps` prop instead."),
    onEntering: deprecatedPropType(import_prop_types57.default.func, "Use the `TransitionProps` prop instead."),
    onExit: deprecatedPropType(import_prop_types57.default.func, "Use the `TransitionProps` prop instead."),
    onExited: deprecatedPropType(import_prop_types57.default.func, "Use the `TransitionProps` prop instead."),
    onExiting: deprecatedPropType(import_prop_types57.default.func, "Use the `TransitionProps` prop instead."),
    open: import_prop_types57.default.bool.isRequired,
    PaperProps: import_prop_types57.default.shape({
      component: elementTypeAcceptingRef_default
    }),
    transformOrigin: import_prop_types57.default.shape({
      horizontal: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["center", "left", "right"]), import_prop_types57.default.number]).isRequired,
      vertical: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["bottom", "center", "top"]), import_prop_types57.default.number]).isRequired
    }),
    TransitionComponent: import_prop_types57.default.elementType,
    transitionDuration: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["auto"]), import_prop_types57.default.number, import_prop_types57.default.shape({
      appear: import_prop_types57.default.number,
      enter: import_prop_types57.default.number,
      exit: import_prop_types57.default.number
    })]),
    TransitionProps: import_prop_types57.default.object
  } : void 0;
  var Popover_default = withStyles_default2(styles65, {
    name: "MuiPopover"
  })(Popover);

  // node_modules/@material-ui/core/esm/MenuList/MenuList.js
  var React69 = __toModule(require_react());
  var import_react_is2 = __toModule(require_react_is2());
  var import_prop_types58 = __toModule(require_prop_types());
  var ReactDOM10 = __toModule(require_react_dom());
  function nextItem(list, item, disableListWrap) {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return disableListWrap ? null : list.firstChild;
  }
  function previousItem(list, item, disableListWrap) {
    if (list === item) {
      return disableListWrap ? list.firstChild : list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return disableListWrap ? null : list.lastChild;
  }
  function textCriteriaMatches(nextFocus, textCriteria) {
    if (textCriteria === void 0) {
      return true;
    }
    var text = nextFocus.innerText;
    if (text === void 0) {
      text = nextFocus.textContent;
    }
    text = text.trim().toLowerCase();
    if (text.length === 0) {
      return false;
    }
    if (textCriteria.repeating) {
      return text[0] === textCriteria.keys[0];
    }
    return text.indexOf(textCriteria.keys.join("")) === 0;
  }
  function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    var wrappedOnce = false;
    var nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return;
        }
        wrappedOnce = true;
      }
      var nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
      } else {
        nextFocus.focus();
        return;
      }
    }
  }
  var useEnhancedEffect7 = typeof window === "undefined" ? React69.useEffect : React69.useLayoutEffect;
  var MenuList = /* @__PURE__ */ React69.forwardRef(function MenuList2(props, ref) {
    var actions = props.actions, _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus, _props$autoFocusItem = props.autoFocusItem, autoFocusItem = _props$autoFocusItem === void 0 ? false : _props$autoFocusItem, children = props.children, className = props.className, _props$disabledItemsF = props.disabledItemsFocusable, disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF, _props$disableListWra = props.disableListWrap, disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra, onKeyDown = props.onKeyDown, _props$variant = props.variant, variant = _props$variant === void 0 ? "selectedMenu" : _props$variant, other = _objectWithoutProperties(props, ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"]);
    var listRef = React69.useRef(null);
    var textCriteriaRef = React69.useRef({
      keys: [],
      repeating: true,
      previousKeyMatched: true,
      lastTime: null
    });
    useEnhancedEffect7(function() {
      if (autoFocus) {
        listRef.current.focus();
      }
    }, [autoFocus]);
    React69.useImperativeHandle(actions, function() {
      return {
        adjustStyleForScrollbar: function adjustStyleForScrollbar(containerElement, theme2) {
          var noExplicitWidth = !listRef.current.style.width;
          if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
            var scrollbarSize = "".concat(getScrollbarSize(true), "px");
            listRef.current.style[theme2.direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
            listRef.current.style.width = "calc(100% + ".concat(scrollbarSize, ")");
          }
          return listRef.current;
        }
      };
    }, []);
    var handleKeyDown2 = function handleKeyDown3(event) {
      var list = listRef.current;
      var key = event.key;
      var currentFocus = ownerDocument(list).activeElement;
      if (key === "ArrowDown") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "ArrowUp") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key === "Home") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "End") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key.length === 1) {
        var criteria = textCriteriaRef.current;
        var lowerKey = key.toLowerCase();
        var currTime = performance.now();
        if (criteria.keys.length > 0) {
          if (currTime - criteria.lastTime > 500) {
            criteria.keys = [];
            criteria.repeating = true;
            criteria.previousKeyMatched = true;
          } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
            criteria.repeating = false;
          }
        }
        criteria.lastTime = currTime;
        criteria.keys.push(lowerKey);
        var keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
        if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
          event.preventDefault();
        } else {
          criteria.previousKeyMatched = false;
        }
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    var handleOwnRef = React69.useCallback(function(instance) {
      listRef.current = ReactDOM10.findDOMNode(instance);
    }, []);
    var handleRef = useForkRef(handleOwnRef, ref);
    var activeItemIndex = -1;
    React69.Children.forEach(children, function(child, index) {
      if (!/* @__PURE__ */ React69.isValidElement(child)) {
        return;
      }
      if (true) {
        if ((0, import_react_is2.isFragment)(child)) {
          console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    var items = React69.Children.map(children, function(child, index) {
      if (index === activeItemIndex) {
        var newChildProps = {};
        if (autoFocusItem) {
          newChildProps.autoFocus = true;
        }
        if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
          newChildProps.tabIndex = 0;
        }
        return /* @__PURE__ */ React69.cloneElement(child, newChildProps);
      }
      return child;
    });
    return /* @__PURE__ */ React69.createElement(List_default, _extends({
      role: "menu",
      ref: handleRef,
      className,
      onKeyDown: handleKeyDown2,
      tabIndex: autoFocus ? 0 : -1
    }, other), items);
  });
  true ? MenuList.propTypes = {
    autoFocus: import_prop_types58.default.bool,
    autoFocusItem: import_prop_types58.default.bool,
    children: import_prop_types58.default.node,
    className: import_prop_types58.default.string,
    disabledItemsFocusable: import_prop_types58.default.bool,
    disableListWrap: import_prop_types58.default.bool,
    onKeyDown: import_prop_types58.default.func,
    variant: import_prop_types58.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var MenuList_default = MenuList;

  // node_modules/@material-ui/core/esm/Menu/Menu.js
  var ReactDOM11 = __toModule(require_react_dom());
  var RTL_ORIGIN = {
    vertical: "top",
    horizontal: "right"
  };
  var LTR_ORIGIN = {
    vertical: "top",
    horizontal: "left"
  };
  var styles66 = {
    paper: {
      maxHeight: "calc(100% - 96px)",
      WebkitOverflowScrolling: "touch"
    },
    list: {
      outline: 0
    }
  };
  var Menu = /* @__PURE__ */ React70.forwardRef(function Menu2(props, ref) {
    var _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus, children = props.children, classes = props.classes, _props$disableAutoFoc = props.disableAutoFocusItem, disableAutoFocusItem = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc, _props$MenuListProps = props.MenuListProps, MenuListProps = _props$MenuListProps === void 0 ? {} : _props$MenuListProps, onClose = props.onClose, onEnteringProp = props.onEntering, open = props.open, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps, PopoverClasses = props.PopoverClasses, _props$transitionDura = props.transitionDuration, transitionDuration = _props$transitionDura === void 0 ? "auto" : _props$transitionDura, _props$TransitionProp = props.TransitionProps;
    _props$TransitionProp = _props$TransitionProp === void 0 ? {} : _props$TransitionProp;
    var onEntering = _props$TransitionProp.onEntering, TransitionProps = _objectWithoutProperties(_props$TransitionProp, ["onEntering"]), _props$variant = props.variant, variant = _props$variant === void 0 ? "selectedMenu" : _props$variant, other = _objectWithoutProperties(props, ["autoFocus", "children", "classes", "disableAutoFocusItem", "MenuListProps", "onClose", "onEntering", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant"]);
    var theme2 = useTheme2();
    var autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    var menuListActionsRef = React70.useRef(null);
    var contentAnchorRef = React70.useRef(null);
    var getContentAnchorEl = function getContentAnchorEl2() {
      return contentAnchorRef.current;
    };
    var handleEntering = function handleEntering2(element, isAppearing) {
      if (menuListActionsRef.current) {
        menuListActionsRef.current.adjustStyleForScrollbar(element, theme2);
      }
      if (onEnteringProp) {
        onEnteringProp(element, isAppearing);
      }
      if (onEntering) {
        onEntering(element, isAppearing);
      }
    };
    var handleListKeyDown = function handleListKeyDown2(event) {
      if (event.key === "Tab") {
        event.preventDefault();
        if (onClose) {
          onClose(event, "tabKeyDown");
        }
      }
    };
    var activeItemIndex = -1;
    React70.Children.map(children, function(child, index) {
      if (!/* @__PURE__ */ React70.isValidElement(child)) {
        return;
      }
      if (true) {
        if ((0, import_react_is3.isFragment)(child)) {
          console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant !== "menu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    var items = React70.Children.map(children, function(child, index) {
      if (index === activeItemIndex) {
        return /* @__PURE__ */ React70.cloneElement(child, {
          ref: function ref2(instance) {
            contentAnchorRef.current = ReactDOM11.findDOMNode(instance);
            setRef(child.ref, instance);
          }
        });
      }
      return child;
    });
    return /* @__PURE__ */ React70.createElement(Popover_default, _extends({
      getContentAnchorEl,
      classes: PopoverClasses,
      onClose,
      TransitionProps: _extends({
        onEntering: handleEntering
      }, TransitionProps),
      anchorOrigin: theme2.direction === "rtl" ? RTL_ORIGIN : LTR_ORIGIN,
      transformOrigin: theme2.direction === "rtl" ? RTL_ORIGIN : LTR_ORIGIN,
      PaperProps: _extends({}, PaperProps, {
        classes: _extends({}, PaperProps.classes, {
          root: classes.paper
        })
      }),
      open,
      ref,
      transitionDuration
    }, other), /* @__PURE__ */ React70.createElement(MenuList_default, _extends({
      onKeyDown: handleListKeyDown,
      actions: menuListActionsRef,
      autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
      autoFocusItem,
      variant
    }, MenuListProps, {
      className: clsx_m_default(classes.list, MenuListProps.className)
    }), items));
  });
  true ? Menu.propTypes = {
    anchorEl: import_prop_types59.default.oneOfType([HTMLElementType, import_prop_types59.default.func]),
    autoFocus: import_prop_types59.default.bool,
    children: import_prop_types59.default.node,
    classes: import_prop_types59.default.object,
    disableAutoFocusItem: import_prop_types59.default.bool,
    MenuListProps: import_prop_types59.default.object,
    onClose: import_prop_types59.default.func,
    onEnter: deprecatedPropType(import_prop_types59.default.func, "Use the `TransitionProps` prop instead."),
    onEntered: deprecatedPropType(import_prop_types59.default.func, "Use the `TransitionProps` prop instead."),
    onEntering: deprecatedPropType(import_prop_types59.default.func, "Use the `TransitionProps` prop instead."),
    onExit: deprecatedPropType(import_prop_types59.default.func, "Use the `TransitionProps` prop instead."),
    onExited: deprecatedPropType(import_prop_types59.default.func, "Use the `TransitionProps` prop instead."),
    onExiting: deprecatedPropType(import_prop_types59.default.func, "Use the `TransitionProps` prop instead."),
    open: import_prop_types59.default.bool.isRequired,
    PaperProps: import_prop_types59.default.object,
    PopoverClasses: import_prop_types59.default.object,
    transitionDuration: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["auto"]), import_prop_types59.default.number, import_prop_types59.default.shape({
      appear: import_prop_types59.default.number,
      enter: import_prop_types59.default.number,
      exit: import_prop_types59.default.number
    })]),
    TransitionProps: import_prop_types59.default.object,
    variant: import_prop_types59.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var Menu_default = withStyles_default2(styles66, {
    name: "MuiMenu"
  })(Menu);

  // node_modules/@material-ui/core/esm/MenuItem/MenuItem.js
  var React71 = __toModule(require_react());
  var import_prop_types60 = __toModule(require_prop_types());
  var styles67 = function styles68(theme2) {
    return {
      root: _extends({}, theme2.typography.body1, _defineProperty2({
        minHeight: 48,
        paddingTop: 6,
        paddingBottom: 6,
        boxSizing: "border-box",
        width: "auto",
        overflow: "hidden",
        whiteSpace: "nowrap"
      }, theme2.breakpoints.up("sm"), {
        minHeight: "auto"
      })),
      gutters: {},
      selected: {},
      dense: _extends({}, theme2.typography.body2, {
        minHeight: "auto"
      })
    };
  };
  var MenuItem = /* @__PURE__ */ React71.forwardRef(function MenuItem2(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, component = _props$component === void 0 ? "li" : _props$component, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, ListItemClasses = props.ListItemClasses, _props$role = props.role, role = _props$role === void 0 ? "menuitem" : _props$role, selected = props.selected, tabIndexProp = props.tabIndex, other = _objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "ListItemClasses", "role", "selected", "tabIndex"]);
    var tabIndex;
    if (!props.disabled) {
      tabIndex = tabIndexProp !== void 0 ? tabIndexProp : -1;
    }
    return /* @__PURE__ */ React71.createElement(ListItem_default, _extends({
      button: true,
      role,
      tabIndex,
      component,
      selected,
      disableGutters,
      classes: _extends({
        dense: classes.dense
      }, ListItemClasses),
      className: clsx_m_default(classes.root, className, selected && classes.selected, !disableGutters && classes.gutters),
      ref
    }, other));
  });
  true ? MenuItem.propTypes = {
    children: import_prop_types60.default.node,
    classes: import_prop_types60.default.object.isRequired,
    className: import_prop_types60.default.string,
    component: import_prop_types60.default.elementType,
    dense: import_prop_types60.default.bool,
    disabled: import_prop_types60.default.bool,
    disableGutters: import_prop_types60.default.bool,
    ListItemClasses: import_prop_types60.default.object,
    role: import_prop_types60.default.string,
    selected: import_prop_types60.default.bool,
    tabIndex: import_prop_types60.default.number
  } : void 0;
  var MenuItem_default = withStyles_default2(styles67, {
    name: "MuiMenuItem"
  })(MenuItem);

  // node_modules/@material-ui/core/esm/NativeSelect/NativeSelect.js
  var React74 = __toModule(require_react());
  var import_prop_types62 = __toModule(require_prop_types());

  // node_modules/@material-ui/core/esm/NativeSelect/NativeSelectInput.js
  var React72 = __toModule(require_react());
  var import_prop_types61 = __toModule(require_prop_types());
  var NativeSelectInput = /* @__PURE__ */ React72.forwardRef(function NativeSelectInput2(props, ref) {
    var classes = props.classes, className = props.className, disabled = props.disabled, IconComponent = props.IconComponent, inputRef = props.inputRef, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["classes", "className", "disabled", "IconComponent", "inputRef", "variant"]);
    return /* @__PURE__ */ React72.createElement(React72.Fragment, null, /* @__PURE__ */ React72.createElement("select", _extends({
      className: clsx_m_default(classes.root, classes.select, classes[variant], className, disabled && classes.disabled),
      disabled,
      ref: inputRef || ref
    }, other)), props.multiple ? null : /* @__PURE__ */ React72.createElement(IconComponent, {
      className: clsx_m_default(classes.icon, classes["icon".concat(capitalize(variant))], disabled && classes.disabled)
    }));
  });
  true ? NativeSelectInput.propTypes = {
    children: import_prop_types61.default.node,
    classes: import_prop_types61.default.object.isRequired,
    className: import_prop_types61.default.string,
    disabled: import_prop_types61.default.bool,
    IconComponent: import_prop_types61.default.elementType.isRequired,
    inputRef: refType_default,
    multiple: import_prop_types61.default.bool,
    name: import_prop_types61.default.string,
    onChange: import_prop_types61.default.func,
    value: import_prop_types61.default.any,
    variant: import_prop_types61.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var NativeSelectInput_default = NativeSelectInput;

  // node_modules/@material-ui/core/esm/internal/svg-icons/ArrowDropDown.js
  var React73 = __toModule(require_react());
  var ArrowDropDown_default = createSvgIcon(/* @__PURE__ */ React73.createElement("path", {
    d: "M7 10l5 5 5-5z"
  }), "ArrowDropDown");

  // node_modules/@material-ui/core/esm/NativeSelect/NativeSelect.js
  var styles69 = function styles70(theme2) {
    return {
      root: {},
      select: {
        "-moz-appearance": "none",
        "-webkit-appearance": "none",
        userSelect: "none",
        borderRadius: 0,
        minWidth: 16,
        cursor: "pointer",
        "&:focus": {
          backgroundColor: theme2.palette.type === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)",
          borderRadius: 0
        },
        "&::-ms-expand": {
          display: "none"
        },
        "&$disabled": {
          cursor: "default"
        },
        "&[multiple]": {
          height: "auto"
        },
        "&:not([multiple]) option, &:not([multiple]) optgroup": {
          backgroundColor: theme2.palette.background.paper
        },
        "&&": {
          paddingRight: 24
        }
      },
      filled: {
        "&&": {
          paddingRight: 32
        }
      },
      outlined: {
        borderRadius: theme2.shape.borderRadius,
        "&&": {
          paddingRight: 32
        }
      },
      selectMenu: {
        height: "auto",
        minHeight: "1.1876em",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        overflow: "hidden"
      },
      disabled: {},
      icon: {
        position: "absolute",
        right: 0,
        top: "calc(50% - 12px)",
        pointerEvents: "none",
        color: theme2.palette.action.active,
        "&$disabled": {
          color: theme2.palette.action.disabled
        }
      },
      iconOpen: {
        transform: "rotate(180deg)"
      },
      iconFilled: {
        right: 7
      },
      iconOutlined: {
        right: 7
      },
      nativeInput: {
        bottom: 0,
        left: 0,
        position: "absolute",
        opacity: 0,
        pointerEvents: "none",
        width: "100%"
      }
    };
  };
  var defaultInput = /* @__PURE__ */ React74.createElement(Input_default, null);
  var NativeSelect = /* @__PURE__ */ React74.forwardRef(function NativeSelect2(props, ref) {
    var children = props.children, classes = props.classes, _props$IconComponent = props.IconComponent, IconComponent = _props$IconComponent === void 0 ? ArrowDropDown_default : _props$IconComponent, _props$input = props.input, input = _props$input === void 0 ? defaultInput : _props$input, inputProps = props.inputProps, variant = props.variant, other = _objectWithoutProperties(props, ["children", "classes", "IconComponent", "input", "inputProps", "variant"]);
    var muiFormControl = useFormControl2();
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant"]
    });
    return /* @__PURE__ */ React74.cloneElement(input, _extends({
      inputComponent: NativeSelectInput_default,
      inputProps: _extends({
        children,
        classes,
        IconComponent,
        variant: fcs.variant,
        type: void 0
      }, inputProps, input ? input.props.inputProps : {}),
      ref
    }, other));
  });
  true ? NativeSelect.propTypes = {
    children: import_prop_types62.default.node,
    classes: import_prop_types62.default.object,
    IconComponent: import_prop_types62.default.elementType,
    input: import_prop_types62.default.element,
    inputProps: import_prop_types62.default.object,
    onChange: import_prop_types62.default.func,
    value: import_prop_types62.default.any,
    variant: import_prop_types62.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  NativeSelect.muiName = "Select";
  var NativeSelect_default = withStyles_default2(styles69, {
    name: "MuiNativeSelect"
  })(NativeSelect);

  // node_modules/@material-ui/core/esm/OutlinedInput/OutlinedInput.js
  var React76 = __toModule(require_react());
  var import_prop_types64 = __toModule(require_prop_types());

  // node_modules/@material-ui/core/esm/OutlinedInput/NotchedOutline.js
  var React75 = __toModule(require_react());
  var import_prop_types63 = __toModule(require_prop_types());
  var styles71 = function styles72(theme2) {
    return {
      root: {
        position: "absolute",
        bottom: 0,
        right: 0,
        top: -5,
        left: 0,
        margin: 0,
        padding: "0 8px",
        pointerEvents: "none",
        borderRadius: "inherit",
        borderStyle: "solid",
        borderWidth: 1,
        overflow: "hidden"
      },
      legend: {
        textAlign: "left",
        padding: 0,
        lineHeight: "11px",
        transition: theme2.transitions.create("width", {
          duration: 150,
          easing: theme2.transitions.easing.easeOut
        })
      },
      legendLabelled: {
        display: "block",
        width: "auto",
        textAlign: "left",
        padding: 0,
        height: 11,
        fontSize: "0.75em",
        visibility: "hidden",
        maxWidth: 0.01,
        transition: theme2.transitions.create("max-width", {
          duration: 50,
          easing: theme2.transitions.easing.easeOut
        }),
        "& > span": {
          paddingLeft: 5,
          paddingRight: 5,
          display: "inline-block"
        }
      },
      legendNotched: {
        maxWidth: 1e3,
        transition: theme2.transitions.create("max-width", {
          duration: 100,
          easing: theme2.transitions.easing.easeOut,
          delay: 50
        })
      }
    };
  };
  var NotchedOutline = /* @__PURE__ */ React75.forwardRef(function NotchedOutline2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, label = props.label, labelWidthProp = props.labelWidth, notched = props.notched, style2 = props.style, other = _objectWithoutProperties(props, ["children", "classes", "className", "label", "labelWidth", "notched", "style"]);
    var theme2 = useTheme2();
    var align = theme2.direction === "rtl" ? "right" : "left";
    if (label !== void 0) {
      return /* @__PURE__ */ React75.createElement("fieldset", _extends({
        "aria-hidden": true,
        className: clsx_m_default(classes.root, className),
        ref,
        style: style2
      }, other), /* @__PURE__ */ React75.createElement("legend", {
        className: clsx_m_default(classes.legendLabelled, notched && classes.legendNotched)
      }, label ? /* @__PURE__ */ React75.createElement("span", null, label) : /* @__PURE__ */ React75.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: "&#8203;"
        }
      })));
    }
    var labelWidth = labelWidthProp > 0 ? labelWidthProp * 0.75 + 8 : 0.01;
    return /* @__PURE__ */ React75.createElement("fieldset", _extends({
      "aria-hidden": true,
      style: _extends(_defineProperty2({}, "padding".concat(capitalize(align)), 8), style2),
      className: clsx_m_default(classes.root, className),
      ref
    }, other), /* @__PURE__ */ React75.createElement("legend", {
      className: classes.legend,
      style: {
        width: notched ? labelWidth : 0.01
      }
    }, /* @__PURE__ */ React75.createElement("span", {
      dangerouslySetInnerHTML: {
        __html: "&#8203;"
      }
    })));
  });
  true ? NotchedOutline.propTypes = {
    children: import_prop_types63.default.node,
    classes: import_prop_types63.default.object,
    className: import_prop_types63.default.string,
    label: import_prop_types63.default.node,
    labelWidth: import_prop_types63.default.number.isRequired,
    notched: import_prop_types63.default.bool.isRequired,
    style: import_prop_types63.default.object
  } : void 0;
  var NotchedOutline_default = withStyles_default2(styles71, {
    name: "PrivateNotchedOutline"
  })(NotchedOutline);

  // node_modules/@material-ui/core/esm/OutlinedInput/OutlinedInput.js
  var styles73 = function styles74(theme2) {
    var borderColor2 = theme2.palette.type === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return {
      root: {
        position: "relative",
        borderRadius: theme2.shape.borderRadius,
        "&:hover $notchedOutline": {
          borderColor: theme2.palette.text.primary
        },
        "@media (hover: none)": {
          "&:hover $notchedOutline": {
            borderColor: borderColor2
          }
        },
        "&$focused $notchedOutline": {
          borderColor: theme2.palette.primary.main,
          borderWidth: 2
        },
        "&$error $notchedOutline": {
          borderColor: theme2.palette.error.main
        },
        "&$disabled $notchedOutline": {
          borderColor: theme2.palette.action.disabled
        }
      },
      colorSecondary: {
        "&$focused $notchedOutline": {
          borderColor: theme2.palette.secondary.main
        }
      },
      focused: {},
      disabled: {},
      adornedStart: {
        paddingLeft: 14
      },
      adornedEnd: {
        paddingRight: 14
      },
      error: {},
      marginDense: {},
      multiline: {
        padding: "18.5px 14px",
        "&$marginDense": {
          paddingTop: 10.5,
          paddingBottom: 10.5
        }
      },
      notchedOutline: {
        borderColor: borderColor2
      },
      input: {
        padding: "18.5px 14px",
        "&:-webkit-autofill": {
          WebkitBoxShadow: theme2.palette.type === "light" ? null : "0 0 0 100px #266798 inset",
          WebkitTextFillColor: theme2.palette.type === "light" ? null : "#fff",
          caretColor: theme2.palette.type === "light" ? null : "#fff",
          borderRadius: "inherit"
        }
      },
      inputMarginDense: {
        paddingTop: 10.5,
        paddingBottom: 10.5
      },
      inputMultiline: {
        padding: 0
      },
      inputAdornedStart: {
        paddingLeft: 0
      },
      inputAdornedEnd: {
        paddingRight: 0
      }
    };
  };
  var OutlinedInput = /* @__PURE__ */ React76.forwardRef(function OutlinedInput2(props, ref) {
    var classes = props.classes, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$inputComponent = props.inputComponent, inputComponent = _props$inputComponent === void 0 ? "input" : _props$inputComponent, label = props.label, _props$labelWidth = props.labelWidth, labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, notched = props.notched, _props$type = props.type, type = _props$type === void 0 ? "text" : _props$type, other = _objectWithoutProperties(props, ["classes", "fullWidth", "inputComponent", "label", "labelWidth", "multiline", "notched", "type"]);
    return /* @__PURE__ */ React76.createElement(InputBase_default, _extends({
      renderSuffix: function renderSuffix(state) {
        return /* @__PURE__ */ React76.createElement(NotchedOutline_default, {
          className: classes.notchedOutline,
          label,
          labelWidth,
          notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
        });
      },
      classes: _extends({}, classes, {
        root: clsx_m_default(classes.root, classes.underline),
        notchedOutline: null
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other));
  });
  true ? OutlinedInput.propTypes = {
    autoComplete: import_prop_types64.default.string,
    autoFocus: import_prop_types64.default.bool,
    classes: import_prop_types64.default.object,
    color: import_prop_types64.default.oneOf(["primary", "secondary"]),
    defaultValue: import_prop_types64.default.any,
    disabled: import_prop_types64.default.bool,
    endAdornment: import_prop_types64.default.node,
    error: import_prop_types64.default.bool,
    fullWidth: import_prop_types64.default.bool,
    id: import_prop_types64.default.string,
    inputComponent: import_prop_types64.default.elementType,
    inputProps: import_prop_types64.default.object,
    inputRef: refType_default,
    label: import_prop_types64.default.node,
    labelWidth: import_prop_types64.default.number,
    margin: import_prop_types64.default.oneOf(["dense", "none"]),
    maxRows: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    multiline: import_prop_types64.default.bool,
    name: import_prop_types64.default.string,
    notched: import_prop_types64.default.bool,
    onChange: import_prop_types64.default.func,
    placeholder: import_prop_types64.default.string,
    readOnly: import_prop_types64.default.bool,
    required: import_prop_types64.default.bool,
    rows: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    startAdornment: import_prop_types64.default.node,
    type: import_prop_types64.default.string,
    value: import_prop_types64.default.any
  } : void 0;
  OutlinedInput.muiName = "Input";
  var OutlinedInput_default = withStyles_default2(styles73, {
    name: "MuiOutlinedInput"
  })(OutlinedInput);

  // node_modules/@material-ui/core/esm/Popper/Popper.js
  var React77 = __toModule(require_react());
  var import_prop_types65 = __toModule(require_prop_types());

  // node_modules/@material-ui/core/node_modules/popper.js/dist/esm/popper.js
  var isBrowser2 = typeof window !== "undefined" && typeof document !== "undefined" && typeof navigator !== "undefined";
  var timeoutDuration = function() {
    var longerTimeoutBrowsers = ["Edge", "Trident", "Firefox"];
    for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
      if (isBrowser2 && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
        return 1;
      }
    }
    return 0;
  }();
  function microtaskDebounce(fn) {
    var called = false;
    return function() {
      if (called) {
        return;
      }
      called = true;
      window.Promise.resolve().then(function() {
        called = false;
        fn();
      });
    };
  }
  function taskDebounce(fn) {
    var scheduled = false;
    return function() {
      if (!scheduled) {
        scheduled = true;
        setTimeout(function() {
          scheduled = false;
          fn();
        }, timeoutDuration);
      }
    };
  }
  var supportsMicroTasks = isBrowser2 && window.Promise;
  var debounce2 = supportsMicroTasks ? microtaskDebounce : taskDebounce;
  function isFunction(functionToCheck) {
    var getType = {};
    return functionToCheck && getType.toString.call(functionToCheck) === "[object Function]";
  }
  function getStyleComputedProperty(element, property) {
    if (element.nodeType !== 1) {
      return [];
    }
    var window2 = element.ownerDocument.defaultView;
    var css2 = window2.getComputedStyle(element, null);
    return property ? css2[property] : css2;
  }
  function getParentNode(element) {
    if (element.nodeName === "HTML") {
      return element;
    }
    return element.parentNode || element.host;
  }
  function getScrollParent2(element) {
    if (!element) {
      return document.body;
    }
    switch (element.nodeName) {
      case "HTML":
      case "BODY":
        return element.ownerDocument.body;
      case "#document":
        return element.body;
    }
    var _getStyleComputedProp = getStyleComputedProperty(element), overflow2 = _getStyleComputedProp.overflow, overflowX = _getStyleComputedProp.overflowX, overflowY = _getStyleComputedProp.overflowY;
    if (/(auto|scroll|overlay)/.test(overflow2 + overflowY + overflowX)) {
      return element;
    }
    return getScrollParent2(getParentNode(element));
  }
  function getReferenceNode(reference) {
    return reference && reference.referenceNode ? reference.referenceNode : reference;
  }
  var isIE11 = isBrowser2 && !!(window.MSInputMethodContext && document.documentMode);
  var isIE10 = isBrowser2 && /MSIE 10/.test(navigator.userAgent);
  function isIE(version) {
    if (version === 11) {
      return isIE11;
    }
    if (version === 10) {
      return isIE10;
    }
    return isIE11 || isIE10;
  }
  function getOffsetParent(element) {
    if (!element) {
      return document.documentElement;
    }
    var noOffsetParent = isIE(10) ? document.body : null;
    var offsetParent = element.offsetParent || null;
    while (offsetParent === noOffsetParent && element.nextElementSibling) {
      offsetParent = (element = element.nextElementSibling).offsetParent;
    }
    var nodeName = offsetParent && offsetParent.nodeName;
    if (!nodeName || nodeName === "BODY" || nodeName === "HTML") {
      return element ? element.ownerDocument.documentElement : document.documentElement;
    }
    if (["TH", "TD", "TABLE"].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, "position") === "static") {
      return getOffsetParent(offsetParent);
    }
    return offsetParent;
  }
  function isOffsetContainer(element) {
    var nodeName = element.nodeName;
    if (nodeName === "BODY") {
      return false;
    }
    return nodeName === "HTML" || getOffsetParent(element.firstElementChild) === element;
  }
  function getRoot(node) {
    if (node.parentNode !== null) {
      return getRoot(node.parentNode);
    }
    return node;
  }
  function findCommonOffsetParent(element1, element2) {
    if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
      return document.documentElement;
    }
    var order2 = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
    var start = order2 ? element1 : element2;
    var end = order2 ? element2 : element1;
    var range = document.createRange();
    range.setStart(start, 0);
    range.setEnd(end, 0);
    var commonAncestorContainer = range.commonAncestorContainer;
    if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
      if (isOffsetContainer(commonAncestorContainer)) {
        return commonAncestorContainer;
      }
      return getOffsetParent(commonAncestorContainer);
    }
    var element1root = getRoot(element1);
    if (element1root.host) {
      return findCommonOffsetParent(element1root.host, element2);
    } else {
      return findCommonOffsetParent(element1, getRoot(element2).host);
    }
  }
  function getScroll(element) {
    var side = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "top";
    var upperSide = side === "top" ? "scrollTop" : "scrollLeft";
    var nodeName = element.nodeName;
    if (nodeName === "BODY" || nodeName === "HTML") {
      var html2 = element.ownerDocument.documentElement;
      var scrollingElement = element.ownerDocument.scrollingElement || html2;
      return scrollingElement[upperSide];
    }
    return element[upperSide];
  }
  function includeScroll(rect, element) {
    var subtract = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var scrollTop = getScroll(element, "top");
    var scrollLeft = getScroll(element, "left");
    var modifier = subtract ? -1 : 1;
    rect.top += scrollTop * modifier;
    rect.bottom += scrollTop * modifier;
    rect.left += scrollLeft * modifier;
    rect.right += scrollLeft * modifier;
    return rect;
  }
  function getBordersSize(styles82, axis) {
    var sideA = axis === "x" ? "Left" : "Top";
    var sideB = sideA === "Left" ? "Right" : "Bottom";
    return parseFloat(styles82["border" + sideA + "Width"]) + parseFloat(styles82["border" + sideB + "Width"]);
  }
  function getSize(axis, body3, html2, computedStyle) {
    return Math.max(body3["offset" + axis], body3["scroll" + axis], html2["client" + axis], html2["offset" + axis], html2["scroll" + axis], isIE(10) ? parseInt(html2["offset" + axis]) + parseInt(computedStyle["margin" + (axis === "Height" ? "Top" : "Left")]) + parseInt(computedStyle["margin" + (axis === "Height" ? "Bottom" : "Right")]) : 0);
  }
  function getWindowSizes(document2) {
    var body3 = document2.body;
    var html2 = document2.documentElement;
    var computedStyle = isIE(10) && getComputedStyle(html2);
    return {
      height: getSize("Height", body3, html2, computedStyle),
      width: getSize("Width", body3, html2, computedStyle)
    };
  }
  var classCallCheck = function(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };
  var createClass = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  var defineProperty = function(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  };
  var _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  function getClientRect(offsets) {
    return _extends2({}, offsets, {
      right: offsets.left + offsets.width,
      bottom: offsets.top + offsets.height
    });
  }
  function getBoundingClientRect(element) {
    var rect = {};
    try {
      if (isIE(10)) {
        rect = element.getBoundingClientRect();
        var scrollTop = getScroll(element, "top");
        var scrollLeft = getScroll(element, "left");
        rect.top += scrollTop;
        rect.left += scrollLeft;
        rect.bottom += scrollTop;
        rect.right += scrollLeft;
      } else {
        rect = element.getBoundingClientRect();
      }
    } catch (e) {
    }
    var result = {
      left: rect.left,
      top: rect.top,
      width: rect.right - rect.left,
      height: rect.bottom - rect.top
    };
    var sizes = element.nodeName === "HTML" ? getWindowSizes(element.ownerDocument) : {};
    var width2 = sizes.width || element.clientWidth || result.width;
    var height2 = sizes.height || element.clientHeight || result.height;
    var horizScrollbar = element.offsetWidth - width2;
    var vertScrollbar = element.offsetHeight - height2;
    if (horizScrollbar || vertScrollbar) {
      var styles82 = getStyleComputedProperty(element);
      horizScrollbar -= getBordersSize(styles82, "x");
      vertScrollbar -= getBordersSize(styles82, "y");
      result.width -= horizScrollbar;
      result.height -= vertScrollbar;
    }
    return getClientRect(result);
  }
  function getOffsetRectRelativeToArbitraryNode(children, parent) {
    var fixedPosition = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var isIE102 = isIE(10);
    var isHTML = parent.nodeName === "HTML";
    var childrenRect = getBoundingClientRect(children);
    var parentRect = getBoundingClientRect(parent);
    var scrollParent = getScrollParent2(children);
    var styles82 = getStyleComputedProperty(parent);
    var borderTopWidth = parseFloat(styles82.borderTopWidth);
    var borderLeftWidth = parseFloat(styles82.borderLeftWidth);
    if (fixedPosition && isHTML) {
      parentRect.top = Math.max(parentRect.top, 0);
      parentRect.left = Math.max(parentRect.left, 0);
    }
    var offsets = getClientRect({
      top: childrenRect.top - parentRect.top - borderTopWidth,
      left: childrenRect.left - parentRect.left - borderLeftWidth,
      width: childrenRect.width,
      height: childrenRect.height
    });
    offsets.marginTop = 0;
    offsets.marginLeft = 0;
    if (!isIE102 && isHTML) {
      var marginTop = parseFloat(styles82.marginTop);
      var marginLeft = parseFloat(styles82.marginLeft);
      offsets.top -= borderTopWidth - marginTop;
      offsets.bottom -= borderTopWidth - marginTop;
      offsets.left -= borderLeftWidth - marginLeft;
      offsets.right -= borderLeftWidth - marginLeft;
      offsets.marginTop = marginTop;
      offsets.marginLeft = marginLeft;
    }
    if (isIE102 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== "BODY") {
      offsets = includeScroll(offsets, parent);
    }
    return offsets;
  }
  function getViewportOffsetRectRelativeToArtbitraryNode(element) {
    var excludeScroll = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var html2 = element.ownerDocument.documentElement;
    var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html2);
    var width2 = Math.max(html2.clientWidth, window.innerWidth || 0);
    var height2 = Math.max(html2.clientHeight, window.innerHeight || 0);
    var scrollTop = !excludeScroll ? getScroll(html2) : 0;
    var scrollLeft = !excludeScroll ? getScroll(html2, "left") : 0;
    var offset2 = {
      top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
      left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
      width: width2,
      height: height2
    };
    return getClientRect(offset2);
  }
  function isFixed(element) {
    var nodeName = element.nodeName;
    if (nodeName === "BODY" || nodeName === "HTML") {
      return false;
    }
    if (getStyleComputedProperty(element, "position") === "fixed") {
      return true;
    }
    var parentNode = getParentNode(element);
    if (!parentNode) {
      return false;
    }
    return isFixed(parentNode);
  }
  function getFixedPositionOffsetParent(element) {
    if (!element || !element.parentElement || isIE()) {
      return document.documentElement;
    }
    var el2 = element.parentElement;
    while (el2 && getStyleComputedProperty(el2, "transform") === "none") {
      el2 = el2.parentElement;
    }
    return el2 || document.documentElement;
  }
  function getBoundaries(popper, reference, padding, boundariesElement) {
    var fixedPosition = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
    var boundaries = { top: 0, left: 0 };
    var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
    if (boundariesElement === "viewport") {
      boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
    } else {
      var boundariesNode = void 0;
      if (boundariesElement === "scrollParent") {
        boundariesNode = getScrollParent2(getParentNode(reference));
        if (boundariesNode.nodeName === "BODY") {
          boundariesNode = popper.ownerDocument.documentElement;
        }
      } else if (boundariesElement === "window") {
        boundariesNode = popper.ownerDocument.documentElement;
      } else {
        boundariesNode = boundariesElement;
      }
      var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);
      if (boundariesNode.nodeName === "HTML" && !isFixed(offsetParent)) {
        var _getWindowSizes = getWindowSizes(popper.ownerDocument), height2 = _getWindowSizes.height, width2 = _getWindowSizes.width;
        boundaries.top += offsets.top - offsets.marginTop;
        boundaries.bottom = height2 + offsets.top;
        boundaries.left += offsets.left - offsets.marginLeft;
        boundaries.right = width2 + offsets.left;
      } else {
        boundaries = offsets;
      }
    }
    padding = padding || 0;
    var isPaddingNumber = typeof padding === "number";
    boundaries.left += isPaddingNumber ? padding : padding.left || 0;
    boundaries.top += isPaddingNumber ? padding : padding.top || 0;
    boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
    boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;
    return boundaries;
  }
  function getArea(_ref3) {
    var width2 = _ref3.width, height2 = _ref3.height;
    return width2 * height2;
  }
  function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
    var padding = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0;
    if (placement.indexOf("auto") === -1) {
      return placement;
    }
    var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
    var rects = {
      top: {
        width: boundaries.width,
        height: refRect.top - boundaries.top
      },
      right: {
        width: boundaries.right - refRect.right,
        height: boundaries.height
      },
      bottom: {
        width: boundaries.width,
        height: boundaries.bottom - refRect.bottom
      },
      left: {
        width: refRect.left - boundaries.left,
        height: boundaries.height
      }
    };
    var sortedAreas = Object.keys(rects).map(function(key) {
      return _extends2({
        key
      }, rects[key], {
        area: getArea(rects[key])
      });
    }).sort(function(a, b) {
      return b.area - a.area;
    });
    var filteredAreas = sortedAreas.filter(function(_ref22) {
      var width2 = _ref22.width, height2 = _ref22.height;
      return width2 >= popper.clientWidth && height2 >= popper.clientHeight;
    });
    var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
    var variation = placement.split("-")[1];
    return computedPlacement + (variation ? "-" + variation : "");
  }
  function getReferenceOffsets(state, popper, reference) {
    var fixedPosition = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
    var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
    return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
  }
  function getOuterSizes(element) {
    var window2 = element.ownerDocument.defaultView;
    var styles82 = window2.getComputedStyle(element);
    var x = parseFloat(styles82.marginTop || 0) + parseFloat(styles82.marginBottom || 0);
    var y = parseFloat(styles82.marginLeft || 0) + parseFloat(styles82.marginRight || 0);
    var result = {
      width: element.offsetWidth + y,
      height: element.offsetHeight + x
    };
    return result;
  }
  function getOppositePlacement(placement) {
    var hash = { left: "right", right: "left", bottom: "top", top: "bottom" };
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash[matched];
    });
  }
  function getPopperOffsets(popper, referenceOffsets, placement) {
    placement = placement.split("-")[0];
    var popperRect = getOuterSizes(popper);
    var popperOffsets = {
      width: popperRect.width,
      height: popperRect.height
    };
    var isHoriz = ["right", "left"].indexOf(placement) !== -1;
    var mainSide = isHoriz ? "top" : "left";
    var secondarySide = isHoriz ? "left" : "top";
    var measurement = isHoriz ? "height" : "width";
    var secondaryMeasurement = !isHoriz ? "height" : "width";
    popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
    if (placement === secondarySide) {
      popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
    } else {
      popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
    }
    return popperOffsets;
  }
  function find(arr, check) {
    if (Array.prototype.find) {
      return arr.find(check);
    }
    return arr.filter(check)[0];
  }
  function findIndex(arr, prop, value) {
    if (Array.prototype.findIndex) {
      return arr.findIndex(function(cur) {
        return cur[prop] === value;
      });
    }
    var match = find(arr, function(obj) {
      return obj[prop] === value;
    });
    return arr.indexOf(match);
  }
  function runModifiers(modifiers2, data, ends) {
    var modifiersToRun = ends === void 0 ? modifiers2 : modifiers2.slice(0, findIndex(modifiers2, "name", ends));
    modifiersToRun.forEach(function(modifier) {
      if (modifier["function"]) {
        console.warn("`modifier.function` is deprecated, use `modifier.fn`!");
      }
      var fn = modifier["function"] || modifier.fn;
      if (modifier.enabled && isFunction(fn)) {
        data.offsets.popper = getClientRect(data.offsets.popper);
        data.offsets.reference = getClientRect(data.offsets.reference);
        data = fn(data, modifier);
      }
    });
    return data;
  }
  function update2() {
    if (this.state.isDestroyed) {
      return;
    }
    var data = {
      instance: this,
      styles: {},
      arrowStyles: {},
      attributes: {},
      flipped: false,
      offsets: {}
    };
    data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);
    data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);
    data.originalPlacement = data.placement;
    data.positionFixed = this.options.positionFixed;
    data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
    data.offsets.popper.position = this.options.positionFixed ? "fixed" : "absolute";
    data = runModifiers(this.modifiers, data);
    if (!this.state.isCreated) {
      this.state.isCreated = true;
      this.options.onCreate(data);
    } else {
      this.options.onUpdate(data);
    }
  }
  function isModifierEnabled(modifiers2, modifierName) {
    return modifiers2.some(function(_ref3) {
      var name = _ref3.name, enabled = _ref3.enabled;
      return enabled && name === modifierName;
    });
  }
  function getSupportedPropertyName(property) {
    var prefixes = [false, "ms", "Webkit", "Moz", "O"];
    var upperProp = property.charAt(0).toUpperCase() + property.slice(1);
    for (var i = 0; i < prefixes.length; i++) {
      var prefix2 = prefixes[i];
      var toCheck = prefix2 ? "" + prefix2 + upperProp : property;
      if (typeof document.body.style[toCheck] !== "undefined") {
        return toCheck;
      }
    }
    return null;
  }
  function destroy() {
    this.state.isDestroyed = true;
    if (isModifierEnabled(this.modifiers, "applyStyle")) {
      this.popper.removeAttribute("x-placement");
      this.popper.style.position = "";
      this.popper.style.top = "";
      this.popper.style.left = "";
      this.popper.style.right = "";
      this.popper.style.bottom = "";
      this.popper.style.willChange = "";
      this.popper.style[getSupportedPropertyName("transform")] = "";
    }
    this.disableEventListeners();
    if (this.options.removeOnDestroy) {
      this.popper.parentNode.removeChild(this.popper);
    }
    return this;
  }
  function getWindow(element) {
    var ownerDocument2 = element.ownerDocument;
    return ownerDocument2 ? ownerDocument2.defaultView : window;
  }
  function attachToScrollParents(scrollParent, event, callback, scrollParents) {
    var isBody = scrollParent.nodeName === "BODY";
    var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
    target.addEventListener(event, callback, { passive: true });
    if (!isBody) {
      attachToScrollParents(getScrollParent2(target.parentNode), event, callback, scrollParents);
    }
    scrollParents.push(target);
  }
  function setupEventListeners(reference, options, state, updateBound) {
    state.updateBound = updateBound;
    getWindow(reference).addEventListener("resize", state.updateBound, { passive: true });
    var scrollElement = getScrollParent2(reference);
    attachToScrollParents(scrollElement, "scroll", state.updateBound, state.scrollParents);
    state.scrollElement = scrollElement;
    state.eventsEnabled = true;
    return state;
  }
  function enableEventListeners() {
    if (!this.state.eventsEnabled) {
      this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
    }
  }
  function removeEventListeners(reference, state) {
    getWindow(reference).removeEventListener("resize", state.updateBound);
    state.scrollParents.forEach(function(target) {
      target.removeEventListener("scroll", state.updateBound);
    });
    state.updateBound = null;
    state.scrollParents = [];
    state.scrollElement = null;
    state.eventsEnabled = false;
    return state;
  }
  function disableEventListeners() {
    if (this.state.eventsEnabled) {
      cancelAnimationFrame(this.scheduleUpdate);
      this.state = removeEventListeners(this.reference, this.state);
    }
  }
  function isNumeric(n) {
    return n !== "" && !isNaN(parseFloat(n)) && isFinite(n);
  }
  function setStyles(element, styles82) {
    Object.keys(styles82).forEach(function(prop) {
      var unit = "";
      if (["width", "height", "top", "right", "bottom", "left"].indexOf(prop) !== -1 && isNumeric(styles82[prop])) {
        unit = "px";
      }
      element.style[prop] = styles82[prop] + unit;
    });
  }
  function setAttributes(element, attributes) {
    Object.keys(attributes).forEach(function(prop) {
      var value = attributes[prop];
      if (value !== false) {
        element.setAttribute(prop, attributes[prop]);
      } else {
        element.removeAttribute(prop);
      }
    });
  }
  function applyStyle(data) {
    setStyles(data.instance.popper, data.styles);
    setAttributes(data.instance.popper, data.attributes);
    if (data.arrowElement && Object.keys(data.arrowStyles).length) {
      setStyles(data.arrowElement, data.arrowStyles);
    }
    return data;
  }
  function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
    var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);
    var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
    popper.setAttribute("x-placement", placement);
    setStyles(popper, { position: options.positionFixed ? "fixed" : "absolute" });
    return options;
  }
  function getRoundedOffsets(data, shouldRound) {
    var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
    var round3 = Math.round, floor = Math.floor;
    var noRound = function noRound2(v) {
      return v;
    };
    var referenceWidth = round3(reference.width);
    var popperWidth = round3(popper.width);
    var isVertical = ["left", "right"].indexOf(data.placement) !== -1;
    var isVariation = data.placement.indexOf("-") !== -1;
    var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
    var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;
    var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round3 : floor;
    var verticalToInteger = !shouldRound ? noRound : round3;
    return {
      left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
      top: verticalToInteger(popper.top),
      bottom: verticalToInteger(popper.bottom),
      right: horizontalToInteger(popper.right)
    };
  }
  var isFirefox = isBrowser2 && /Firefox/i.test(navigator.userAgent);
  function computeStyle(data, options) {
    var x = options.x, y = options.y;
    var popper = data.offsets.popper;
    var legacyGpuAccelerationOption = find(data.instance.modifiers, function(modifier) {
      return modifier.name === "applyStyle";
    }).gpuAcceleration;
    if (legacyGpuAccelerationOption !== void 0) {
      console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");
    }
    var gpuAcceleration = legacyGpuAccelerationOption !== void 0 ? legacyGpuAccelerationOption : options.gpuAcceleration;
    var offsetParent = getOffsetParent(data.instance.popper);
    var offsetParentRect = getBoundingClientRect(offsetParent);
    var styles82 = {
      position: popper.position
    };
    var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);
    var sideA = x === "bottom" ? "top" : "bottom";
    var sideB = y === "right" ? "left" : "right";
    var prefixedProperty = getSupportedPropertyName("transform");
    var left2 = void 0, top2 = void 0;
    if (sideA === "bottom") {
      if (offsetParent.nodeName === "HTML") {
        top2 = -offsetParent.clientHeight + offsets.bottom;
      } else {
        top2 = -offsetParentRect.height + offsets.bottom;
      }
    } else {
      top2 = offsets.top;
    }
    if (sideB === "right") {
      if (offsetParent.nodeName === "HTML") {
        left2 = -offsetParent.clientWidth + offsets.right;
      } else {
        left2 = -offsetParentRect.width + offsets.right;
      }
    } else {
      left2 = offsets.left;
    }
    if (gpuAcceleration && prefixedProperty) {
      styles82[prefixedProperty] = "translate3d(" + left2 + "px, " + top2 + "px, 0)";
      styles82[sideA] = 0;
      styles82[sideB] = 0;
      styles82.willChange = "transform";
    } else {
      var invertTop = sideA === "bottom" ? -1 : 1;
      var invertLeft = sideB === "right" ? -1 : 1;
      styles82[sideA] = top2 * invertTop;
      styles82[sideB] = left2 * invertLeft;
      styles82.willChange = sideA + ", " + sideB;
    }
    var attributes = {
      "x-placement": data.placement
    };
    data.attributes = _extends2({}, attributes, data.attributes);
    data.styles = _extends2({}, styles82, data.styles);
    data.arrowStyles = _extends2({}, data.offsets.arrow, data.arrowStyles);
    return data;
  }
  function isModifierRequired(modifiers2, requestingName, requestedName) {
    var requesting = find(modifiers2, function(_ref3) {
      var name = _ref3.name;
      return name === requestingName;
    });
    var isRequired = !!requesting && modifiers2.some(function(modifier) {
      return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
    });
    if (!isRequired) {
      var _requesting = "`" + requestingName + "`";
      var requested = "`" + requestedName + "`";
      console.warn(requested + " modifier is required by " + _requesting + " modifier in order to work, be sure to include it before " + _requesting + "!");
    }
    return isRequired;
  }
  function arrow(data, options) {
    var _data$offsets$arrow;
    if (!isModifierRequired(data.instance.modifiers, "arrow", "keepTogether")) {
      return data;
    }
    var arrowElement = options.element;
    if (typeof arrowElement === "string") {
      arrowElement = data.instance.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return data;
      }
    } else {
      if (!data.instance.popper.contains(arrowElement)) {
        console.warn("WARNING: `arrow.element` must be child of its popper element!");
        return data;
      }
    }
    var placement = data.placement.split("-")[0];
    var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
    var isVertical = ["left", "right"].indexOf(placement) !== -1;
    var len = isVertical ? "height" : "width";
    var sideCapitalized = isVertical ? "Top" : "Left";
    var side = sideCapitalized.toLowerCase();
    var altSide = isVertical ? "left" : "top";
    var opSide = isVertical ? "bottom" : "right";
    var arrowElementSize = getOuterSizes(arrowElement)[len];
    if (reference[opSide] - arrowElementSize < popper[side]) {
      data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
    }
    if (reference[side] + arrowElementSize > popper[opSide]) {
      data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
    }
    data.offsets.popper = getClientRect(data.offsets.popper);
    var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;
    var css2 = getStyleComputedProperty(data.instance.popper);
    var popperMarginSide = parseFloat(css2["margin" + sideCapitalized]);
    var popperBorderSide = parseFloat(css2["border" + sideCapitalized + "Width"]);
    var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;
    sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);
    data.arrowElement = arrowElement;
    data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ""), _data$offsets$arrow);
    return data;
  }
  function getOppositeVariation(variation) {
    if (variation === "end") {
      return "start";
    } else if (variation === "start") {
      return "end";
    }
    return variation;
  }
  var placements = ["auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start"];
  var validPlacements = placements.slice(3);
  function clockwise(placement) {
    var counter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var index = validPlacements.indexOf(placement);
    var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
    return counter ? arr.reverse() : arr;
  }
  var BEHAVIORS = {
    FLIP: "flip",
    CLOCKWISE: "clockwise",
    COUNTERCLOCKWISE: "counterclockwise"
  };
  function flip(data, options) {
    if (isModifierEnabled(data.instance.modifiers, "inner")) {
      return data;
    }
    if (data.flipped && data.placement === data.originalPlacement) {
      return data;
    }
    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);
    var placement = data.placement.split("-")[0];
    var placementOpposite = getOppositePlacement(placement);
    var variation = data.placement.split("-")[1] || "";
    var flipOrder = [];
    switch (options.behavior) {
      case BEHAVIORS.FLIP:
        flipOrder = [placement, placementOpposite];
        break;
      case BEHAVIORS.CLOCKWISE:
        flipOrder = clockwise(placement);
        break;
      case BEHAVIORS.COUNTERCLOCKWISE:
        flipOrder = clockwise(placement, true);
        break;
      default:
        flipOrder = options.behavior;
    }
    flipOrder.forEach(function(step, index) {
      if (placement !== step || flipOrder.length === index + 1) {
        return data;
      }
      placement = data.placement.split("-")[0];
      placementOpposite = getOppositePlacement(placement);
      var popperOffsets = data.offsets.popper;
      var refOffsets = data.offsets.reference;
      var floor = Math.floor;
      var overlapsRef = placement === "left" && floor(popperOffsets.right) > floor(refOffsets.left) || placement === "right" && floor(popperOffsets.left) < floor(refOffsets.right) || placement === "top" && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === "bottom" && floor(popperOffsets.top) < floor(refOffsets.bottom);
      var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
      var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
      var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
      var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
      var overflowsBoundaries = placement === "left" && overflowsLeft || placement === "right" && overflowsRight || placement === "top" && overflowsTop || placement === "bottom" && overflowsBottom;
      var isVertical = ["top", "bottom"].indexOf(placement) !== -1;
      var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === "start" && overflowsLeft || isVertical && variation === "end" && overflowsRight || !isVertical && variation === "start" && overflowsTop || !isVertical && variation === "end" && overflowsBottom);
      var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === "start" && overflowsRight || isVertical && variation === "end" && overflowsLeft || !isVertical && variation === "start" && overflowsBottom || !isVertical && variation === "end" && overflowsTop);
      var flippedVariation = flippedVariationByRef || flippedVariationByContent;
      if (overlapsRef || overflowsBoundaries || flippedVariation) {
        data.flipped = true;
        if (overlapsRef || overflowsBoundaries) {
          placement = flipOrder[index + 1];
        }
        if (flippedVariation) {
          variation = getOppositeVariation(variation);
        }
        data.placement = placement + (variation ? "-" + variation : "");
        data.offsets.popper = _extends2({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
        data = runModifiers(data.instance.modifiers, data, "flip");
      }
    });
    return data;
  }
  function keepTogether(data) {
    var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
    var placement = data.placement.split("-")[0];
    var floor = Math.floor;
    var isVertical = ["top", "bottom"].indexOf(placement) !== -1;
    var side = isVertical ? "right" : "bottom";
    var opSide = isVertical ? "left" : "top";
    var measurement = isVertical ? "width" : "height";
    if (popper[side] < floor(reference[opSide])) {
      data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
    }
    if (popper[opSide] > floor(reference[side])) {
      data.offsets.popper[opSide] = floor(reference[side]);
    }
    return data;
  }
  function toValue(str, measurement, popperOffsets, referenceOffsets) {
    var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
    var value = +split[1];
    var unit = split[2];
    if (!value) {
      return str;
    }
    if (unit.indexOf("%") === 0) {
      var element = void 0;
      switch (unit) {
        case "%p":
          element = popperOffsets;
          break;
        case "%":
        case "%r":
        default:
          element = referenceOffsets;
      }
      var rect = getClientRect(element);
      return rect[measurement] / 100 * value;
    } else if (unit === "vh" || unit === "vw") {
      var size = void 0;
      if (unit === "vh") {
        size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
      } else {
        size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
      }
      return size / 100 * value;
    } else {
      return value;
    }
  }
  function parseOffset(offset2, popperOffsets, referenceOffsets, basePlacement) {
    var offsets = [0, 0];
    var useHeight = ["right", "left"].indexOf(basePlacement) !== -1;
    var fragments = offset2.split(/(\+|\-)/).map(function(frag) {
      return frag.trim();
    });
    var divider = fragments.indexOf(find(fragments, function(frag) {
      return frag.search(/,|\s/) !== -1;
    }));
    if (fragments[divider] && fragments[divider].indexOf(",") === -1) {
      console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");
    }
    var splitRegex = /\s*,\s*|\s+/;
    var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];
    ops = ops.map(function(op, index) {
      var measurement = (index === 1 ? !useHeight : useHeight) ? "height" : "width";
      var mergeWithPrevious = false;
      return op.reduce(function(a, b) {
        if (a[a.length - 1] === "" && ["+", "-"].indexOf(b) !== -1) {
          a[a.length - 1] = b;
          mergeWithPrevious = true;
          return a;
        } else if (mergeWithPrevious) {
          a[a.length - 1] += b;
          mergeWithPrevious = false;
          return a;
        } else {
          return a.concat(b);
        }
      }, []).map(function(str) {
        return toValue(str, measurement, popperOffsets, referenceOffsets);
      });
    });
    ops.forEach(function(op, index) {
      op.forEach(function(frag, index2) {
        if (isNumeric(frag)) {
          offsets[index] += frag * (op[index2 - 1] === "-" ? -1 : 1);
        }
      });
    });
    return offsets;
  }
  function offset(data, _ref3) {
    var offset2 = _ref3.offset;
    var placement = data.placement, _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
    var basePlacement = placement.split("-")[0];
    var offsets = void 0;
    if (isNumeric(+offset2)) {
      offsets = [+offset2, 0];
    } else {
      offsets = parseOffset(offset2, popper, reference, basePlacement);
    }
    if (basePlacement === "left") {
      popper.top += offsets[0];
      popper.left -= offsets[1];
    } else if (basePlacement === "right") {
      popper.top += offsets[0];
      popper.left += offsets[1];
    } else if (basePlacement === "top") {
      popper.left += offsets[0];
      popper.top -= offsets[1];
    } else if (basePlacement === "bottom") {
      popper.left += offsets[0];
      popper.top += offsets[1];
    }
    data.popper = popper;
    return data;
  }
  function preventOverflow(data, options) {
    var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);
    if (data.instance.reference === boundariesElement) {
      boundariesElement = getOffsetParent(boundariesElement);
    }
    var transformProp = getSupportedPropertyName("transform");
    var popperStyles = data.instance.popper.style;
    var top2 = popperStyles.top, left2 = popperStyles.left, transform4 = popperStyles[transformProp];
    popperStyles.top = "";
    popperStyles.left = "";
    popperStyles[transformProp] = "";
    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);
    popperStyles.top = top2;
    popperStyles.left = left2;
    popperStyles[transformProp] = transform4;
    options.boundaries = boundaries;
    var order2 = options.priority;
    var popper = data.offsets.popper;
    var check = {
      primary: function primary(placement) {
        var value = popper[placement];
        if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
          value = Math.max(popper[placement], boundaries[placement]);
        }
        return defineProperty({}, placement, value);
      },
      secondary: function secondary(placement) {
        var mainSide = placement === "right" ? "left" : "top";
        var value = popper[mainSide];
        if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
          value = Math.min(popper[mainSide], boundaries[placement] - (placement === "right" ? popper.width : popper.height));
        }
        return defineProperty({}, mainSide, value);
      }
    };
    order2.forEach(function(placement) {
      var side = ["left", "top"].indexOf(placement) !== -1 ? "primary" : "secondary";
      popper = _extends2({}, popper, check[side](placement));
    });
    data.offsets.popper = popper;
    return data;
  }
  function shift(data) {
    var placement = data.placement;
    var basePlacement = placement.split("-")[0];
    var shiftvariation = placement.split("-")[1];
    if (shiftvariation) {
      var _data$offsets = data.offsets, reference = _data$offsets.reference, popper = _data$offsets.popper;
      var isVertical = ["bottom", "top"].indexOf(basePlacement) !== -1;
      var side = isVertical ? "left" : "top";
      var measurement = isVertical ? "width" : "height";
      var shiftOffsets = {
        start: defineProperty({}, side, reference[side]),
        end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
      };
      data.offsets.popper = _extends2({}, popper, shiftOffsets[shiftvariation]);
    }
    return data;
  }
  function hide(data) {
    if (!isModifierRequired(data.instance.modifiers, "hide", "preventOverflow")) {
      return data;
    }
    var refRect = data.offsets.reference;
    var bound = find(data.instance.modifiers, function(modifier) {
      return modifier.name === "preventOverflow";
    }).boundaries;
    if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
      if (data.hide === true) {
        return data;
      }
      data.hide = true;
      data.attributes["x-out-of-boundaries"] = "";
    } else {
      if (data.hide === false) {
        return data;
      }
      data.hide = false;
      data.attributes["x-out-of-boundaries"] = false;
    }
    return data;
  }
  function inner(data) {
    var placement = data.placement;
    var basePlacement = placement.split("-")[0];
    var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
    var isHoriz = ["left", "right"].indexOf(basePlacement) !== -1;
    var subtractLength = ["top", "left"].indexOf(basePlacement) === -1;
    popper[isHoriz ? "left" : "top"] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? "width" : "height"] : 0);
    data.placement = getOppositePlacement(placement);
    data.offsets.popper = getClientRect(popper);
    return data;
  }
  var modifiers = {
    shift: {
      order: 100,
      enabled: true,
      fn: shift
    },
    offset: {
      order: 200,
      enabled: true,
      fn: offset,
      offset: 0
    },
    preventOverflow: {
      order: 300,
      enabled: true,
      fn: preventOverflow,
      priority: ["left", "right", "top", "bottom"],
      padding: 5,
      boundariesElement: "scrollParent"
    },
    keepTogether: {
      order: 400,
      enabled: true,
      fn: keepTogether
    },
    arrow: {
      order: 500,
      enabled: true,
      fn: arrow,
      element: "[x-arrow]"
    },
    flip: {
      order: 600,
      enabled: true,
      fn: flip,
      behavior: "flip",
      padding: 5,
      boundariesElement: "viewport",
      flipVariations: false,
      flipVariationsByContent: false
    },
    inner: {
      order: 700,
      enabled: false,
      fn: inner
    },
    hide: {
      order: 800,
      enabled: true,
      fn: hide
    },
    computeStyle: {
      order: 850,
      enabled: true,
      fn: computeStyle,
      gpuAcceleration: true,
      x: "bottom",
      y: "right"
    },
    applyStyle: {
      order: 900,
      enabled: true,
      fn: applyStyle,
      onLoad: applyStyleOnLoad,
      gpuAcceleration: void 0
    }
  };
  var Defaults = {
    placement: "bottom",
    positionFixed: false,
    eventsEnabled: true,
    removeOnDestroy: false,
    onCreate: function onCreate() {
    },
    onUpdate: function onUpdate() {
    },
    modifiers
  };
  var Popper = function() {
    function Popper4(reference, popper) {
      var _this = this;
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      classCallCheck(this, Popper4);
      this.scheduleUpdate = function() {
        return requestAnimationFrame(_this.update);
      };
      this.update = debounce2(this.update.bind(this));
      this.options = _extends2({}, Popper4.Defaults, options);
      this.state = {
        isDestroyed: false,
        isCreated: false,
        scrollParents: []
      };
      this.reference = reference && reference.jquery ? reference[0] : reference;
      this.popper = popper && popper.jquery ? popper[0] : popper;
      this.options.modifiers = {};
      Object.keys(_extends2({}, Popper4.Defaults.modifiers, options.modifiers)).forEach(function(name) {
        _this.options.modifiers[name] = _extends2({}, Popper4.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
      });
      this.modifiers = Object.keys(this.options.modifiers).map(function(name) {
        return _extends2({
          name
        }, _this.options.modifiers[name]);
      }).sort(function(a, b) {
        return a.order - b.order;
      });
      this.modifiers.forEach(function(modifierOptions) {
        if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
          modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
        }
      });
      this.update();
      var eventsEnabled = this.options.eventsEnabled;
      if (eventsEnabled) {
        this.enableEventListeners();
      }
      this.state.eventsEnabled = eventsEnabled;
    }
    createClass(Popper4, [{
      key: "update",
      value: function update$$1() {
        return update2.call(this);
      }
    }, {
      key: "destroy",
      value: function destroy$$1() {
        return destroy.call(this);
      }
    }, {
      key: "enableEventListeners",
      value: function enableEventListeners$$1() {
        return enableEventListeners.call(this);
      }
    }, {
      key: "disableEventListeners",
      value: function disableEventListeners$$1() {
        return disableEventListeners.call(this);
      }
    }]);
    return Popper4;
  }();
  Popper.Utils = (typeof window !== "undefined" ? window : global).PopperUtils;
  Popper.placements = placements;
  Popper.Defaults = Defaults;
  var popper_default = Popper;

  // node_modules/@material-ui/core/esm/Popper/Popper.js
  function flipPlacement(placement, theme2) {
    var direction = theme2 && theme2.direction || "ltr";
    if (direction === "ltr") {
      return placement;
    }
    switch (placement) {
      case "bottom-end":
        return "bottom-start";
      case "bottom-start":
        return "bottom-end";
      case "top-end":
        return "top-start";
      case "top-start":
        return "top-end";
      default:
        return placement;
    }
  }
  function getAnchorEl2(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  var useEnhancedEffect8 = typeof window !== "undefined" ? React77.useLayoutEffect : React77.useEffect;
  var defaultPopperOptions = {};
  var Popper2 = /* @__PURE__ */ React77.forwardRef(function Popper3(props, ref) {
    var anchorEl = props.anchorEl, children = props.children, container = props.container, _props$disablePortal = props.disablePortal, disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal, _props$keepMounted = props.keepMounted, keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted, modifiers2 = props.modifiers, open = props.open, _props$placement = props.placement, initialPlacement = _props$placement === void 0 ? "bottom" : _props$placement, _props$popperOptions = props.popperOptions, popperOptions = _props$popperOptions === void 0 ? defaultPopperOptions : _props$popperOptions, popperRefProp = props.popperRef, style2 = props.style, _props$transition = props.transition, transition2 = _props$transition === void 0 ? false : _props$transition, other = _objectWithoutProperties(props, ["anchorEl", "children", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition"]);
    var tooltipRef = React77.useRef(null);
    var ownRef = useForkRef(tooltipRef, ref);
    var popperRef = React77.useRef(null);
    var handlePopperRef = useForkRef(popperRef, popperRefProp);
    var handlePopperRefRef = React77.useRef(handlePopperRef);
    useEnhancedEffect8(function() {
      handlePopperRefRef.current = handlePopperRef;
    }, [handlePopperRef]);
    React77.useImperativeHandle(popperRefProp, function() {
      return popperRef.current;
    }, []);
    var _React$useState = React77.useState(true), exited = _React$useState[0], setExited = _React$useState[1];
    var theme2 = useTheme();
    var rtlPlacement = flipPlacement(initialPlacement, theme2);
    var _React$useState2 = React77.useState(rtlPlacement), placement = _React$useState2[0], setPlacement = _React$useState2[1];
    React77.useEffect(function() {
      if (popperRef.current) {
        popperRef.current.update();
      }
    });
    var handleOpen = React77.useCallback(function() {
      if (!tooltipRef.current || !anchorEl || !open) {
        return;
      }
      if (popperRef.current) {
        popperRef.current.destroy();
        handlePopperRefRef.current(null);
      }
      var handlePopperUpdate = function handlePopperUpdate2(data) {
        setPlacement(data.placement);
      };
      var resolvedAnchorEl = getAnchorEl2(anchorEl);
      if (true) {
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          var box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            console.warn(["Material-UI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        }
      }
      var popper = new popper_default(getAnchorEl2(anchorEl), tooltipRef.current, _extends({
        placement: rtlPlacement
      }, popperOptions, {
        modifiers: _extends({}, disablePortal ? {} : {
          preventOverflow: {
            boundariesElement: "window"
          }
        }, modifiers2, popperOptions.modifiers),
        onCreate: createChainedFunction(handlePopperUpdate, popperOptions.onCreate),
        onUpdate: createChainedFunction(handlePopperUpdate, popperOptions.onUpdate)
      }));
      handlePopperRefRef.current(popper);
    }, [anchorEl, disablePortal, modifiers2, open, rtlPlacement, popperOptions]);
    var handleRef = React77.useCallback(function(node) {
      setRef(ownRef, node);
      handleOpen();
    }, [ownRef, handleOpen]);
    var handleEnter = function handleEnter2() {
      setExited(false);
    };
    var handleClose = function handleClose2() {
      if (!popperRef.current) {
        return;
      }
      popperRef.current.destroy();
      handlePopperRefRef.current(null);
    };
    var handleExited = function handleExited2() {
      setExited(true);
      handleClose();
    };
    React77.useEffect(function() {
      return function() {
        handleClose();
      };
    }, []);
    React77.useEffect(function() {
      if (!open && !transition2) {
        handleClose();
      }
    }, [open, transition2]);
    if (!keepMounted && !open && (!transition2 || exited)) {
      return null;
    }
    var childProps = {
      placement
    };
    if (transition2) {
      childProps.TransitionProps = {
        in: open,
        onEnter: handleEnter,
        onExited: handleExited
      };
    }
    return /* @__PURE__ */ React77.createElement(Portal_default, {
      disablePortal,
      container
    }, /* @__PURE__ */ React77.createElement("div", _extends({
      ref: handleRef,
      role: "tooltip"
    }, other, {
      style: _extends({
        position: "fixed",
        top: 0,
        left: 0,
        display: !open && keepMounted && !transition2 ? "none" : null
      }, style2)
    }), typeof children === "function" ? children(childProps) : children));
  });
  true ? Popper2.propTypes = {
    anchorEl: chainPropTypes(import_prop_types65.default.oneOfType([HTMLElementType, import_prop_types65.default.object, import_prop_types65.default.func]), function(props) {
      if (props.open) {
        var resolvedAnchorEl = getAnchorEl2(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          var box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["Material-UI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.clientWidth !== "number" || typeof resolvedAnchorEl.clientHeight !== "number" || typeof resolvedAnchorEl.getBoundingClientRect !== "function") {
          return new Error(["Material-UI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a referenceObject ", "(https://popper.js.org/docs/v1/#referenceObject)."].join("\n"));
        }
      }
      return null;
    }),
    children: import_prop_types65.default.oneOfType([import_prop_types65.default.node, import_prop_types65.default.func]).isRequired,
    container: import_prop_types65.default.oneOfType([HTMLElementType, import_prop_types65.default.instanceOf(React77.Component), import_prop_types65.default.func]),
    disablePortal: import_prop_types65.default.bool,
    keepMounted: import_prop_types65.default.bool,
    modifiers: import_prop_types65.default.object,
    open: import_prop_types65.default.bool.isRequired,
    placement: import_prop_types65.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    popperOptions: import_prop_types65.default.object,
    popperRef: refType_default,
    style: import_prop_types65.default.object,
    transition: import_prop_types65.default.bool
  } : void 0;
  var Popper_default = Popper2;

  // node_modules/@material-ui/core/esm/Select/Select.js
  var React79 = __toModule(require_react());
  var import_prop_types67 = __toModule(require_prop_types());

  // node_modules/@material-ui/core/esm/Select/SelectInput.js
  var React78 = __toModule(require_react());
  var import_react_is4 = __toModule(require_react_is2());
  var import_prop_types66 = __toModule(require_prop_types());
  function areEqualValues(a, b) {
    if (_typeof(b) === "object" && b !== null) {
      return a === b;
    }
    return String(a) === String(b);
  }
  function isEmpty(display) {
    return display == null || typeof display === "string" && !display.trim();
  }
  var SelectInput = /* @__PURE__ */ React78.forwardRef(function SelectInput2(props, ref) {
    var ariaLabel = props["aria-label"], autoFocus = props.autoFocus, autoWidth = props.autoWidth, children = props.children, classes = props.classes, className = props.className, defaultValue = props.defaultValue, disabled = props.disabled, displayEmpty = props.displayEmpty, IconComponent = props.IconComponent, inputRefProp = props.inputRef, labelId = props.labelId, _props$MenuProps = props.MenuProps, MenuProps = _props$MenuProps === void 0 ? {} : _props$MenuProps, multiple = props.multiple, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onClose = props.onClose, onFocus = props.onFocus, onOpen = props.onOpen, openProp = props.open, readOnly = props.readOnly, renderValue = props.renderValue, _props$SelectDisplayP = props.SelectDisplayProps, SelectDisplayProps = _props$SelectDisplayP === void 0 ? {} : _props$SelectDisplayP, tabIndexProp = props.tabIndex, type = props.type, valueProp = props.value, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["aria-label", "autoFocus", "autoWidth", "children", "classes", "className", "defaultValue", "disabled", "displayEmpty", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"]);
    var _useControlled = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: "Select"
    }), _useControlled2 = _slicedToArray(_useControlled, 2), value = _useControlled2[0], setValue = _useControlled2[1];
    var inputRef = React78.useRef(null);
    var _React$useState = React78.useState(null), displayNode = _React$useState[0], setDisplayNode = _React$useState[1];
    var _React$useRef = React78.useRef(openProp != null), isOpenControlled = _React$useRef.current;
    var _React$useState2 = React78.useState(), menuMinWidthState = _React$useState2[0], setMenuMinWidthState = _React$useState2[1];
    var _React$useState3 = React78.useState(false), openState = _React$useState3[0], setOpenState = _React$useState3[1];
    var handleRef = useForkRef(ref, inputRefProp);
    React78.useImperativeHandle(handleRef, function() {
      return {
        focus: function focus() {
          displayNode.focus();
        },
        node: inputRef.current,
        value
      };
    }, [displayNode, value]);
    React78.useEffect(function() {
      if (autoFocus && displayNode) {
        displayNode.focus();
      }
    }, [autoFocus, displayNode]);
    React78.useEffect(function() {
      if (displayNode) {
        var label = ownerDocument(displayNode).getElementById(labelId);
        if (label) {
          var handler = function handler2() {
            if (getSelection().isCollapsed) {
              displayNode.focus();
            }
          };
          label.addEventListener("click", handler);
          return function() {
            label.removeEventListener("click", handler);
          };
        }
      }
      return void 0;
    }, [labelId, displayNode]);
    var update3 = function update4(open2, event) {
      if (open2) {
        if (onOpen) {
          onOpen(event);
        }
      } else if (onClose) {
        onClose(event);
      }
      if (!isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
        setOpenState(open2);
      }
    };
    var handleMouseDown = function handleMouseDown2(event) {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      displayNode.focus();
      update3(true, event);
    };
    var handleClose = function handleClose2(event) {
      update3(false, event);
    };
    var childrenArray = React78.Children.toArray(children);
    var handleChange = function handleChange2(event) {
      var index = childrenArray.map(function(child2) {
        return child2.props.value;
      }).indexOf(event.target.value);
      if (index === -1) {
        return;
      }
      var child = childrenArray[index];
      setValue(child.props.value);
      if (onChange) {
        onChange(event, child);
      }
    };
    var handleItemClick = function handleItemClick2(child) {
      return function(event) {
        if (!multiple) {
          update3(false, event);
        }
        var newValue;
        if (multiple) {
          newValue = Array.isArray(value) ? value.slice() : [];
          var itemIndex = value.indexOf(child.props.value);
          if (itemIndex === -1) {
            newValue.push(child.props.value);
          } else {
            newValue.splice(itemIndex, 1);
          }
        } else {
          newValue = child.props.value;
        }
        if (child.props.onClick) {
          child.props.onClick(event);
        }
        if (value === newValue) {
          return;
        }
        setValue(newValue);
        if (onChange) {
          event.persist();
          Object.defineProperty(event, "target", {
            writable: true,
            value: {
              value: newValue,
              name
            }
          });
          onChange(event, child);
        }
      };
    };
    var handleKeyDown2 = function handleKeyDown3(event) {
      if (!readOnly) {
        var validKeys = [
          " ",
          "ArrowUp",
          "ArrowDown",
          "Enter"
        ];
        if (validKeys.indexOf(event.key) !== -1) {
          event.preventDefault();
          update3(true, event);
        }
      }
    };
    var open = displayNode !== null && (isOpenControlled ? openProp : openState);
    var handleBlur = function handleBlur2(event) {
      if (!open && onBlur) {
        event.persist();
        Object.defineProperty(event, "target", {
          writable: true,
          value: {
            value,
            name
          }
        });
        onBlur(event);
      }
    };
    delete other["aria-invalid"];
    var display;
    var displaySingle;
    var displayMultiple = [];
    var computeDisplay = false;
    var foundMatch = false;
    if (isFilled({
      value
    }) || displayEmpty) {
      if (renderValue) {
        display = renderValue(value);
      } else {
        computeDisplay = true;
      }
    }
    var items = childrenArray.map(function(child) {
      if (!/* @__PURE__ */ React78.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is4.isFragment)(child)) {
          console.error(["Material-UI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      var selected;
      if (multiple) {
        if (!Array.isArray(value)) {
          throw new Error(true ? "Material-UI: The `value` prop must be an array when using the `Select` component with `multiple`." : formatMuiErrorMessage(2));
        }
        selected = value.some(function(v) {
          return areEqualValues(v, child.props.value);
        });
        if (selected && computeDisplay) {
          displayMultiple.push(child.props.children);
        }
      } else {
        selected = areEqualValues(value, child.props.value);
        if (selected && computeDisplay) {
          displaySingle = child.props.children;
        }
      }
      if (selected) {
        foundMatch = true;
      }
      return /* @__PURE__ */ React78.cloneElement(child, {
        "aria-selected": selected ? "true" : void 0,
        onClick: handleItemClick(child),
        onKeyUp: function onKeyUp(event) {
          if (event.key === " ") {
            event.preventDefault();
          }
          if (child.props.onKeyUp) {
            child.props.onKeyUp(event);
          }
        },
        role: "option",
        selected,
        value: void 0,
        "data-value": child.props.value
      });
    });
    if (true) {
      React78.useEffect(function() {
        if (!foundMatch && !multiple && value !== "") {
          var values3 = childrenArray.map(function(child) {
            return child.props.value;
          });
          console.warn(["Material-UI: You have provided an out-of-range value `".concat(value, "` for the select ").concat(name ? '(name="'.concat(name, '") ') : "", "component."), "Consider providing a value that matches one of the available options or ''.", "The available values are ".concat(values3.filter(function(x) {
            return x != null;
          }).map(function(x) {
            return "`".concat(x, "`");
          }).join(", ") || '""', ".")].join("\n"));
        }
      }, [foundMatch, childrenArray, multiple, name, value]);
    }
    if (computeDisplay) {
      display = multiple ? displayMultiple.join(", ") : displaySingle;
    }
    var menuMinWidth = menuMinWidthState;
    if (!autoWidth && isOpenControlled && displayNode) {
      menuMinWidth = displayNode.clientWidth;
    }
    var tabIndex;
    if (typeof tabIndexProp !== "undefined") {
      tabIndex = tabIndexProp;
    } else {
      tabIndex = disabled ? null : 0;
    }
    var buttonId = SelectDisplayProps.id || (name ? "mui-component-select-".concat(name) : void 0);
    return /* @__PURE__ */ React78.createElement(React78.Fragment, null, /* @__PURE__ */ React78.createElement("div", _extends({
      className: clsx_m_default(classes.root, classes.select, classes.selectMenu, classes[variant], className, disabled && classes.disabled),
      ref: setDisplayNode,
      tabIndex,
      role: "button",
      "aria-disabled": disabled ? "true" : void 0,
      "aria-expanded": open ? "true" : void 0,
      "aria-haspopup": "listbox",
      "aria-label": ariaLabel,
      "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
      onKeyDown: handleKeyDown2,
      onMouseDown: disabled || readOnly ? null : handleMouseDown,
      onBlur: handleBlur,
      onFocus
    }, SelectDisplayProps, {
      id: buttonId
    }), isEmpty(display) ? /* @__PURE__ */ React78.createElement("span", {
      dangerouslySetInnerHTML: {
        __html: "&#8203;"
      }
    }) : display), /* @__PURE__ */ React78.createElement("input", _extends({
      value: Array.isArray(value) ? value.join(",") : value,
      name,
      ref: inputRef,
      "aria-hidden": true,
      onChange: handleChange,
      tabIndex: -1,
      className: classes.nativeInput,
      autoFocus
    }, other)), /* @__PURE__ */ React78.createElement(IconComponent, {
      className: clsx_m_default(classes.icon, classes["icon".concat(capitalize(variant))], open && classes.iconOpen, disabled && classes.disabled)
    }), /* @__PURE__ */ React78.createElement(Menu_default, _extends({
      id: "menu-".concat(name || ""),
      anchorEl: displayNode,
      open,
      onClose: handleClose
    }, MenuProps, {
      MenuListProps: _extends({
        "aria-labelledby": labelId,
        role: "listbox",
        disableListWrap: true
      }, MenuProps.MenuListProps),
      PaperProps: _extends({}, MenuProps.PaperProps, {
        style: _extends({
          minWidth: menuMinWidth
        }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
      })
    }), items));
  });
  true ? SelectInput.propTypes = {
    "aria-label": import_prop_types66.default.string,
    autoFocus: import_prop_types66.default.bool,
    autoWidth: import_prop_types66.default.bool,
    children: import_prop_types66.default.node,
    classes: import_prop_types66.default.object.isRequired,
    className: import_prop_types66.default.string,
    defaultValue: import_prop_types66.default.any,
    disabled: import_prop_types66.default.bool,
    displayEmpty: import_prop_types66.default.bool,
    IconComponent: import_prop_types66.default.elementType.isRequired,
    inputRef: refType_default,
    labelId: import_prop_types66.default.string,
    MenuProps: import_prop_types66.default.object,
    multiple: import_prop_types66.default.bool,
    name: import_prop_types66.default.string,
    onBlur: import_prop_types66.default.func,
    onChange: import_prop_types66.default.func,
    onClose: import_prop_types66.default.func,
    onFocus: import_prop_types66.default.func,
    onOpen: import_prop_types66.default.func,
    open: import_prop_types66.default.bool,
    readOnly: import_prop_types66.default.bool,
    renderValue: import_prop_types66.default.func,
    SelectDisplayProps: import_prop_types66.default.object,
    tabIndex: import_prop_types66.default.oneOfType([import_prop_types66.default.number, import_prop_types66.default.string]),
    type: import_prop_types66.default.any,
    value: import_prop_types66.default.any,
    variant: import_prop_types66.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var SelectInput_default = SelectInput;

  // node_modules/@material-ui/core/esm/Select/Select.js
  var styles75 = styles69;
  var _ref = /* @__PURE__ */ React79.createElement(Input_default, null);
  var _ref2 = /* @__PURE__ */ React79.createElement(FilledInput_default, null);
  var Select = /* @__PURE__ */ React79.forwardRef(function Select2(props, ref) {
    var _props$autoWidth = props.autoWidth, autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth, children = props.children, classes = props.classes, _props$displayEmpty = props.displayEmpty, displayEmpty = _props$displayEmpty === void 0 ? false : _props$displayEmpty, _props$IconComponent = props.IconComponent, IconComponent = _props$IconComponent === void 0 ? ArrowDropDown_default : _props$IconComponent, id = props.id, input = props.input, inputProps = props.inputProps, label = props.label, labelId = props.labelId, _props$labelWidth = props.labelWidth, labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth, MenuProps = props.MenuProps, _props$multiple = props.multiple, multiple = _props$multiple === void 0 ? false : _props$multiple, _props$native = props.native, native = _props$native === void 0 ? false : _props$native, onClose = props.onClose, onOpen = props.onOpen, open = props.open, renderValue = props.renderValue, SelectDisplayProps = props.SelectDisplayProps, _props$variant = props.variant, variantProps = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["autoWidth", "children", "classes", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "labelWidth", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"]);
    var inputComponent = native ? NativeSelectInput_default : SelectInput_default;
    var muiFormControl = useFormControl2();
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant"]
    });
    var variant = fcs.variant || variantProps;
    var InputComponent = input || {
      standard: _ref,
      outlined: /* @__PURE__ */ React79.createElement(OutlinedInput_default, {
        label,
        labelWidth
      }),
      filled: _ref2
    }[variant];
    return /* @__PURE__ */ React79.cloneElement(InputComponent, _extends({
      inputComponent,
      inputProps: _extends({
        children,
        IconComponent,
        variant,
        type: void 0,
        multiple
      }, native ? {
        id
      } : {
        autoWidth,
        displayEmpty,
        labelId,
        MenuProps,
        onClose,
        onOpen,
        open,
        renderValue,
        SelectDisplayProps: _extends({
          id
        }, SelectDisplayProps)
      }, inputProps, {
        classes: inputProps ? mergeClasses({
          baseClasses: classes,
          newClasses: inputProps.classes,
          Component: Select2
        }) : classes
      }, input ? input.props.inputProps : {}),
      ref
    }, other));
  });
  true ? Select.propTypes = {
    autoWidth: import_prop_types67.default.bool,
    children: import_prop_types67.default.node,
    classes: import_prop_types67.default.object,
    defaultValue: import_prop_types67.default.any,
    displayEmpty: import_prop_types67.default.bool,
    IconComponent: import_prop_types67.default.elementType,
    id: import_prop_types67.default.string,
    input: import_prop_types67.default.element,
    inputProps: import_prop_types67.default.object,
    label: import_prop_types67.default.node,
    labelId: import_prop_types67.default.string,
    labelWidth: import_prop_types67.default.number,
    MenuProps: import_prop_types67.default.object,
    multiple: import_prop_types67.default.bool,
    native: import_prop_types67.default.bool,
    onChange: import_prop_types67.default.func,
    onClose: import_prop_types67.default.func,
    onOpen: import_prop_types67.default.func,
    open: import_prop_types67.default.bool,
    renderValue: import_prop_types67.default.func,
    SelectDisplayProps: import_prop_types67.default.object,
    value: import_prop_types67.default.any,
    variant: import_prop_types67.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  Select.muiName = "Select";
  var Select_default = withStyles_default2(styles75, {
    name: "MuiSelect"
  })(Select);

  // node_modules/@material-ui/core/esm/TextField/TextField.js
  var React80 = __toModule(require_react());
  var import_prop_types68 = __toModule(require_prop_types());
  var variantComponent = {
    standard: Input_default,
    filled: FilledInput_default,
    outlined: OutlinedInput_default
  };
  var styles76 = {
    root: {}
  };
  var TextField = /* @__PURE__ */ React80.forwardRef(function TextField2(props, ref) {
    var autoComplete = props.autoComplete, _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus, children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "primary" : _props$color, defaultValue = props.defaultValue, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$error = props.error, error = _props$error === void 0 ? false : _props$error, FormHelperTextProps = props.FormHelperTextProps, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, helperText = props.helperText, hiddenLabel = props.hiddenLabel, id = props.id, InputLabelProps = props.InputLabelProps, inputProps = props.inputProps, InputProps = props.InputProps, inputRef = props.inputRef, label = props.label, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onFocus = props.onFocus, placeholder = props.placeholder, _props$required = props.required, required = _props$required === void 0 ? false : _props$required, rows = props.rows, rowsMax = props.rowsMax, maxRows = props.maxRows, minRows = props.minRows, _props$select = props.select, select = _props$select === void 0 ? false : _props$select, SelectProps = props.SelectProps, type = props.type, value = props.value, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["autoComplete", "autoFocus", "children", "classes", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "hiddenLabel", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "rowsMax", "maxRows", "minRows", "select", "SelectProps", "type", "value", "variant"]);
    if (true) {
      if (select && !children) {
        console.error("Material-UI: `children` must be passed when using the `TextField` component with `select`.");
      }
    }
    var InputMore = {};
    if (variant === "outlined") {
      if (InputLabelProps && typeof InputLabelProps.shrink !== "undefined") {
        InputMore.notched = InputLabelProps.shrink;
      }
      if (label) {
        var _InputLabelProps$requ;
        var displayRequired = (_InputLabelProps$requ = InputLabelProps === null || InputLabelProps === void 0 ? void 0 : InputLabelProps.required) !== null && _InputLabelProps$requ !== void 0 ? _InputLabelProps$requ : required;
        InputMore.label = /* @__PURE__ */ React80.createElement(React80.Fragment, null, label, displayRequired && "\xA0*");
      }
    }
    if (select) {
      if (!SelectProps || !SelectProps.native) {
        InputMore.id = void 0;
      }
      InputMore["aria-describedby"] = void 0;
    }
    var helperTextId = helperText && id ? "".concat(id, "-helper-text") : void 0;
    var inputLabelId = label && id ? "".concat(id, "-label") : void 0;
    var InputComponent = variantComponent[variant];
    var InputElement = /* @__PURE__ */ React80.createElement(InputComponent, _extends({
      "aria-describedby": helperTextId,
      autoComplete,
      autoFocus,
      defaultValue,
      fullWidth,
      multiline,
      name,
      rows,
      rowsMax,
      maxRows,
      minRows,
      type,
      value,
      id,
      inputRef,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      inputProps
    }, InputMore, InputProps));
    return /* @__PURE__ */ React80.createElement(FormControl_default, _extends({
      className: clsx_m_default(classes.root, className),
      disabled,
      error,
      fullWidth,
      hiddenLabel,
      ref,
      required,
      color: color2,
      variant
    }, other), label && /* @__PURE__ */ React80.createElement(InputLabel_default, _extends({
      htmlFor: id,
      id: inputLabelId
    }, InputLabelProps), label), select ? /* @__PURE__ */ React80.createElement(Select_default, _extends({
      "aria-describedby": helperTextId,
      id,
      labelId: inputLabelId,
      value,
      input: InputElement
    }, SelectProps), children) : InputElement, helperText && /* @__PURE__ */ React80.createElement(FormHelperText_default, _extends({
      id: helperTextId
    }, FormHelperTextProps), helperText));
  });
  true ? TextField.propTypes = {
    autoComplete: import_prop_types68.default.string,
    autoFocus: import_prop_types68.default.bool,
    children: import_prop_types68.default.node,
    classes: import_prop_types68.default.object,
    className: import_prop_types68.default.string,
    color: import_prop_types68.default.oneOf(["primary", "secondary"]),
    defaultValue: import_prop_types68.default.any,
    disabled: import_prop_types68.default.bool,
    error: import_prop_types68.default.bool,
    FormHelperTextProps: import_prop_types68.default.object,
    fullWidth: import_prop_types68.default.bool,
    helperText: import_prop_types68.default.node,
    hiddenLabel: import_prop_types68.default.bool,
    id: import_prop_types68.default.string,
    InputLabelProps: import_prop_types68.default.object,
    inputProps: import_prop_types68.default.object,
    InputProps: import_prop_types68.default.object,
    inputRef: refType_default,
    label: import_prop_types68.default.node,
    margin: import_prop_types68.default.oneOf(["dense", "none", "normal"]),
    maxRows: import_prop_types68.default.oneOfType([import_prop_types68.default.number, import_prop_types68.default.string]),
    minRows: import_prop_types68.default.oneOfType([import_prop_types68.default.number, import_prop_types68.default.string]),
    multiline: import_prop_types68.default.bool,
    name: import_prop_types68.default.string,
    onBlur: import_prop_types68.default.func,
    onChange: import_prop_types68.default.func,
    onFocus: import_prop_types68.default.func,
    placeholder: import_prop_types68.default.string,
    required: import_prop_types68.default.bool,
    rows: import_prop_types68.default.oneOfType([import_prop_types68.default.number, import_prop_types68.default.string]),
    rowsMax: import_prop_types68.default.oneOfType([import_prop_types68.default.number, import_prop_types68.default.string]),
    select: import_prop_types68.default.bool,
    SelectProps: import_prop_types68.default.object,
    size: import_prop_types68.default.oneOf(["medium", "small"]),
    type: import_prop_types68.default.string,
    value: import_prop_types68.default.any,
    variant: import_prop_types68.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var TextField_default = withStyles_default2(styles76, {
    name: "MuiTextField"
  })(TextField);

  // node_modules/@material-ui/core/esm/Tooltip/Tooltip.js
  var React81 = __toModule(require_react());
  var ReactDOM12 = __toModule(require_react_dom());
  var import_prop_types69 = __toModule(require_prop_types());
  function round2(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  function arrowGenerator() {
    return {
      '&[x-placement*="bottom"] $arrow': {
        top: 0,
        left: 0,
        marginTop: "-0.71em",
        marginLeft: 4,
        marginRight: 4,
        "&::before": {
          transformOrigin: "0 100%"
        }
      },
      '&[x-placement*="top"] $arrow': {
        bottom: 0,
        left: 0,
        marginBottom: "-0.71em",
        marginLeft: 4,
        marginRight: 4,
        "&::before": {
          transformOrigin: "100% 0"
        }
      },
      '&[x-placement*="right"] $arrow': {
        left: 0,
        marginLeft: "-0.71em",
        height: "1em",
        width: "0.71em",
        marginTop: 4,
        marginBottom: 4,
        "&::before": {
          transformOrigin: "100% 100%"
        }
      },
      '&[x-placement*="left"] $arrow': {
        right: 0,
        marginRight: "-0.71em",
        height: "1em",
        width: "0.71em",
        marginTop: 4,
        marginBottom: 4,
        "&::before": {
          transformOrigin: "0 0"
        }
      }
    };
  }
  var styles77 = function styles78(theme2) {
    return {
      popper: {
        zIndex: theme2.zIndex.tooltip,
        pointerEvents: "none"
      },
      popperInteractive: {
        pointerEvents: "auto"
      },
      popperArrow: arrowGenerator(),
      tooltip: {
        backgroundColor: alpha(theme2.palette.grey[700], 0.9),
        borderRadius: theme2.shape.borderRadius,
        color: theme2.palette.common.white,
        fontFamily: theme2.typography.fontFamily,
        padding: "4px 8px",
        fontSize: theme2.typography.pxToRem(10),
        lineHeight: "".concat(round2(14 / 10), "em"),
        maxWidth: 300,
        wordWrap: "break-word",
        fontWeight: theme2.typography.fontWeightMedium
      },
      tooltipArrow: {
        position: "relative",
        margin: "0"
      },
      arrow: {
        overflow: "hidden",
        position: "absolute",
        width: "1em",
        height: "0.71em",
        boxSizing: "border-box",
        color: alpha(theme2.palette.grey[700], 0.9),
        "&::before": {
          content: '""',
          margin: "auto",
          display: "block",
          width: "100%",
          height: "100%",
          backgroundColor: "currentColor",
          transform: "rotate(45deg)"
        }
      },
      touch: {
        padding: "8px 16px",
        fontSize: theme2.typography.pxToRem(14),
        lineHeight: "".concat(round2(16 / 14), "em"),
        fontWeight: theme2.typography.fontWeightRegular
      },
      tooltipPlacementLeft: _defineProperty2({
        transformOrigin: "right center",
        margin: "0 24px "
      }, theme2.breakpoints.up("sm"), {
        margin: "0 14px"
      }),
      tooltipPlacementRight: _defineProperty2({
        transformOrigin: "left center",
        margin: "0 24px"
      }, theme2.breakpoints.up("sm"), {
        margin: "0 14px"
      }),
      tooltipPlacementTop: _defineProperty2({
        transformOrigin: "center bottom",
        margin: "24px 0"
      }, theme2.breakpoints.up("sm"), {
        margin: "14px 0"
      }),
      tooltipPlacementBottom: _defineProperty2({
        transformOrigin: "center top",
        margin: "24px 0"
      }, theme2.breakpoints.up("sm"), {
        margin: "14px 0"
      })
    };
  };
  var hystersisOpen = false;
  var hystersisTimer = null;
  var Tooltip = /* @__PURE__ */ React81.forwardRef(function Tooltip2(props, ref) {
    var _props$arrow = props.arrow, arrow2 = _props$arrow === void 0 ? false : _props$arrow, children = props.children, classes = props.classes, _props$disableFocusLi = props.disableFocusListener, disableFocusListener = _props$disableFocusLi === void 0 ? false : _props$disableFocusLi, _props$disableHoverLi = props.disableHoverListener, disableHoverListener = _props$disableHoverLi === void 0 ? false : _props$disableHoverLi, _props$disableTouchLi = props.disableTouchListener, disableTouchListener = _props$disableTouchLi === void 0 ? false : _props$disableTouchLi, _props$enterDelay = props.enterDelay, enterDelay = _props$enterDelay === void 0 ? 100 : _props$enterDelay, _props$enterNextDelay = props.enterNextDelay, enterNextDelay = _props$enterNextDelay === void 0 ? 0 : _props$enterNextDelay, _props$enterTouchDela = props.enterTouchDelay, enterTouchDelay = _props$enterTouchDela === void 0 ? 700 : _props$enterTouchDela, idProp = props.id, _props$interactive = props.interactive, interactive = _props$interactive === void 0 ? false : _props$interactive, _props$leaveDelay = props.leaveDelay, leaveDelay = _props$leaveDelay === void 0 ? 0 : _props$leaveDelay, _props$leaveTouchDela = props.leaveTouchDelay, leaveTouchDelay = _props$leaveTouchDela === void 0 ? 1500 : _props$leaveTouchDela, onClose = props.onClose, onOpen = props.onOpen, openProp = props.open, _props$placement = props.placement, placement = _props$placement === void 0 ? "bottom" : _props$placement, _props$PopperComponen = props.PopperComponent, PopperComponent = _props$PopperComponen === void 0 ? Popper_default : _props$PopperComponen, PopperProps = props.PopperProps, title = props.title, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Grow_default : _props$TransitionComp, TransitionProps = props.TransitionProps, other = _objectWithoutProperties(props, ["arrow", "children", "classes", "disableFocusListener", "disableHoverListener", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "id", "interactive", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "title", "TransitionComponent", "TransitionProps"]);
    var theme2 = useTheme2();
    var _React$useState = React81.useState(), childNode = _React$useState[0], setChildNode = _React$useState[1];
    var _React$useState2 = React81.useState(null), arrowRef = _React$useState2[0], setArrowRef = _React$useState2[1];
    var ignoreNonTouchEvents = React81.useRef(false);
    var closeTimer = React81.useRef();
    var enterTimer = React81.useRef();
    var leaveTimer = React81.useRef();
    var touchTimer = React81.useRef();
    var _useControlled = useControlled({
      controlled: openProp,
      default: false,
      name: "Tooltip",
      state: "open"
    }), _useControlled2 = _slicedToArray(_useControlled, 2), openState = _useControlled2[0], setOpenState = _useControlled2[1];
    var open = openState;
    if (true) {
      var _React$useRef = React81.useRef(openProp !== void 0), isControlled = _React$useRef.current;
      React81.useEffect(function() {
        if (childNode && childNode.disabled && !isControlled && title !== "" && childNode.tagName.toLowerCase() === "button") {
          console.error(["Material-UI: You are providing a disabled `button` child to the Tooltip component.", "A disabled element does not fire events.", "Tooltip needs to listen to the child element's events to display the title.", "", "Add a simple wrapper element, such as a `span`."].join("\n"));
        }
      }, [title, childNode, isControlled]);
    }
    var id = useId(idProp);
    React81.useEffect(function() {
      return function() {
        clearTimeout(closeTimer.current);
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
        clearTimeout(touchTimer.current);
      };
    }, []);
    var handleOpen = function handleOpen2(event) {
      clearTimeout(hystersisTimer);
      hystersisOpen = true;
      setOpenState(true);
      if (onOpen) {
        onOpen(event);
      }
    };
    var handleEnter = function handleEnter2() {
      var forward = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      return function(event) {
        var childrenProps2 = children.props;
        if (event.type === "mouseover" && childrenProps2.onMouseOver && forward) {
          childrenProps2.onMouseOver(event);
        }
        if (ignoreNonTouchEvents.current && event.type !== "touchstart") {
          return;
        }
        if (childNode) {
          childNode.removeAttribute("title");
        }
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
        if (enterDelay || hystersisOpen && enterNextDelay) {
          event.persist();
          enterTimer.current = setTimeout(function() {
            handleOpen(event);
          }, hystersisOpen ? enterNextDelay : enterDelay);
        } else {
          handleOpen(event);
        }
      };
    };
    var _useIsFocusVisible = useIsFocusVisible(), isFocusVisible2 = _useIsFocusVisible.isFocusVisible, onBlurVisible = _useIsFocusVisible.onBlurVisible, focusVisibleRef = _useIsFocusVisible.ref;
    var _React$useState3 = React81.useState(false), childIsFocusVisible = _React$useState3[0], setChildIsFocusVisible = _React$useState3[1];
    var handleBlur = function handleBlur2() {
      if (childIsFocusVisible) {
        setChildIsFocusVisible(false);
        onBlurVisible();
      }
    };
    var handleFocus = function handleFocus2() {
      var forward = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      return function(event) {
        if (!childNode) {
          setChildNode(event.currentTarget);
        }
        if (isFocusVisible2(event)) {
          setChildIsFocusVisible(true);
          handleEnter()(event);
        }
        var childrenProps2 = children.props;
        if (childrenProps2.onFocus && forward) {
          childrenProps2.onFocus(event);
        }
      };
    };
    var handleClose = function handleClose2(event) {
      clearTimeout(hystersisTimer);
      hystersisTimer = setTimeout(function() {
        hystersisOpen = false;
      }, 800 + leaveDelay);
      setOpenState(false);
      if (onClose) {
        onClose(event);
      }
      clearTimeout(closeTimer.current);
      closeTimer.current = setTimeout(function() {
        ignoreNonTouchEvents.current = false;
      }, theme2.transitions.duration.shortest);
    };
    var handleLeave = function handleLeave2() {
      var forward = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      return function(event) {
        var childrenProps2 = children.props;
        if (event.type === "blur") {
          if (childrenProps2.onBlur && forward) {
            childrenProps2.onBlur(event);
          }
          handleBlur();
        }
        if (event.type === "mouseleave" && childrenProps2.onMouseLeave && event.currentTarget === childNode) {
          childrenProps2.onMouseLeave(event);
        }
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
        event.persist();
        leaveTimer.current = setTimeout(function() {
          handleClose(event);
        }, leaveDelay);
      };
    };
    var detectTouchStart = function detectTouchStart2(event) {
      ignoreNonTouchEvents.current = true;
      var childrenProps2 = children.props;
      if (childrenProps2.onTouchStart) {
        childrenProps2.onTouchStart(event);
      }
    };
    var handleTouchStart = function handleTouchStart2(event) {
      detectTouchStart(event);
      clearTimeout(leaveTimer.current);
      clearTimeout(closeTimer.current);
      clearTimeout(touchTimer.current);
      event.persist();
      touchTimer.current = setTimeout(function() {
        handleEnter()(event);
      }, enterTouchDelay);
    };
    var handleTouchEnd = function handleTouchEnd2(event) {
      if (children.props.onTouchEnd) {
        children.props.onTouchEnd(event);
      }
      clearTimeout(touchTimer.current);
      clearTimeout(leaveTimer.current);
      event.persist();
      leaveTimer.current = setTimeout(function() {
        handleClose(event);
      }, leaveTouchDelay);
    };
    var handleUseRef = useForkRef(setChildNode, ref);
    var handleFocusRef = useForkRef(focusVisibleRef, handleUseRef);
    var handleOwnRef = React81.useCallback(function(instance) {
      setRef(handleFocusRef, ReactDOM12.findDOMNode(instance));
    }, [handleFocusRef]);
    var handleRef = useForkRef(children.ref, handleOwnRef);
    if (title === "") {
      open = false;
    }
    var shouldShowNativeTitle = !open && !disableHoverListener;
    var childrenProps = _extends({
      "aria-describedby": open ? id : null,
      title: shouldShowNativeTitle && typeof title === "string" ? title : null
    }, other, children.props, {
      className: clsx_m_default(other.className, children.props.className),
      onTouchStart: detectTouchStart,
      ref: handleRef
    });
    var interactiveWrapperListeners = {};
    if (!disableTouchListener) {
      childrenProps.onTouchStart = handleTouchStart;
      childrenProps.onTouchEnd = handleTouchEnd;
    }
    if (!disableHoverListener) {
      childrenProps.onMouseOver = handleEnter();
      childrenProps.onMouseLeave = handleLeave();
      if (interactive) {
        interactiveWrapperListeners.onMouseOver = handleEnter(false);
        interactiveWrapperListeners.onMouseLeave = handleLeave(false);
      }
    }
    if (!disableFocusListener) {
      childrenProps.onFocus = handleFocus();
      childrenProps.onBlur = handleLeave();
      if (interactive) {
        interactiveWrapperListeners.onFocus = handleFocus(false);
        interactiveWrapperListeners.onBlur = handleLeave(false);
      }
    }
    if (true) {
      if (children.props.title) {
        console.error(["Material-UI: You have provided a `title` prop to the child of <Tooltip />.", "Remove this title prop `".concat(children.props.title, "` or the Tooltip component.")].join("\n"));
      }
    }
    var mergedPopperProps = React81.useMemo(function() {
      return deepmerge({
        popperOptions: {
          modifiers: {
            arrow: {
              enabled: Boolean(arrowRef),
              element: arrowRef
            }
          }
        }
      }, PopperProps);
    }, [arrowRef, PopperProps]);
    return /* @__PURE__ */ React81.createElement(React81.Fragment, null, /* @__PURE__ */ React81.cloneElement(children, childrenProps), /* @__PURE__ */ React81.createElement(PopperComponent, _extends({
      className: clsx_m_default(classes.popper, interactive && classes.popperInteractive, arrow2 && classes.popperArrow),
      placement,
      anchorEl: childNode,
      open: childNode ? open : false,
      id: childrenProps["aria-describedby"],
      transition: true
    }, interactiveWrapperListeners, mergedPopperProps), function(_ref3) {
      var placementInner = _ref3.placement, TransitionPropsInner = _ref3.TransitionProps;
      return /* @__PURE__ */ React81.createElement(TransitionComponent, _extends({
        timeout: theme2.transitions.duration.shorter
      }, TransitionPropsInner, TransitionProps), /* @__PURE__ */ React81.createElement("div", {
        className: clsx_m_default(classes.tooltip, classes["tooltipPlacement".concat(capitalize(placementInner.split("-")[0]))], ignoreNonTouchEvents.current && classes.touch, arrow2 && classes.tooltipArrow)
      }, title, arrow2 ? /* @__PURE__ */ React81.createElement("span", {
        className: classes.arrow,
        ref: setArrowRef
      }) : null));
    }));
  });
  true ? Tooltip.propTypes = {
    arrow: import_prop_types69.default.bool,
    children: elementAcceptingRef_default.isRequired,
    classes: import_prop_types69.default.object,
    className: import_prop_types69.default.string,
    disableFocusListener: import_prop_types69.default.bool,
    disableHoverListener: import_prop_types69.default.bool,
    disableTouchListener: import_prop_types69.default.bool,
    enterDelay: import_prop_types69.default.number,
    enterNextDelay: import_prop_types69.default.number,
    enterTouchDelay: import_prop_types69.default.number,
    id: import_prop_types69.default.string,
    interactive: import_prop_types69.default.bool,
    leaveDelay: import_prop_types69.default.number,
    leaveTouchDelay: import_prop_types69.default.number,
    onClose: import_prop_types69.default.func,
    onOpen: import_prop_types69.default.func,
    open: import_prop_types69.default.bool,
    placement: import_prop_types69.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    PopperComponent: import_prop_types69.default.elementType,
    PopperProps: import_prop_types69.default.object,
    title: import_prop_types69.default.node.isRequired,
    TransitionComponent: import_prop_types69.default.elementType,
    TransitionProps: import_prop_types69.default.object
  } : void 0;
  var Tooltip_default = withStyles_default2(styles77, {
    name: "MuiTooltip",
    flip: false
  })(Tooltip);

  // client/adminComponents/DataList.jsx
  var import_react23 = __toModule(require_react());
  var import_prop_types79 = __toModule(require_prop_types());

  // client/adminComponents/globalNavState.js
  var PaginationState = Recoil_index_4({
    key: "PaginationState",
    default: {
      currentPage: 1,
      perPage: 25
    }
  });
  var SortingState = Recoil_index_4({
    key: "SortingState",
    default: {
      sortBy: "",
      sortOrder: 1
    }
  });
  var FilteringState = Recoil_index_4({
    key: "FilteringState",
    default: {
      filterBy: "",
      filterText: ""
    }
  });
  var AdvancedNavigationState = Recoil_index_4({
    key: "AdvancedNavigationState",
    default: false
  });

  // node_modules/@material-ui/icons/esm/Add.js
  var React82 = __toModule(require_react());
  var Add_default = createSvgIcon(/* @__PURE__ */ React82.createElement("path", {
    d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
  }), "Add");

  // node_modules/@material-ui/icons/esm/Cancel.js
  var React83 = __toModule(require_react());
  var Cancel_default = createSvgIcon(/* @__PURE__ */ React83.createElement("path", {
    d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
  }), "Cancel");

  // node_modules/@material-ui/icons/esm/Delete.js
  var React84 = __toModule(require_react());
  var Delete_default = createSvgIcon(/* @__PURE__ */ React84.createElement("path", {
    d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
  }), "Delete");

  // node_modules/@material-ui/icons/esm/Domain.js
  var React85 = __toModule(require_react());
  var Domain_default = createSvgIcon(/* @__PURE__ */ React85.createElement("path", {
    d: "M12 7V3H2v18h20V7H12zM6 19H4v-2h2v2zm0-4H4v-2h2v2zm0-4H4V9h2v2zm0-4H4V5h2v2zm4 12H8v-2h2v2zm0-4H8v-2h2v2zm0-4H8V9h2v2zm0-4H8V5h2v2zm10 12h-8v-2h2v-2h-2v-2h2v-2h-2V9h8v10zm-2-8h-2v2h2v-2zm0 4h-2v2h2v-2z"
  }), "Domain");

  // node_modules/@material-ui/icons/esm/Group.js
  var React86 = __toModule(require_react());
  var Group_default = createSvgIcon(/* @__PURE__ */ React86.createElement("path", {
    d: "M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z"
  }), "Group");

  // node_modules/@material-ui/icons/esm/Person.js
  var React87 = __toModule(require_react());
  var Person_default2 = createSvgIcon(/* @__PURE__ */ React87.createElement("path", {
    d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
  }), "Person");

  // node_modules/@material-ui/icons/esm/Settings.js
  var React88 = __toModule(require_react());
  var Settings_default = createSvgIcon(/* @__PURE__ */ React88.createElement("path", {
    d: "M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z"
  }), "Settings");

  // node_modules/@material-ui/icons/esm/Sort.js
  var React89 = __toModule(require_react());
  var Sort_default = createSvgIcon(/* @__PURE__ */ React89.createElement("path", {
    d: "M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z"
  }), "Sort");

  // node_modules/@material-ui/icons/esm/ThumbUpAlt.js
  var React90 = __toModule(require_react());
  var ThumbUpAlt_default = createSvgIcon(/* @__PURE__ */ React90.createElement("path", {
    d: "M2 20h2c.55 0 1-.45 1-1v-9c0-.55-.45-1-1-1H2v11zm19.83-7.12c.11-.25.17-.52.17-.8V11c0-1.1-.9-2-2-2h-5.5l.92-4.65c.05-.22.02-.46-.08-.66-.23-.45-.52-.86-.88-1.22L14 2 7.59 8.41C7.21 8.79 7 9.3 7 9.83v7.84C7 18.95 8.05 20 9.34 20h8.11c.7 0 1.36-.37 1.72-.97l2.66-6.15z"
  }), "ThumbUpAlt");

  // client/sharedComponents/KarunaIcon.jsx
  var import_react15 = __toModule(require_react());
  var useStyles = makeStyles_default((theme2) => ({
    avatarStyle: {
      margin: theme2.spacing(1),
      backgroundColor: "#81c784",
      width: theme2.spacing(9),
      height: theme2.spacing(9)
    },
    iconStyle: {
      fontFamily: '"Plaster", cursive',
      fontSize: "xxx-large",
      textAlign: "center",
      color: "#115293"
    }
  }));
  function KarunaIcon() {
    const { avatarStyle, iconStyle } = useStyles();
    return /* @__PURE__ */ import_react15.default.createElement(Avatar_default, {
      className: avatarStyle
    }, /* @__PURE__ */ import_react15.default.createElement(Icon_default, {
      className: iconStyle
    }, "K"));
  }

  // client/adminComponents/DataListNavBar.jsx
  var import_react16 = __toModule(require_react());
  var import_prop_types72 = __toModule(require_prop_types());

  // node_modules/@material-ui/lab/esm/Pagination/Pagination.js
  var React97 = __toModule(require_react());
  var import_prop_types71 = __toModule(require_prop_types());

  // node_modules/@material-ui/lab/esm/Pagination/usePagination.js
  function usePagination() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var _props$boundaryCount = props.boundaryCount, boundaryCount = _props$boundaryCount === void 0 ? 1 : _props$boundaryCount, _props$componentName = props.componentName, componentName = _props$componentName === void 0 ? "usePagination" : _props$componentName, _props$count = props.count, count = _props$count === void 0 ? 1 : _props$count, _props$defaultPage = props.defaultPage, defaultPage = _props$defaultPage === void 0 ? 1 : _props$defaultPage, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$hideNextButton = props.hideNextButton, hideNextButton = _props$hideNextButton === void 0 ? false : _props$hideNextButton, _props$hidePrevButton = props.hidePrevButton, hidePrevButton = _props$hidePrevButton === void 0 ? false : _props$hidePrevButton, handleChange = props.onChange, pageProp = props.page, _props$showFirstButto = props.showFirstButton, showFirstButton = _props$showFirstButto === void 0 ? false : _props$showFirstButto, _props$showLastButton = props.showLastButton, showLastButton = _props$showLastButton === void 0 ? false : _props$showLastButton, _props$siblingCount = props.siblingCount, siblingCount = _props$siblingCount === void 0 ? 1 : _props$siblingCount, other = _objectWithoutProperties(props, ["boundaryCount", "componentName", "count", "defaultPage", "disabled", "hideNextButton", "hidePrevButton", "onChange", "page", "showFirstButton", "showLastButton", "siblingCount"]);
    var _useControlled = useControlled({
      controlled: pageProp,
      default: defaultPage,
      name: componentName,
      state: "page"
    }), _useControlled2 = _slicedToArray(_useControlled, 2), page = _useControlled2[0], setPageState = _useControlled2[1];
    var handleClick = function handleClick2(event, value) {
      if (!pageProp) {
        setPageState(value);
      }
      if (handleChange) {
        handleChange(event, value);
      }
    };
    var range = function range2(start, end) {
      var length = end - start + 1;
      return Array.from({
        length
      }, function(_, i) {
        return start + i;
      });
    };
    var startPages = range(1, Math.min(boundaryCount, count));
    var endPages = range(Math.max(count - boundaryCount + 1, boundaryCount + 1), count);
    var siblingsStart = Math.max(Math.min(page - siblingCount, count - boundaryCount - siblingCount * 2 - 1), boundaryCount + 2);
    var siblingsEnd = Math.min(Math.max(page + siblingCount, boundaryCount + siblingCount * 2 + 2), endPages[0] - 2);
    var itemList = [].concat(_toConsumableArray(showFirstButton ? ["first"] : []), _toConsumableArray(hidePrevButton ? [] : ["previous"]), _toConsumableArray(startPages), _toConsumableArray(siblingsStart > boundaryCount + 2 ? ["start-ellipsis"] : boundaryCount + 1 < count - boundaryCount ? [boundaryCount + 1] : []), _toConsumableArray(range(siblingsStart, siblingsEnd)), _toConsumableArray(siblingsEnd < count - boundaryCount - 1 ? ["end-ellipsis"] : count - boundaryCount > boundaryCount ? [count - boundaryCount] : []), _toConsumableArray(endPages), _toConsumableArray(hideNextButton ? [] : ["next"]), _toConsumableArray(showLastButton ? ["last"] : []));
    var buttonPage = function buttonPage2(type) {
      switch (type) {
        case "first":
          return 1;
        case "previous":
          return page - 1;
        case "next":
          return page + 1;
        case "last":
          return count;
        default:
          return null;
      }
    };
    var items = itemList.map(function(item) {
      return typeof item === "number" ? {
        onClick: function onClick(event) {
          handleClick(event, item);
        },
        type: "page",
        page: item,
        selected: item === page,
        disabled,
        "aria-current": item === page ? "true" : void 0
      } : {
        onClick: function onClick(event) {
          handleClick(event, buttonPage(item));
        },
        type: item,
        page: buttonPage(item),
        selected: false,
        disabled: disabled || item.indexOf("ellipsis") === -1 && (item === "next" || item === "last" ? page >= count : page <= 1)
      };
    });
    return _extends({
      items
    }, other);
  }

  // node_modules/@material-ui/lab/esm/PaginationItem/PaginationItem.js
  var React96 = __toModule(require_react());
  var import_prop_types70 = __toModule(require_prop_types());

  // node_modules/@material-ui/lab/esm/internal/svg-icons/FirstPage.js
  var React92 = __toModule(require_react());
  var FirstPage_default = createSvgIcon(/* @__PURE__ */ React92.createElement("path", {
    d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
  }), "FirstPage");

  // node_modules/@material-ui/lab/esm/internal/svg-icons/LastPage.js
  var React93 = __toModule(require_react());
  var LastPage_default = createSvgIcon(/* @__PURE__ */ React93.createElement("path", {
    d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
  }), "LastPage");

  // node_modules/@material-ui/lab/esm/internal/svg-icons/NavigateBefore.js
  var React94 = __toModule(require_react());
  var NavigateBefore_default = createSvgIcon(/* @__PURE__ */ React94.createElement("path", {
    d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
  }), "NavigateBefore");

  // node_modules/@material-ui/lab/esm/internal/svg-icons/NavigateNext.js
  var React95 = __toModule(require_react());
  var NavigateNext_default = createSvgIcon(/* @__PURE__ */ React95.createElement("path", {
    d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
  }), "NavigateNext");

  // node_modules/@material-ui/lab/esm/PaginationItem/PaginationItem.js
  var styles79 = function styles80(theme2) {
    return {
      root: _extends({}, theme2.typography.body2, {
        borderRadius: 32 / 2,
        textAlign: "center",
        boxSizing: "border-box",
        minWidth: 32,
        height: 32,
        padding: "0 6px",
        margin: "0 3px",
        color: theme2.palette.text.primary
      }),
      page: {
        transition: theme2.transitions.create(["color", "background-color"], {
          duration: theme2.transitions.duration.short
        }),
        "&:hover": {
          backgroundColor: theme2.palette.action.hover,
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        "&$focusVisible": {
          backgroundColor: theme2.palette.action.focus
        },
        "&$selected": {
          backgroundColor: theme2.palette.action.selected,
          "&:hover, &$focusVisible": {
            backgroundColor: alpha(theme2.palette.action.selected, theme2.palette.action.selectedOpacity + theme2.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: theme2.palette.action.selected
            }
          },
          "&$disabled": {
            opacity: 1,
            color: theme2.palette.action.disabled,
            backgroundColor: theme2.palette.action.selected
          }
        },
        "&$disabled": {
          opacity: theme2.palette.action.disabledOpacity
        }
      },
      sizeSmall: {
        minWidth: 26,
        height: 26,
        borderRadius: 26 / 2,
        margin: "0 1px",
        padding: "0 4px",
        "& $icon": {
          fontSize: theme2.typography.pxToRem(18)
        }
      },
      sizeLarge: {
        minWidth: 40,
        height: 40,
        borderRadius: 40 / 2,
        padding: "0 10px",
        fontSize: theme2.typography.pxToRem(15),
        "& $icon": {
          fontSize: theme2.typography.pxToRem(22)
        }
      },
      textPrimary: {
        "&$selected": {
          color: theme2.palette.primary.contrastText,
          backgroundColor: theme2.palette.primary.main,
          "&:hover, &$focusVisible": {
            backgroundColor: theme2.palette.primary.dark,
            "@media (hover: none)": {
              backgroundColor: theme2.palette.primary.main
            }
          },
          "&$disabled": {
            color: theme2.palette.action.disabled
          }
        }
      },
      textSecondary: {
        "&$selected": {
          color: theme2.palette.secondary.contrastText,
          backgroundColor: theme2.palette.secondary.main,
          "&:hover, &$focusVisible": {
            backgroundColor: theme2.palette.secondary.dark,
            "@media (hover: none)": {
              backgroundColor: theme2.palette.secondary.main
            }
          },
          "&$disabled": {
            color: theme2.palette.action.disabled
          }
        }
      },
      outlined: {
        border: "1px solid ".concat(theme2.palette.type === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"),
        "&$selected": {
          "&$disabled": {
            border: "1px solid ".concat(theme2.palette.action.disabledBackground)
          }
        }
      },
      outlinedPrimary: {
        "&$selected": {
          color: theme2.palette.primary.main,
          border: "1px solid ".concat(alpha(theme2.palette.primary.main, 0.5)),
          backgroundColor: alpha(theme2.palette.primary.main, theme2.palette.action.activatedOpacity),
          "&:hover, &$focusVisible": {
            backgroundColor: alpha(theme2.palette.primary.main, theme2.palette.action.activatedOpacity + theme2.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          },
          "&$disabled": {
            color: theme2.palette.action.disabled
          }
        }
      },
      outlinedSecondary: {
        "&$selected": {
          color: theme2.palette.secondary.main,
          border: "1px solid ".concat(alpha(theme2.palette.secondary.main, 0.5)),
          backgroundColor: alpha(theme2.palette.secondary.main, theme2.palette.action.activatedOpacity),
          "&:hover, &$focusVisible": {
            backgroundColor: alpha(theme2.palette.secondary.main, theme2.palette.action.activatedOpacity + theme2.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          },
          "&$disabled": {
            color: theme2.palette.action.disabled
          }
        }
      },
      rounded: {
        borderRadius: theme2.shape.borderRadius
      },
      ellipsis: {
        height: "auto",
        "&$disabled": {
          opacity: theme2.palette.action.disabledOpacity
        }
      },
      focusVisible: {},
      disabled: {},
      selected: {},
      icon: {
        fontSize: theme2.typography.pxToRem(20),
        margin: "0 -8px"
      }
    };
  };
  var PaginationItem = /* @__PURE__ */ React96.forwardRef(function PaginationItem2(props, ref) {
    var classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "standard" : _props$color, component = props.component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, page = props.page, _props$selected = props.selected, selected = _props$selected === void 0 ? false : _props$selected, _props$shape = props.shape, shape2 = _props$shape === void 0 ? "round" : _props$shape, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, _props$type = props.type, type = _props$type === void 0 ? "page" : _props$type, _props$variant = props.variant, variant = _props$variant === void 0 ? "text" : _props$variant, other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "disabled", "page", "selected", "shape", "size", "type", "variant"]);
    var theme2 = useTheme2();
    var normalizedIcons = theme2.direction === "rtl" ? {
      previous: NavigateNext_default,
      next: NavigateBefore_default,
      last: FirstPage_default,
      first: LastPage_default
    } : {
      previous: NavigateBefore_default,
      next: NavigateNext_default,
      first: FirstPage_default,
      last: LastPage_default
    };
    var Icon3 = normalizedIcons[type];
    return type === "start-ellipsis" || type === "end-ellipsis" ? /* @__PURE__ */ React96.createElement("div", {
      ref,
      className: clsx_m_default(classes.root, classes.ellipsis, disabled && classes.disabled, size !== "medium" && classes["size".concat(capitalize(size))])
    }, "\u2026") : /* @__PURE__ */ React96.createElement(ButtonBase_default, _extends({
      ref,
      component,
      disabled,
      focusVisibleClassName: classes.focusVisible,
      className: clsx_m_default(classes.root, classes.page, classes[variant], classes[shape2], className, color2 !== "standard" && classes["".concat(variant).concat(capitalize(color2))], disabled && classes.disabled, selected && classes.selected, size !== "medium" && classes["size".concat(capitalize(size))])
    }, other), type === "page" && page, Icon3 ? /* @__PURE__ */ React96.createElement(Icon3, {
      className: classes.icon
    }) : null);
  });
  true ? PaginationItem.propTypes = {
    classes: import_prop_types70.default.object.isRequired,
    className: import_prop_types70.default.string,
    color: import_prop_types70.default.oneOf(["standard", "primary", "secondary"]),
    component: import_prop_types70.default.elementType,
    disabled: import_prop_types70.default.bool,
    page: import_prop_types70.default.number,
    selected: import_prop_types70.default.bool,
    shape: import_prop_types70.default.oneOf(["round", "rounded"]),
    size: import_prop_types70.default.oneOf(["small", "medium", "large"]),
    type: import_prop_types70.default.oneOf(["page", "first", "last", "next", "previous", "start-ellipsis", "end-ellipsis"]),
    variant: import_prop_types70.default.oneOf(["text", "outlined"])
  } : void 0;
  var PaginationItem_default = withStyles_default2(styles79, {
    name: "MuiPaginationItem"
  })(PaginationItem);

  // node_modules/@material-ui/lab/esm/Pagination/Pagination.js
  var styles81 = {
    root: {},
    ul: {
      display: "flex",
      flexWrap: "wrap",
      alignItems: "center",
      padding: 0,
      margin: 0,
      listStyle: "none"
    }
  };
  function defaultGetAriaLabel(type, page, selected) {
    if (type === "page") {
      return "".concat(selected ? "" : "Go to ", "page ").concat(page);
    }
    return "Go to ".concat(type, " page");
  }
  var Pagination = /* @__PURE__ */ React97.forwardRef(function Pagination2(props, ref) {
    var boundaryCount = props.boundaryCount, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "standard" : _props$color, count = props.count, defaultPage = props.defaultPage, disabled = props.disabled, _props$getItemAriaLab = props.getItemAriaLabel, getItemAriaLabel = _props$getItemAriaLab === void 0 ? defaultGetAriaLabel : _props$getItemAriaLab, hideNextButton = props.hideNextButton, hidePrevButton = props.hidePrevButton, onChange = props.onChange, page = props.page, _props$renderItem = props.renderItem, renderItem = _props$renderItem === void 0 ? function(item) {
      return /* @__PURE__ */ React97.createElement(PaginationItem_default, item);
    } : _props$renderItem, _props$shape = props.shape, shape2 = _props$shape === void 0 ? "round" : _props$shape, showFirstButton = props.showFirstButton, showLastButton = props.showLastButton, siblingCount = props.siblingCount, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, _props$variant = props.variant, variant = _props$variant === void 0 ? "text" : _props$variant, other = _objectWithoutProperties(props, ["boundaryCount", "classes", "className", "color", "count", "defaultPage", "disabled", "getItemAriaLabel", "hideNextButton", "hidePrevButton", "onChange", "page", "renderItem", "shape", "showFirstButton", "showLastButton", "siblingCount", "size", "variant"]);
    var _usePagination = usePagination(_extends({}, props, {
      componentName: "Pagination"
    })), items = _usePagination.items;
    return /* @__PURE__ */ React97.createElement("nav", _extends({
      "aria-label": "pagination navigation",
      className: clsx_m_default(classes.root, className),
      ref
    }, other), /* @__PURE__ */ React97.createElement("ul", {
      className: classes.ul
    }, items.map(function(item, index) {
      return /* @__PURE__ */ React97.createElement("li", {
        key: index
      }, renderItem(_extends({}, item, {
        color: color2,
        "aria-label": getItemAriaLabel(item.type, item.page, item.selected),
        shape: shape2,
        size,
        variant
      })));
    })));
  });
  true ? Pagination.propTypes = {
    boundaryCount: import_prop_types71.default.number,
    classes: import_prop_types71.default.object,
    className: import_prop_types71.default.string,
    color: import_prop_types71.default.oneOf(["primary", "secondary", "standard"]),
    count: import_prop_types71.default.number,
    defaultPage: import_prop_types71.default.number,
    disabled: import_prop_types71.default.bool,
    getItemAriaLabel: import_prop_types71.default.func,
    hideNextButton: import_prop_types71.default.bool,
    hidePrevButton: import_prop_types71.default.bool,
    onChange: import_prop_types71.default.func,
    page: import_prop_types71.default.number,
    renderItem: import_prop_types71.default.func,
    shape: import_prop_types71.default.oneOf(["round", "rounded"]),
    showFirstButton: import_prop_types71.default.bool,
    showLastButton: import_prop_types71.default.bool,
    siblingCount: import_prop_types71.default.number,
    size: import_prop_types71.default.oneOf(["large", "medium", "small"]),
    variant: import_prop_types71.default.oneOf(["outlined", "text"])
  } : void 0;
  var Pagination_default = withStyles_default2(styles81, {
    name: "MuiPagination"
  })(Pagination);

  // client/adminComponents/DataListNavBar.jsx
  var PER_PAGE_OPTIONS = [
    10,
    25,
    50,
    100,
    250
  ];
  var useStyles2 = makeStyles_default((theme2) => ({
    pagerStyle: {
      marginTop: theme2.spacing(2),
      marginBottom: theme2.spacing(2),
      borderTop: "1px solid lightgray",
      borderBottom: "1px solid lightgray",
      width: "100%"
    },
    upperGridStyle: {
      alignItems: "center",
      marginTop: theme2.spacing(1),
      marginBottom: theme2.spacing(1)
    },
    lowerGridStyle: {
      marginTop: theme2.spacing(-1),
      marginBottom: theme2.spacing(2)
    },
    justified: {
      justifyContent: "center"
    },
    flipped: {
      transform: "scaleY(-1);"
    }
  }));
  function DataListNavBar(props) {
    const { name, totalPages, sortByOptions, filterByOptions } = props;
    const classes = useStyles2();
    const [pagination, setPagination] = Recoil_index_14(PaginationState);
    const [sorting, setSorting] = Recoil_index_14(SortingState);
    const [filtering, setFiltering] = Recoil_index_14(FilteringState);
    const [showAdvanced, setShowAdvanced] = Recoil_index_14(AdvancedNavigationState);
    (0, import_react16.useEffect)(() => {
      if (Array.isArray(filterByOptions) && filterByOptions.length > 0 && filtering.filterBy === "") {
        setFiltering({ ...filtering, filterBy: filterByOptions[0].value });
      }
    }, []);
    const isMinSM = useMediaQuery((theme2) => theme2.breakpoints.up("sm"));
    const isMinMD = useMediaQuery((theme2) => theme2.breakpoints.up("md"));
    const isMinLG = useMediaQuery((theme2) => theme2.breakpoints.up("lg"));
    let boundaryCount = isMinSM ? 1 : 2;
    let siblingCount = 1;
    if (isMinMD) {
      boundaryCount += 1;
      siblingCount += 1;
    }
    if (isMinLG) {
      boundaryCount += 1;
      siblingCount += 1;
    }
    const toggleSortOrder = (e) => {
      if (sorting.sortOrder === 1) {
        setSorting({ ...sorting, sortOrder: -1 });
      } else {
        setSorting({ ...sorting, sortOrder: 1 });
      }
    };
    return /* @__PURE__ */ import_react16.default.createElement("div", {
      className: classes.pagerStyle
    }, /* @__PURE__ */ import_react16.default.createElement(Grid_default, {
      container: true,
      spacing: 3,
      className: classes.upperGridStyle
    }, /* @__PURE__ */ import_react16.default.createElement(Grid_default, {
      item: true,
      xs: 12,
      sm: 9
    }, /* @__PURE__ */ import_react16.default.createElement(Pagination_default, {
      count: totalPages,
      page: pagination.currentPage,
      boundaryCount,
      siblingCount,
      onChange: (e, value) => {
        setPagination({ ...pagination, currentPage: value });
      },
      classes: { ul: classes.justified }
    })), /* @__PURE__ */ import_react16.default.createElement(Grid_default, {
      item: true,
      xs: 10,
      sm: 2
    }, /* @__PURE__ */ import_react16.default.createElement(TextField_default, {
      id: `${name ? name + "-" : ""}itemsPerPage`,
      name: `${name ? name + "-" : ""}itemsPerPage`,
      label: "Per-Page",
      fullWidth: true,
      select: true,
      value: pagination.perPage,
      onChange: (e) => {
        setPagination({ ...pagination, perPage: parseInt(e.target.value) });
      }
    }, PER_PAGE_OPTIONS.map((perPageOption, i) => /* @__PURE__ */ import_react16.default.createElement(MenuItem_default, {
      key: i,
      value: perPageOption
    }, perPageOption)))), /* @__PURE__ */ import_react16.default.createElement(Grid_default, {
      item: true,
      xs: 2,
      sm: 1
    }, /* @__PURE__ */ import_react16.default.createElement(Tooltip_default, {
      title: "Show Advanced Options"
    }, /* @__PURE__ */ import_react16.default.createElement(IconButton_default, {
      onClick: (e) => {
        setShowAdvanced(!showAdvanced);
      },
      "aria-expanded": showAdvanced,
      "aria-label": "Show Advanced Options"
    }, /* @__PURE__ */ import_react16.default.createElement(Settings_default, null))))), /* @__PURE__ */ import_react16.default.createElement(Collapse_default, {
      in: showAdvanced,
      timeout: "auto",
      unmountOnExit: true
    }, /* @__PURE__ */ import_react16.default.createElement(Grid_default, {
      container: true,
      spacing: 3,
      className: classes.lowerGridStyle
    }, /* @__PURE__ */ import_react16.default.createElement(Grid_default, {
      item: true,
      xs: 12,
      sm: 5
    }, Array.isArray(sortByOptions) && sortByOptions.length > 0 && /* @__PURE__ */ import_react16.default.createElement(TextField_default, {
      id: `${name ? name + "-" : ""}sortBy`,
      name: `${name ? name + "-" : ""}sortBy`,
      label: "Sort By",
      variant: "outlined",
      fullWidth: true,
      select: true,
      value: sorting.sortBy,
      onChange: (e) => {
        setSorting({ ...sorting, sortBy: e.target.value });
      },
      InputProps: {
        startAdornment: /* @__PURE__ */ import_react16.default.createElement(InputAdornment_default, {
          position: "start"
        }, /* @__PURE__ */ import_react16.default.createElement(Tooltip_default, {
          title: "Reverse Sort Order"
        }, /* @__PURE__ */ import_react16.default.createElement(IconButton_default, {
          size: "small",
          onClick: toggleSortOrder
        }, /* @__PURE__ */ import_react16.default.createElement(Sort_default, {
          className: sorting.sortOrder < 0 ? classes.flipped : ""
        }))))
      }
    }, sortByOptions.map((sortByOption, i) => /* @__PURE__ */ import_react16.default.createElement(MenuItem_default, {
      key: i,
      value: sortByOption.value
    }, sortByOption.text)))), /* @__PURE__ */ import_react16.default.createElement(Grid_default, {
      item: true,
      xs: 12,
      sm: 7
    }, Array.isArray(filterByOptions) && filterByOptions.length > 0 && /* @__PURE__ */ import_react16.default.createElement(TextField_default, {
      id: `${name ? name + "-" : ""}filterByText`,
      name: `${name ? name + "-" : ""}filterByText`,
      label: "Filter List Items",
      variant: "outlined",
      fullWidth: true,
      value: filtering.filterText,
      placeholder: "filter text",
      onChange: (e) => {
        setFiltering({ ...filtering, filterText: e.target.value });
      },
      InputProps: {
        startAdornment: /* @__PURE__ */ import_react16.default.createElement(InputAdornment_default, {
          position: "start"
        }, /* @__PURE__ */ import_react16.default.createElement(Select_default, {
          fullWidth: true,
          id: `${name ? name + "-" : ""}filterBy`,
          name: `${name ? name + "-" : ""}filterBy`,
          value: filtering.filterBy,
          onChange: (e) => {
            setFiltering({ ...filtering, filterBy: e.target.value });
          },
          "aria-label": "Field to filter by",
          disableUnderline: true
        }, /* @__PURE__ */ import_react16.default.createElement(MenuItem_default, {
          disabled: true,
          value: ""
        }, "Filter By"), /* @__PURE__ */ import_react16.default.createElement(Divider_default, null), filterByOptions.map((filterByOption, i) => /* @__PURE__ */ import_react16.default.createElement(MenuItem_default, {
          key: i,
          value: filterByOption.value
        }, filterByOption.text)))),
        endAdornment: /* @__PURE__ */ import_react16.default.createElement(InputAdornment_default, {
          position: "end"
        }, filtering.filterText !== "" && /* @__PURE__ */ import_react16.default.createElement(Tooltip_default, {
          title: "Clear Filter Text"
        }, /* @__PURE__ */ import_react16.default.createElement(IconButton_default, {
          size: "small",
          onClick: (e) => {
            setFiltering({ ...filtering, filterText: "" });
          }
        }, /* @__PURE__ */ import_react16.default.createElement(Cancel_default, null))))
      }
    })))));
  }
  var MenuOptionShape = {
    text: import_prop_types72.default.string.isRequired,
    value: import_prop_types72.default.string.isRequired
  };
  DataListNavBar.propTypes = {
    name: import_prop_types72.default.string,
    totalPages: import_prop_types72.default.number,
    sortByOptions: import_prop_types72.default.arrayOf(import_prop_types72.default.shape(MenuOptionShape)),
    filterByOptions: import_prop_types72.default.arrayOf(import_prop_types72.default.shape(MenuOptionShape))
  };
  DataListNavBar.defaultProps = {
    name: "",
    totalPages: 1,
    sortByOptions: [],
    filterByOptions: []
  };

  // client/adminComponents/DataListItem.jsx
  var import_react17 = __toModule(require_react());
  var import_prop_types73 = __toModule(require_prop_types());
  function DataListItem(props) {
    const { dataItem, dataType, onAction, onDelete, isAdmin, ...restProps } = props;
    return /* @__PURE__ */ import_react17.default.createElement(ListItem_default, {
      ...restProps
    }, /* @__PURE__ */ import_react17.default.createElement(ListItemAvatar_default, null, /* @__PURE__ */ import_react17.default.createElement(Avatar_default, null, dataType === "user" && /* @__PURE__ */ import_react17.default.createElement(Person_default2, null), dataType === "team" && /* @__PURE__ */ import_react17.default.createElement(Group_default, null), dataType === "unit" && /* @__PURE__ */ import_react17.default.createElement(Domain_default, null))), /* @__PURE__ */ import_react17.default.createElement(ListItemText_default, {
      primary: dataType === "user" ? `${dataItem.name} (${dataItem.preferredName})` : dataItem.name,
      secondary: dataType === "user" ? dataItem.email : dataItem._id
    }), /* @__PURE__ */ import_react17.default.createElement(ListItemSecondaryAction_default, null, dataType === "user" && !isAdmin && /* @__PURE__ */ import_react17.default.createElement(Tooltip_default, {
      title: "Promote User",
      placement: "left"
    }, /* @__PURE__ */ import_react17.default.createElement(IconButton_default, {
      "aria-label": "promote",
      onClick: onAction
    }, /* @__PURE__ */ import_react17.default.createElement(ThumbUpAlt_default, null))), /* @__PURE__ */ import_react17.default.createElement(Tooltip_default, {
      title: "Delete",
      placement: "right"
    }, /* @__PURE__ */ import_react17.default.createElement(IconButton_default, {
      edge: "end",
      "aria-label": "delete",
      onClick: onDelete
    }, /* @__PURE__ */ import_react17.default.createElement(Delete_default, null)))));
  }
  DataListItem.propTypes = {
    dataItem: import_prop_types73.default.shape({
      name: import_prop_types73.default.string.isRequired,
      _id: import_prop_types73.default.string.isRequired,
      preferredName: import_prop_types73.default.string,
      email: import_prop_types73.default.string
    }),
    onAction: import_prop_types73.default.func,
    onDelete: import_prop_types73.default.func,
    dataType: import_prop_types73.default.string,
    isAdmin: import_prop_types73.default.bool
  };
  DataListItem.defaultProps = {
    dataItem: null,
    dataType: "user",
    onAction: null,
    onDelete: null,
    isAdmin: false
  };

  // client/adminComponents/UserEditDialog.jsx
  var import_react18 = __toModule(require_react());
  var import_prop_types74 = __toModule(require_prop_types());

  // client/adminComponents/dataHelper.js
  var import_axios = __toModule(require_axios2());
  var import_store2 = __toModule(require_store2());
  var MAX_PER_PAGE = 250;
  async function retrieveFullList(which) {
    if (which !== "user" && which !== "team" && which !== "unit") {
      throw new Error(`Invalid list type "${which}"`);
    }
    const response = await retrieveList(which, 1, MAX_PER_PAGE);
    let fullList = [...response.data];
    const total = response.count;
    for (let page = 2; page < Math.ceil(total / MAX_PER_PAGE); page++) {
      const nextPage = await retrieveList(which, page, MAX_PER_PAGE);
      fullList = fullList.concat(nextPage.data);
    }
    return fullList;
  }
  function retrieveList(which, page, perPage, sortBy, sortOrder, filterBy, filter) {
    return new Promise((resolve, reject) => {
      if (which !== "user" && which !== "team" && which !== "unit") {
        return reject(new Error(`Invalid list type "${which}"`));
      }
      let URL = `../data/${which}/list?fullInfo=true`;
      URL += `&perPage=${perPage}&page=${page}`;
      URL += sortBy ? `&sortBy=${sortBy}` : "";
      URL += sortOrder ? `&sortOrder=${sortOrder}` : "";
      URL += filterBy ? `&filterBy=${filterBy}` : "";
      URL += filter ? `&filter=${filter}` : "";
      import_axios.default.get(URL).then((response) => {
        if (response.data.total.length < 1) {
          return resolve({ count: 0, data: [] });
        }
        return resolve({
          count: response.data.total[0].filteredCount,
          data: response.data.data
        });
      }).catch((error) => {
        console.log(error);
        return reject(error);
      });
    });
  }
  function retrieveItem(which, id) {
    return new Promise((resolve, reject) => {
      if (which !== "user" && which !== "team" && which !== "unit") {
        return reject(new Error(`Invalid list type "${which}"`));
      }
      import_axios.default.get(`../data/${which}/details/${id}`).then((response) => {
        return resolve(response.data);
      }).catch((error) => {
        console.log(error);
        return reject(error);
      });
    });
  }
  function updateItem(which, newData) {
    return new Promise((resolve, reject) => {
      if (which !== "user" && which !== "team" && which !== "unit") {
        return reject(new Error(`Invalid list type "${which}"`));
      }
      import_axios.default.post(`../data/${which}/update`, newData).then((response) => {
        return resolve(response.data);
      }).catch((error) => {
        console.log(error);
        return reject(error);
      });
    });
  }
  function createItem(which, itemInfo) {
    return new Promise((resolve, reject) => {
      if (which !== "team" && which !== "unit") {
        return reject(new Error(`Invalid type for item creation "${which}"`));
      }
      import_axios.default.post(`../data/${which}/register/`, itemInfo).then((response) => {
        return resolve();
      }).catch((error) => {
        console.log(error);
        return reject(error);
      });
    });
  }
  function deleteItem(which, itemId) {
    return new Promise((resolve, reject) => {
      if (which !== "user" && which !== "team" && which !== "unit") {
        return reject(new Error(`Invalid list type "${which}"`));
      }
      import_axios.default.delete(`../data/${which}/remove/${itemId}`).then((response) => {
        return resolve();
      }).catch((error) => {
        console.log(error);
        return reject(error);
      });
    });
  }
  function promoteUser(userId) {
    return new Promise((resolve, reject) => {
      import_axios.default.post("../data/user/promote", { id: userId, newType: "admin" }).then((response) => {
        return resolve(response.data);
      }).catch((error) => {
        console.log(error);
        return reject(error);
      });
    });
  }

  // client/adminComponents/UserEditDialog.jsx
  var Transition2 = import_react18.default.forwardRef(function Transition3(props, ref) {
    return /* @__PURE__ */ import_react18.default.createElement(Slide_default, {
      direction: "up",
      ref,
      ...props
    });
  });
  var useStyles3 = makeStyles_default((theme2) => ({
    contentStyle: {
      overflowY: "hidden"
    }
  }));
  function UserEditDialog(props) {
    const { userId, open, onDialogClose } = props;
    const classes = useStyles3();
    const [disableActions, setDisableActions] = (0, import_react18.useState)(false);
    const [teamList, setTeamList] = (0, import_react18.useState)([]);
    const [fullName, setFullName] = (0, import_react18.useState)("");
    const [preferredPronouns, setPreferredPronouns] = (0, import_react18.useState)("");
    const [preferredName, setPreferredName] = (0, import_react18.useState)("");
    const [email, setEmail] = (0, import_react18.useState)("");
    const [userTeams, setUserTeams] = (0, import_react18.useState)([]);
    (0, import_react18.useEffect)(() => {
      if (!userId) {
        return;
      }
      (async () => {
        try {
          const allTeams = await retrieveFullList("team");
          setTeamList(allTeams);
        } catch (err) {
          console.error("Failed to retrieve team list");
          console.error(err);
        }
        try {
          const userDetails = await retrieveItem("user", userId);
          setFullName(userDetails.name);
          setPreferredName(userDetails.preferredName);
          setPreferredPronouns(userDetails.preferredPronouns);
          setEmail(userDetails.email);
          setUserTeams(userDetails.teams);
        } catch (err) {
          console.error("Failed to retrieve user details");
          console.error(err);
        }
      })();
    }, [userId]);
    const handleClose = async (save) => {
      if (save) {
        setDisableActions(true);
        try {
          await updateItem("user", {
            id: userId,
            name: fullName,
            preferredName,
            preferredPronouns,
            teams: userTeams
          });
          onDialogClose();
        } catch (err) {
          console.error("Failed to save data");
          console.error(err);
        } finally {
          setDisableActions(false);
        }
      } else {
        onDialogClose();
      }
    };
    return /* @__PURE__ */ import_react18.default.createElement(Dialog_default, {
      open,
      onClose: (e, reason) => {
        if (reason !== "backdropClick") {
          handleClose(false);
        }
      },
      fullWidth: true,
      maxWidth: "sm",
      TransitionComponent: Transition2,
      "aria-labelledby": "team-edit-dialog-title"
    }, /* @__PURE__ */ import_react18.default.createElement(DialogTitle_default, {
      id: "team-edit-dialog-title"
    }, userId === "" ? "Create New User" : "Edit User"), /* @__PURE__ */ import_react18.default.createElement(DialogContent_default, {
      className: classes.contentStyle
    }, /* @__PURE__ */ import_react18.default.createElement(Grid_default, {
      container: true,
      spacing: 3
    }, userId === "" ? /* @__PURE__ */ import_react18.default.createElement(Grid_default, {
      item: true,
      xs: 12
    }, /* @__PURE__ */ import_react18.default.createElement(DialogContentText_default, null, "Please use the ", /* @__PURE__ */ import_react18.default.createElement(Link_default, {
      href: "../Register.html",
      target: "_blank"
    }, "Register Page"), " to create a new user.")) : /* @__PURE__ */ import_react18.default.createElement(import_react18.default.Fragment, null, /* @__PURE__ */ import_react18.default.createElement(Grid_default, {
      item: true,
      xs: 12
    }, /* @__PURE__ */ import_react18.default.createElement(TextField_default, {
      required: true,
      id: "fullName",
      name: "fullName",
      label: "Full Name",
      fullWidth: true,
      autoComplete: "name",
      value: fullName,
      onChange: (e) => {
        setFullName(e.target.value);
      }
    })), /* @__PURE__ */ import_react18.default.createElement(Grid_default, {
      item: true,
      xs: 12,
      sm: 6
    }, /* @__PURE__ */ import_react18.default.createElement(TextField_default, {
      id: "preferredPronouns",
      name: "preferredPronouns",
      label: "Preferred pronouns",
      fullWidth: true,
      autoComplete: "pronouns",
      value: preferredPronouns,
      onChange: (e) => {
        setPreferredPronouns(e.target.value);
      }
    })), /* @__PURE__ */ import_react18.default.createElement(Grid_default, {
      item: true,
      xs: 12,
      sm: 6
    }, /* @__PURE__ */ import_react18.default.createElement(TextField_default, {
      required: true,
      id: "preferredName",
      name: "preferredName",
      label: "Preferred name",
      fullWidth: true,
      autoComplete: "nickname",
      value: preferredName,
      onChange: (e) => {
        setPreferredName(e.target.value);
      }
    })), /* @__PURE__ */ import_react18.default.createElement(Grid_default, {
      item: true,
      xs: 12
    }, /* @__PURE__ */ import_react18.default.createElement(TextField_default, {
      required: true,
      id: "email",
      name: "email",
      label: "email",
      fullWidth: true,
      autoComplete: "email",
      value: email,
      disabled: true,
      helperText: "A user's email cannot be changed with this form"
    })), /* @__PURE__ */ import_react18.default.createElement(Grid_default, {
      item: true,
      xs: 12
    }, /* @__PURE__ */ import_react18.default.createElement(TextField_default, {
      id: "userTeams",
      name: "userTeams",
      label: "Team Membership",
      select: true,
      SelectProps: { multiple: true },
      fullWidth: true,
      value: userTeams,
      helperText: "Select zero or more teams to assign to that team",
      onChange: (e) => {
        setUserTeams(e.target.value);
      }
    }, teamList.map((team) => /* @__PURE__ */ import_react18.default.createElement(MenuItem_default, {
      key: team._id,
      value: team._id
    }, team.name))))))), /* @__PURE__ */ import_react18.default.createElement(DialogActions_default, null, /* @__PURE__ */ import_react18.default.createElement(Button_default, {
      onClick: (e) => {
        handleClose(false);
      },
      color: "primary",
      disabled: disableActions
    }, "Cancel"), userId !== "" && /* @__PURE__ */ import_react18.default.createElement(Button_default, {
      onClick: (e) => {
        handleClose(true);
      },
      color: "primary",
      disabled: disableActions
    }, "Save")));
  }
  UserEditDialog.propTypes = {
    open: import_prop_types74.default.bool.isRequired,
    onDialogClose: import_prop_types74.default.func.isRequired,
    userId: import_prop_types74.default.string.isRequired
  };

  // client/adminComponents/UnitEditDialog.jsx
  var import_react19 = __toModule(require_react());
  var import_prop_types75 = __toModule(require_prop_types());
  var Transition4 = import_react19.default.forwardRef(function Transition5(props, ref) {
    return /* @__PURE__ */ import_react19.default.createElement(Slide_default, {
      direction: "up",
      ref,
      ...props
    });
  });
  var useStyles4 = makeStyles_default((theme2) => ({
    contentStyle: {
      overflowY: "hidden"
    }
  }));
  function UnitEditDialog(props) {
    const { unitId, open, onDialogClose } = props;
    const classes = useStyles4();
    const [disableActions, setDisableActions] = (0, import_react19.useState)(false);
    const [unitName, setUnitName] = (0, import_react19.useState)("");
    const [unitDescription, setUnitDescription] = (0, import_react19.useState)("");
    (0, import_react19.useEffect)(() => {
      if (!unitId) {
        setUnitName("");
        setUnitDescription("");
      } else {
        (async () => {
          try {
            const unitDetails = await retrieveItem("unit", unitId);
            setUnitName(unitDetails.name);
            setUnitDescription(unitDetails.description);
          } catch (err) {
            console.error("Failed to retrieve unit details");
            console.error(err);
          }
        })();
      }
    }, [unitId]);
    const handleClose = async (save) => {
      if (save) {
        setDisableActions(true);
        try {
          if (unitId === "") {
            await createItem("unit", { unitName, description: unitDescription });
            onDialogClose();
          } else {
            const updatedUnit = { id: unitId, name: unitName, description: unitDescription };
            await updateItem("unit", updatedUnit);
            onDialogClose(updatedUnit);
          }
        } catch (err) {
          console.error("Failed to save data");
          console.error(err);
        } finally {
          setDisableActions(false);
        }
      } else {
        onDialogClose();
      }
    };
    return /* @__PURE__ */ import_react19.default.createElement(Dialog_default, {
      open,
      onClose: (e, reason) => {
        if (reason !== "backdropClick") {
          handleClose(false);
        }
      },
      fullWidth: true,
      maxWidth: "sm",
      TransitionComponent: Transition4,
      "aria-labelledby": "unit-edit-dialog-title"
    }, /* @__PURE__ */ import_react19.default.createElement(DialogTitle_default, {
      id: "unit-edit-dialog-title"
    }, unitId === "" ? "Create New Org Unit" : "Edit Org Unit"), /* @__PURE__ */ import_react19.default.createElement(DialogContent_default, {
      className: classes.contentStyle
    }, /* @__PURE__ */ import_react19.default.createElement(Grid_default, {
      container: true,
      spacing: 3
    }, /* @__PURE__ */ import_react19.default.createElement(Grid_default, {
      item: true,
      xs: 12
    }, /* @__PURE__ */ import_react19.default.createElement(TextField_default, {
      required: true,
      id: "unitName",
      name: "unitName",
      label: "Organization Unit Name",
      fullWidth: true,
      value: unitName,
      onChange: (e) => {
        setUnitName(e.target.value);
      }
    })), /* @__PURE__ */ import_react19.default.createElement(Grid_default, {
      item: true,
      xs: 12
    }, /* @__PURE__ */ import_react19.default.createElement(TextField_default, {
      id: "unitDescription",
      name: "unitDescription",
      label: "Organization Unit Description (optional)",
      multiline: true,
      rows: 4,
      fullWidth: true,
      value: unitDescription,
      onChange: (e) => {
        setUnitDescription(e.target.value);
      }
    })))), /* @__PURE__ */ import_react19.default.createElement(DialogActions_default, null, /* @__PURE__ */ import_react19.default.createElement(Button_default, {
      onClick: (e) => {
        handleClose(false);
      },
      color: "primary",
      disabled: disableActions
    }, "Cancel"), /* @__PURE__ */ import_react19.default.createElement(Button_default, {
      onClick: (e) => {
        handleClose(true);
      },
      color: "primary",
      disabled: disableActions
    }, "Save")));
  }
  UnitEditDialog.propTypes = {
    open: import_prop_types75.default.bool.isRequired,
    onDialogClose: import_prop_types75.default.func.isRequired,
    unitId: import_prop_types75.default.string.isRequired
  };

  // client/adminComponents/TeamEditDialog.jsx
  var import_react20 = __toModule(require_react());
  var import_prop_types76 = __toModule(require_prop_types());
  var Transition6 = import_react20.default.forwardRef(function Transition7(props, ref) {
    return /* @__PURE__ */ import_react20.default.createElement(Slide_default, {
      direction: "up",
      ref,
      ...props
    });
  });
  var useStyles5 = makeStyles_default((theme2) => ({
    contentStyle: {
      overflowY: "hidden"
    }
  }));
  function TeamEditDialog(props) {
    const { teamId, open, onDialogClose } = props;
    const classes = useStyles5();
    const [disableActions, setDisableActions] = (0, import_react20.useState)(false);
    const [orgUnitList, setOrgUnitList] = (0, import_react20.useState)([]);
    const [teamName, setTeamName] = (0, import_react20.useState)("");
    const [teamDescription, setTeamDescription] = (0, import_react20.useState)("");
    const [teamOrgId, setTeamOrgId] = (0, import_react20.useState)("");
    (0, import_react20.useEffect)(() => {
      (async () => {
        try {
          const allOrgUnits = await retrieveFullList("unit");
          setOrgUnitList(allOrgUnits);
        } catch (err) {
          console.error("Failed to retrieve org unit list");
          console.error(err);
        }
      })();
      if (!teamId) {
        setTeamName("");
        setTeamDescription("");
        setTeamOrgId("");
      } else {
        (async () => {
          try {
            const teamDetails = await retrieveItem("team", teamId);
            setTeamName(teamDetails.name);
            setTeamDescription(teamDetails.description);
            setTeamOrgId(teamDetails.orgId);
          } catch (err) {
            console.error("Failed to retrieve team details");
            console.error(err);
          }
        })();
      }
    }, [teamId]);
    const handleClose = async (save) => {
      if (save) {
        setDisableActions(true);
        try {
          if (teamId === "") {
            const newTeam = { name: teamName, description: teamDescription, orgId: teamOrgId };
            await createItem("team", newTeam);
            onDialogClose();
          } else {
            const updatedTeam = { id: teamId, name: teamName, description: teamDescription, orgId: teamOrgId };
            await updateItem("team", updatedTeam);
            onDialogClose(updatedTeam);
          }
        } catch (err) {
          console.error("Failed to save data");
          console.error(err);
        } finally {
          setDisableActions(false);
        }
      } else {
        onDialogClose();
      }
    };
    return /* @__PURE__ */ import_react20.default.createElement(Dialog_default, {
      open,
      onClose: (e, reason) => {
        if (reason !== "backdropClick") {
          handleClose(false);
        }
      },
      fullWidth: true,
      maxWidth: "sm",
      TransitionComponent: Transition6,
      "aria-labelledby": "team-edit-dialog-title"
    }, /* @__PURE__ */ import_react20.default.createElement(DialogTitle_default, {
      id: "team-edit-dialog-title"
    }, teamId === "" ? "Create New Team" : "Edit Team"), /* @__PURE__ */ import_react20.default.createElement(DialogContent_default, {
      className: classes.contentStyle
    }, /* @__PURE__ */ import_react20.default.createElement(Grid_default, {
      container: true,
      spacing: 3
    }, /* @__PURE__ */ import_react20.default.createElement(Grid_default, {
      item: true,
      xs: 12
    }, /* @__PURE__ */ import_react20.default.createElement(TextField_default, {
      required: true,
      id: "teamName",
      name: "teamName",
      label: "Team Name",
      fullWidth: true,
      value: teamName,
      onChange: (e) => {
        setTeamName(e.target.value);
      }
    })), /* @__PURE__ */ import_react20.default.createElement(Grid_default, {
      item: true,
      xs: 12
    }, /* @__PURE__ */ import_react20.default.createElement(TextField_default, {
      id: "teamDescription",
      name: "teamDescription",
      label: "Team Description (optional)",
      multiline: true,
      rows: 4,
      fullWidth: true,
      value: teamDescription,
      onChange: (e) => {
        setTeamDescription(e.target.value);
      }
    })), /* @__PURE__ */ import_react20.default.createElement(Grid_default, {
      item: true,
      xs: 12
    }, /* @__PURE__ */ import_react20.default.createElement(TextField_default, {
      id: "teamOrgUnitId",
      name: "teamOrgUnitId",
      label: "Team Org Unit (optional)",
      select: true,
      fullWidth: true,
      value: teamOrgId,
      onChange: (e) => {
        setTeamOrgId(e.target.value);
      }
    }, /* @__PURE__ */ import_react20.default.createElement(MenuItem_default, {
      key: "none",
      value: ""
    }, "None"), /* @__PURE__ */ import_react20.default.createElement(Divider_default, null), orgUnitList.map((orgUnit) => /* @__PURE__ */ import_react20.default.createElement(MenuItem_default, {
      key: orgUnit._id,
      value: orgUnit._id
    }, orgUnit.name)))))), /* @__PURE__ */ import_react20.default.createElement(DialogActions_default, null, /* @__PURE__ */ import_react20.default.createElement(Button_default, {
      onClick: (e) => {
        handleClose(false);
      },
      color: "primary",
      disabled: disableActions
    }, "Cancel"), /* @__PURE__ */ import_react20.default.createElement(Button_default, {
      onClick: (e) => {
        handleClose(true);
      },
      color: "primary",
      disabled: disableActions
    }, "Save")));
  }
  TeamEditDialog.propTypes = {
    open: import_prop_types76.default.bool.isRequired,
    onDialogClose: import_prop_types76.default.func.isRequired,
    teamId: import_prop_types76.default.string.isRequired
  };

  // client/adminComponents/ItemDeleteDialog.jsx
  var import_react21 = __toModule(require_react());
  var import_prop_types77 = __toModule(require_prop_types());
  var Transition8 = import_react21.default.forwardRef(function Transition9(props, ref) {
    return /* @__PURE__ */ import_react21.default.createElement(Slide_default, {
      direction: "up",
      ref,
      ...props
    });
  });
  var useStyles6 = makeStyles_default((theme2) => ({
    contentStyle: {
      overflowY: "hidden"
    }
  }));
  var confirmStyle = {
    fontWeight: "bolder",
    paddingLeft: "16px"
  };
  function ItemDeleteDialog(props) {
    const { itemId, dataType, confirmText, open, onDialogClose } = props;
    const classes = useStyles6();
    const [userConfirmText, setUserConfirmText] = (0, import_react21.useState)("");
    const handleClose = async (doDelete) => {
      if (doDelete) {
        try {
          await deleteItem(dataType, itemId);
          onDialogClose(true);
        } catch (err) {
          console.error("Failed to delete item");
          console.error(err);
        }
      } else {
        onDialogClose(false);
      }
    };
    return /* @__PURE__ */ import_react21.default.createElement(Dialog_default, {
      open,
      onClose: (e, reason) => {
        if (reason !== "backdropClick") {
          handleClose(false);
        }
      },
      fullWidth: true,
      maxWidth: "sm",
      TransitionComponent: Transition8,
      "aria-labelledby": "unit-edit-dialog-title"
    }, /* @__PURE__ */ import_react21.default.createElement(DialogTitle_default, {
      id: "unit-edit-dialog-title"
    }, "Edit Org Unit"), /* @__PURE__ */ import_react21.default.createElement(DialogContent_default, {
      className: classes.contentStyle
    }, /* @__PURE__ */ import_react21.default.createElement(DialogContentText_default, null, "This will permanently delete this item, removing it from the database.", /* @__PURE__ */ import_react21.default.createElement("br", null), /* @__PURE__ */ import_react21.default.createElement("br", null), "THIS OPERATION CANNOT BE UNDONE! To confirm, enter:", /* @__PURE__ */ import_react21.default.createElement("br", null), /* @__PURE__ */ import_react21.default.createElement("span", {
      style: confirmStyle
    }, confirmText)), /* @__PURE__ */ import_react21.default.createElement(TextField_default, {
      required: true,
      id: "confirmText",
      name: "confirmText",
      fullWidth: true,
      value: userConfirmText,
      onChange: (e) => {
        setUserConfirmText(e.target.value);
      }
    })), /* @__PURE__ */ import_react21.default.createElement(DialogActions_default, null, /* @__PURE__ */ import_react21.default.createElement(Button_default, {
      onClick: (e) => {
        handleClose(false);
      },
      color: "primary"
    }, "Cancel"), /* @__PURE__ */ import_react21.default.createElement(Button_default, {
      onClick: (e) => {
        handleClose(true);
      },
      color: "secondary",
      variant: "contained",
      disableElevation: true,
      disabled: confirmText !== userConfirmText
    }, "Delete")));
  }
  ItemDeleteDialog.propTypes = {
    open: import_prop_types77.default.bool.isRequired,
    onDialogClose: import_prop_types77.default.func.isRequired,
    itemId: import_prop_types77.default.string.isRequired,
    dataType: import_prop_types77.default.string.isRequired,
    confirmText: import_prop_types77.default.string.isRequired
  };

  // client/adminComponents/PromoteUserDialog.jsx
  var import_react22 = __toModule(require_react());
  var import_prop_types78 = __toModule(require_prop_types());
  var Transition10 = import_react22.default.forwardRef(function Transition11(props, ref) {
    return /* @__PURE__ */ import_react22.default.createElement(Slide_default, {
      direction: "up",
      ref,
      ...props
    });
  });
  var useStyles7 = makeStyles_default((theme2) => ({
    contentStyle: {
      overflowY: "hidden"
    }
  }));
  var nameStyle = {
    fontWeight: "bolder"
  };
  function PromoteUserDialog(props) {
    const { userId, userName, open, onDialogClose } = props;
    const classes = useStyles7();
    const handleClose = async (doPromotion) => {
      if (doPromotion) {
        try {
          await promoteUser(userId);
          onDialogClose(true);
        } catch (err) {
          console.error("Failed to promote user");
          console.error(err);
        }
      } else {
        onDialogClose(false);
      }
    };
    return /* @__PURE__ */ import_react22.default.createElement(Dialog_default, {
      open,
      onClose: (e, reason) => {
        if (reason !== "backdropClick") {
          handleClose(false);
        }
      },
      fullWidth: true,
      maxWidth: "sm",
      TransitionComponent: Transition10,
      "aria-labelledby": "user-promote-dialog-title"
    }, /* @__PURE__ */ import_react22.default.createElement(DialogTitle_default, {
      id: "user-promote-dialog-title"
    }, "Promote User to Admin"), /* @__PURE__ */ import_react22.default.createElement(DialogContent_default, {
      className: classes.contentStyle
    }, /* @__PURE__ */ import_react22.default.createElement(DialogContentText_default, null, "Are you sure you want to promote ", /* @__PURE__ */ import_react22.default.createElement("span", {
      style: nameStyle
    }, userName), ' to "admin" status?')), /* @__PURE__ */ import_react22.default.createElement(DialogActions_default, null, /* @__PURE__ */ import_react22.default.createElement(Button_default, {
      onClick: (e) => {
        handleClose(false);
      },
      color: "primary"
    }, "Cancel"), /* @__PURE__ */ import_react22.default.createElement(Button_default, {
      onClick: (e) => {
        handleClose(true);
      },
      color: "secondary",
      variant: "contained",
      disableElevation: true
    }, "Promote")));
  }
  PromoteUserDialog.propTypes = {
    open: import_prop_types78.default.bool.isRequired,
    onDialogClose: import_prop_types78.default.func.isRequired,
    userId: import_prop_types78.default.string.isRequired,
    userName: import_prop_types78.default.string.isRequired
  };

  // client/adminComponents/DataList.jsx
  var ButtonTooltip = withStyles_default2((theme2) => ({
    tooltip: {
      fontSize: 16
    }
  }))(Tooltip_default);
  var useStyles8 = makeStyles_default((theme2) => ({
    paper: {
      marginTop: theme2.spacing(8),
      display: "flex",
      flexDirection: "column",
      alignItems: "center"
    },
    addItemButton: {
      position: "fixed",
      bottom: theme2.spacing(6),
      right: theme2.spacing(6)
    },
    dataTable: {
      width: "100%",
      marginTop: theme2.spacing(2),
      marginBottom: theme2.spacing(2)
    }
  }));
  function DataList(props) {
    const { dataType, sortByOptions, filterByOptions } = props;
    const classes = useStyles8();
    const pagination = Recoil_index_12(PaginationState);
    const sorting = Recoil_index_12(SortingState);
    const filtering = Recoil_index_12(FilteringState);
    const [totalPages, setTotalPages] = (0, import_react23.useState)(1);
    const [editorOpen, setEditorOpen] = (0, import_react23.useState)(false);
    const [editedCount, setEditedCount] = (0, import_react23.useState)(0);
    const [altDialogOpen, setAltDialogOpen] = (0, import_react23.useState)(false);
    const [promotedCount, setPromotedCount] = (0, import_react23.useState)(0);
    const [deleteDialogOpen, setDeleteDialogOpen] = (0, import_react23.useState)(false);
    const [deleteConfirmText, setDeleteConfirmText] = (0, import_react23.useState)("");
    const [deletedCount, setDeletedCount] = (0, import_react23.useState)(0);
    const [activeRetrieve, setActiveRetrieve] = (0, import_react23.useState)(false);
    const [listData, setListData] = (0, import_react23.useState)([]);
    const [activeItemId, setActiveItemId] = (0, import_react23.useState)("");
    const [activeItemName, setActiveItemName] = (0, import_react23.useState)("");
    const [activeItemIndex, setActiveItemIndex] = (0, import_react23.useState)(0);
    const onEditItem = (dataItem, index) => {
      setActiveItemId(dataItem._id);
      setActiveItemIndex(index);
      setEditorOpen(true);
    };
    const onNewItem = () => {
      setActiveItemId("");
      setActiveItemIndex(-1);
      setEditorOpen(true);
    };
    const onDeleteItem = (dataItem, index) => {
      setActiveItemId(dataItem._id);
      if (dataType === "user") {
        setDeleteConfirmText(dataItem.email);
      } else {
        setDeleteConfirmText(dataItem.name);
      }
      setDeleteDialogOpen(true);
    };
    const onItemAltAction = (dataItem, index) => {
      setActiveItemId(dataItem._id);
      setActiveItemName(dataItem.name);
      setAltDialogOpen(true);
    };
    const onEditorClose = (newData) => {
      if (newData) {
        if (activeItemIndex >= 0 && activeItemIndex < listData.length) {
          listData[activeItemIndex] = { ...listData[activeItemIndex], ...newData };
        }
      } else {
        setEditedCount(editedCount + 1);
      }
      setEditorOpen(false);
    };
    const onDeleteDialogClose = (deleted) => {
      if (deleted) {
        setDeletedCount(deletedCount + 1);
      }
      setDeleteDialogOpen(false);
    };
    const onAltDialogClose = (promoted) => {
      if (promoted) {
        setPromotedCount(promotedCount + 1);
      }
      setAltDialogOpen(false);
    };
    (0, import_react23.useEffect)(() => {
      if (activeRetrieve) {
        return;
      }
      setActiveRetrieve(true);
      (async () => {
        try {
          const response = await retrieveList(dataType, pagination.currentPage, pagination.perPage, sorting.sortBy, sorting.sortOrder, filtering.filterBy, filtering.filterText);
          setListData(response.data);
          setTotalPages(Math.ceil(response.count / pagination.perPage));
        } catch (err) {
          console.error("Failed to retrieve team data");
          console.error(err);
        } finally {
          setActiveRetrieve(false);
        }
      })();
    }, [dataType, deletedCount, promotedCount, editedCount, pagination, sorting, filtering]);
    const listElements = listData.map((dataItem, i) => /* @__PURE__ */ import_react23.default.createElement(DataListItem, {
      key: dataItem._id,
      dataItem,
      dataType,
      button: true,
      onClick: (e) => {
        onEditItem(dataItem, i);
      },
      onAction: (e) => {
        onItemAltAction(dataItem, i);
      },
      onDelete: (e) => {
        onDeleteItem(dataItem, i);
      },
      selected: dataItem._id === activeItemId,
      isAdmin: dataType === "user" ? dataItem.userType === "admin" : false
    }));
    return /* @__PURE__ */ import_react23.default.createElement("div", {
      className: classes.paper
    }, /* @__PURE__ */ import_react23.default.createElement(KarunaIcon, null), /* @__PURE__ */ import_react23.default.createElement(Typography_default, {
      component: "h1",
      variant: "h5"
    }, dataType === "user" && "User Management", dataType === "team" && "Team Management", dataType === "unit" && "Org Unit Management"), /* @__PURE__ */ import_react23.default.createElement(DataListNavBar, {
      name: "upper-nav",
      totalPages,
      sortByOptions,
      filterByOptions
    }), /* @__PURE__ */ import_react23.default.createElement("div", {
      className: classes.dataTable
    }, /* @__PURE__ */ import_react23.default.createElement(List_default, null, listElements)), /* @__PURE__ */ import_react23.default.createElement(DataListNavBar, {
      name: "lower-nav",
      totalPages,
      sortByOptions,
      filterByOptions
    }), dataType === "user" && /* @__PURE__ */ import_react23.default.createElement(UserEditDialog, {
      open: editorOpen,
      onDialogClose: onEditorClose,
      userId: activeItemId
    }), dataType === "team" && /* @__PURE__ */ import_react23.default.createElement(TeamEditDialog, {
      open: editorOpen,
      onDialogClose: onEditorClose,
      teamId: activeItemId
    }), dataType === "unit" && /* @__PURE__ */ import_react23.default.createElement(UnitEditDialog, {
      open: editorOpen,
      onDialogClose: onEditorClose,
      unitId: activeItemId
    }), /* @__PURE__ */ import_react23.default.createElement(ItemDeleteDialog, {
      open: deleteDialogOpen,
      onDialogClose: onDeleteDialogClose,
      itemId: activeItemId,
      dataType,
      confirmText: deleteConfirmText
    }), dataType === "user" && /* @__PURE__ */ import_react23.default.createElement(PromoteUserDialog, {
      open: altDialogOpen,
      onDialogClose: onAltDialogClose,
      userId: activeItemId,
      userName: activeItemName
    }), /* @__PURE__ */ import_react23.default.createElement(ButtonTooltip, {
      title: `Create new ${dataType}`,
      placement: "top"
    }, /* @__PURE__ */ import_react23.default.createElement(Fab_default, {
      color: "primary",
      "aria-label": `Create new ${dataType}`,
      className: classes.addItemButton,
      onClick: (e) => {
        onNewItem();
      }
    }, /* @__PURE__ */ import_react23.default.createElement(Add_default, null))));
  }
  DataList.propTypes = {
    dataType: import_prop_types79.default.string.isRequired,
    sortByOptions: import_prop_types79.default.arrayOf(import_prop_types79.default.shape({
      text: import_prop_types79.default.string.isRequired,
      value: import_prop_types79.default.string.isRequired
    })),
    filterByOptions: import_prop_types79.default.arrayOf(import_prop_types79.default.shape({
      text: import_prop_types79.default.string.isRequired,
      value: import_prop_types79.default.string.isRequired
    }))
  };
  DataList.defaultProps = {
    sortByOptions: [],
    filterByOptions: []
  };

  // client/sharedComponents/Copyright.jsx
  var import_react24 = __toModule(require_react());
  var import_prop_types80 = __toModule(require_prop_types());
  function Copyright(props) {
    const { noLinks } = props;
    return /* @__PURE__ */ import_react24.default.createElement(import_react24.default.Fragment, null, /* @__PURE__ */ import_react24.default.createElement(Typography_default, {
      variant: "body2",
      color: "textSecondary",
      align: "center"
    }, "Copyright \xA9 ", /* @__PURE__ */ import_react24.default.createElement(Link_default, {
      color: "inherit",
      href: "/"
    }, "The Karuna Research Team"), " ", new Date().getFullYear(), "."), !noLinks && /* @__PURE__ */ import_react24.default.createElement(import_react24.default.Fragment, null, /* @__PURE__ */ import_react24.default.createElement("br", null), /* @__PURE__ */ import_react24.default.createElement(Typography_default, {
      variant: "body2",
      color: "textSecondary",
      align: "center"
    }, "Server ", /* @__PURE__ */ import_react24.default.createElement(Link_default, {
      color: "inherit",
      underline: "always",
      href: "/Login.html"
    }, "login"), " or ", /* @__PURE__ */ import_react24.default.createElement(Link_default, {
      color: "inherit",
      underline: "always",
      href: "/Logout.html"
    }, "logout")), /* @__PURE__ */ import_react24.default.createElement(Typography_default, {
      variant: "body2",
      color: "textSecondary",
      align: "center"
    }, "Read our current ", /* @__PURE__ */ import_react24.default.createElement(Link_default, {
      color: "inherit",
      underline: "always",
      href: "/Privacy.html"
    }, "privacy policy"), "."), /* @__PURE__ */ import_react24.default.createElement("br", null)), /* @__PURE__ */ import_react24.default.createElement(Typography_default, {
      variant: "body2",
      color: "textSecondary",
      align: "center"
    }, "This research was funded in part by a ", /* @__PURE__ */ import_react24.default.createElement(Link_default, {
      color: "inherit",
      target: "_blank",
      href: "https://www.wisys.org/grants/ignitegrantprogram-appliedresearch"
    }, "WiSys Ignite Grant"), "."));
  }
  Copyright.propTypes = {
    noLinks: import_prop_types80.default.bool
  };
  Copyright.defaultProps = {
    noLinks: false
  };

  // client/OrgUnitManagementPage.jsx
  var theme = createTheme_default();
  import_react_dom3.default.render(/* @__PURE__ */ import_react25.default.createElement(ThemeProvider_default, {
    theme
  }, /* @__PURE__ */ import_react25.default.createElement(Container_default, {
    component: "main",
    maxWidth: "md"
  }, /* @__PURE__ */ import_react25.default.createElement(CssBaseline_default, null), /* @__PURE__ */ import_react25.default.createElement(Recoil_index_2, null, /* @__PURE__ */ import_react25.default.createElement(DataList, {
    dataType: "unit"
  })), /* @__PURE__ */ import_react25.default.createElement(Box_default, {
    mt: 8
  }, /* @__PURE__ */ import_react25.default.createElement(Copyright, null)))), document.getElementById("root"));
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*! store2 - v2.12.0 - 2020-08-12
* Copyright (c) 2020 Nathan Bubna; Licensed (MIT OR GPL-3.0) */
/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license Material-UI v4.0.0-alpha.60
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license Material-UI v4.11.2
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license Material-UI v4.11.4
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license Material-UI v4.12.1
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license Material-UI v4.12.3
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1-lts
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
//# sourceMappingURL=OrgUnitManagementPage.js.map
